var searchIndex = {};
searchIndex["aho_corasick"] = {"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"match"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"match"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",5,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[10,"set_goto","","Set the next state index for the character given.",7,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"acautomaton"}}],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,{"inputs":[{"name":"self"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"get_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"},{"name":"usize"}],"output":{"name":"match"}}],[11,"has_match","","",8,{"inputs":[{"name":"self"},{"name":"stateidx"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"p"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dense"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",9,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sparse"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"stateidx"}}],[11,"set_goto","","",10,{"inputs":[{"name":"self"},{"name":"u8"},{"name":"stateidx"}],"output":null}],[11,"heap_bytes","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the number of patterns in the automaton.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the automaton has no patterns.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matches"}}],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"matchesoverlapping"}}],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatches"}}],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"streammatchesoverlapping"}}]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["chrono"] = {"doc":"Chrono 0.2.25","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",2,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",3,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is *not* left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",19,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",19,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",20,null],[10,"month","","Returns the month number starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",20,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",20,null],[10,"with_year","","Makes a new value with the year number changed.",20,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",21,null],[10,"minute","","Returns the minute number from 0 to 59.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",21,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"weeks","chrono::duration","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",22,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",22,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",22,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",22,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",22,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"neg","","",22,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"sub","","",22,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"Duration"]]};
searchIndex["either"] = {"doc":"The enum **Either**.","items":[[4,"Either","either","`Either` represents an alternative holding one value out of either of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard error.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger. It can be used to customize the log format, change the enviromental variable used to provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"loglevelfilter"}],"output":{"name":"self"}}],[11,"format","","Sets the format function for formatting the log output.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"parse","","Parses the directives string in the same form as the RUST_LOG environment variable.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"init","","Initializes the global logger with an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"build","","Build an env logger.",0,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"enabled","","",1,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["futures"] = {"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",0,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has *started*; you muse use `Sink::poll_complete` to drive the send to completion.",1,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"map","","Change the success type of this `Async` value with the closure provided",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"future","","Futures",null,null],[3,"Empty","futures::future","A future which is never resolved.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to succesfully complete. unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use Future::shared() method to convert any future into a `Shared` future.",null,null],[3,"SharedItem","","A wrapped item of the original future that is clonable and implements Deref for ease of use.",null,null],[3,"SharedError","","A wrapped error of the original future that is clonable and implements Deref for ease of use.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",2,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,null],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",3,null],[13,"B","","Second branch of the type",3,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",13,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",14,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",15,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",16,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",17,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",19,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",20,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",22,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",23,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",24,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",25,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",26,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",27,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Creates a new `Shared` from another future.",29,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[6,"BoxFuture","","A type alias for `Box<Future + Send>`",null,null],[8,"Future","","Trait for types which are a placeholder of a value that will become available at possible some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",32,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",32,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",32,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Block the current thread until this future is resolved.",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"boxed","","Convenience function for turning this future into a trait object which is also `Send`.",32,{"inputs":[{"name":"self"}],"output":{"name":"boxfuture"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",32,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",32,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",32,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",32,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",32,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",32,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",32,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",32,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",32,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",32,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",33,null],[16,"Item","","The item that the future may resolve with.",33,null],[16,"Error","","The error that the future may resolve with.",33,null],[10,"into_future","","Consumes this object and produces a future.",33,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",34,null],[16,"Error","","Possible errors during conversion.",34,null],[10,"future_from","","Consume the given value, beginning the conversion.",34,null],[0,"stream","futures","Asynchronous streams",null,null],[3,"IterStream","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a **blocking iterator**.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"FuturesUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",35,null],[13,"Second","","An item from the second stream",35,null],[13,"Both","","Items from both streams",35,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterstream"}}],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[11,"poll","","",36,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",37,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",38,null],[11,"poll_complete","","",38,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",38,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",39,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",40,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",41,null],[11,"poll_complete","","",41,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",41,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",42,null],[11,"poll_complete","","",42,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",42,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",43,null],[11,"poll_complete","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",43,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Recover original stream",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",48,null],[11,"poll_complete","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",49,null],[11,"poll_complete","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",49,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",55,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",58,null],[11,"poll_complete","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",65,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",66,null],[11,"poll_complete","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",66,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"next","","",68,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"poll","","",69,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",70,null],[11,"poll_complete","","",70,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",71,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"BoxStream","","A type alias for `Box<Stream + Send>`",null,null],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",72,null],[16,"Error","","The type of error this stream may generate.",72,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",72,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",72,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"boxed","","Convenience function for turning this stream into a trait object.",72,{"inputs":[{"name":"self"}],"output":{"name":"boxstream"}}],[11,"into_future","","Converts this stream into a `Future`.",72,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",72,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",72,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",72,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",72,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",72,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",72,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",72,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",72,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",72,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",72,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",72,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",72,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",72,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",72,null],[0,"sink","futures","Asynchronous sinks",null,null],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",null,null],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run *prior* to pushing a value into the underlying sink.",null,null],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",null,null],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",null,null],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",73,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"start_send","","",73,null],[11,"poll_complete","","",73,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",74,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",75,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",75,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",76,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Get a shared reference to the inner sink.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Get a mutable reference to the inner sink.",77,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",77,null],[11,"poll_complete","","",77,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[6,"BoxSink","","A type alias for `Box<Stream + Send>`",null,null],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",78,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",78,null],[10,"start_send","","Begin the process of sending a value to the sink.",78,null],[10,"poll_complete","","Make progress on all pending requests, and determine whether they have completed.",78,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"with","","Composes a function *in front of* the sink.",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",78,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",78,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",78,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",78,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[0,"task","futures","Tasks used to drive a future computation",null,null],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[5,"park","","Returns a handle to the current task to call `unpark` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",79,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"executor","futures","Executors",null,null],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[5,"spawn","","Spawns a new future, returning the fused future and task.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",80,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",81,{"inputs":[{"name":"self"},{"name":"run"}],"output":null}],[0,"sync","futures","Future-aware synchronization",null,null],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",null,null],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",null,null],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",null,null],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",null,null],[0,"oneshot","","A one-shot, futures-aware channel",null,null],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",null,null],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",null,null],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the correponding `Sender<T>` is dropped.",null,null],[5,"channel","","Creates a new futures-aware, one-shot channel.",null,null],[11,"complete","","Completes this oneshot with a successful result.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",82,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"canceled"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"canceled"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",84,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",84,{"inputs":[{"name":"self"}],"output":null}],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",null,null],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",null,null],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",null,null],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",null,null],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",86,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"send","","Sends the provided message along this channel.",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"start_send","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"startsend"}}],[11,"poll_complete","","",87,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unboundedsender"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"drop","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",88,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"drop","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"close","","Closes the receiving half",89,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","futures::sync","Creates a new `BiLock` protecting the provided data.",90,null],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",90,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",90,{"inputs":[{"name":"self"}],"output":{"name":"bilockacquire"}}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",93,{"inputs":[{"name":"self"}],"output":{"name":"bilock"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",93,{"inputs":[{"name":"self"}],"output":null}],[6,"Poll","futures","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",null,null],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",null,null],[14,"task_local","","A macro to create a `static` of type `LocalKey`",null,null],[11,"with","futures::task","Access this task-local key, running the provided closure with a reference to the value.",94,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"unpark","","Indicate that the task should attempt to poll its future in a timely fashion. This is typically done when alerting a future that an event of interest has occurred through `Task::unpark`.",95,{"inputs":[{"name":"self"}],"output":null}],[11,"is_current","","Returns `true` when called from within the context of the task. In other words, the task is currently running on the thread calling the function.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",96,{"inputs":[{"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future","","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",97,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",97,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",97,{"inputs":[{"name":"self"},{"name":"arc"}],"output":null}],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",97,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"poll"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",97,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",98,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Then"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[4,"MergedItem"],[3,"IterStream"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"Fuse"],[3,"StreamFuture"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[8,"Stream"],[3,"With"],[3,"Flush"],[3,"Send"],[3,"SendAll"],[3,"Buffer"],[8,"Sink"],[8,"EventSet"],[8,"Unpark"],[8,"Executor"],[3,"Sender"],[3,"Canceled"],[3,"Receiver"],[3,"SendError"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"LocalKey"],[3,"Task"],[3,"UnparkEvent"],[3,"Spawn"],[3,"Run"]]};
searchIndex["ieee754"] = {"doc":"Low-level manipulations of IEEE754 floating-point numbers.","items":[[3,"Iter","ieee754","An iterator over floating point numbers, created by `Ieee754::upto`.",null,null],[8,"Bits","","",null,null],[10,"as_u64","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"Ieee754","","Types that are IEEE754 floating point numbers.",null,null],[10,"upto","","Iterate over each value of `Self` in `[self, lim]`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"iter"}}],[16,"Bits","","A type that represents the raw bits of `Self`.",1,null],[16,"Exponent","","A type large enough to store the true exponent of `Self`.",1,null],[16,"RawExponent","","A type large enough to store the raw exponent (i.e. with the bias).",1,null],[16,"Significand","","A type large enough to store the significand of `Self`.",1,null],[10,"next","","Return the next value after `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ulp","","Return the unit-in-the-last-place ulp of `self`. That is, `x.abs().next() - x.abs()`, but handling overflow properly.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"prev","","Return the previous value before `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"bits","","View `self` as a collection of bits.",1,null],[10,"from_bits","","View a collections of bits as a floating point number.",1,null],[10,"exponent_bias","","Get the bias of the stored exponent.",1,null],[10,"decompose_raw","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose_raw","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,null],[10,"decompose","","Break `self` into the three constituent parts of an IEEE754 float.",1,null],[10,"recompose","","Create a `Self` out of the three constituent parts of an IEEE754 float.",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Bits"],[8,"Ieee754"],[3,"Iter"]]};
searchIndex["ifaces"] = {"doc":"","items":[[0,"interface","ifaces","",null,null],[3,"Interface","ifaces::interface","",null,null],[12,"name","","The name of this interface.",0,null],[12,"kind","","The kind of interface this is.",0,null],[12,"addr","","The address of this interface, if it has one.",0,null],[12,"mask","","The netmask of this interface, if it has one.",0,null],[12,"hop","","The broadcast address or destination address, if it has one.",0,null],[4,"Kind","","",null,null],[13,"Packet","","",1,null],[13,"Ipv4","","",1,null],[13,"Ipv6","","",1,null],[4,"NextHop","","",null,null],[13,"Broadcast","","",2,null],[13,"Destination","","",2,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"nexthop"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"nexthop"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_all","","Retrieve a list of interfaces on this system.",0,{"inputs":[],"output":{"name":"result"}}]],"paths":[[3,"Interface"],[4,"Kind"],[4,"NextHop"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[4,"Either","itertools","`Either` represents an alternative holding one value out of either of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[4,"Diff","","A type returned by the `diff_with` function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator's remaining elements starting with the first mis-match.",1,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",1,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",1,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for more detail.",null,null],[13,"NoElements","","Empty iterator",2,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",2,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",2,null],[4,"Position","","A value yielded by `WithPosition`. Indicates the position of this element in the iterator results.",null,null],[13,"First","","This is the first element.",3,null],[13,"Middle","","This is neither the first nor the last element.",3,null],[13,"Last","","This is the last element.",3,null],[13,"Only","","This is the only element.",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`. Contains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted, only yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted, only yielding a value from the parameter iterator.",4,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",5,null],[13,"Done","","Fold is complete and will return this value",5,null],[5,"cons_tuples","","Create an iterator that maps for example iterators of `((A, B), C)` to `(A, B, C)`.",null,{"inputs":[{"name":"i"}],"output":{"name":"constuples"}}],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and returns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"repeat_n","","Create an iterator that produces `n` repetitions of `element`.",null,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"repeatn"}}],[5,"repeat_call","","An iterator source that produces elements indefinitely by calling a given closure.",null,{"inputs":[{"name":"f"}],"output":{"name":"repeatcall"}}],[5,"unfold","","Creates a new unfold source with the specified closure as the \"iterator function\" and an initial state to eventually pass to the closure",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[5,"iterate","","Creates a new iterator that infinitely applies function to value and yields results.",null,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"iterate"}}],[5,"multizip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"put_back","","Create an iterator where you can put back a single item",null,{"inputs":[{"name":"i"}],"output":{"name":"putback"}}],[5,"put_back_n","","Create an iterator where you can put back multiple values to the front of the iteration.",null,{"inputs":[{"name":"i"}],"output":{"name":"putbackn"}}],[5,"multipeek","","An iterator adaptor that allows the user to peek at multiple `.next()` values without advancing the base iterator.",null,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"rciter","","Return an iterator inside a `Rc<RefCell<_>>` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[5,"enumerate","","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable's elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"equal","","Return `true` if both iterators produce equal sequences (elements pairwise equal and sequences of the same length), `false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same semantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements that map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[0,"structs","","The concrete iterator types.",null,null],[3,"Dedup","itertools::structs","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both run out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until one of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of the element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single item to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple items in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator for each iteration.",null,null],[3,"MapResults","","An iterator adapter to apply a transformation within a nested `Result`.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order. If both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","See `multipeek()` for more information.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"TupleCombinations","","An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples of a specific size.",null,null],[3,"Combinations","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"ConsTuples","","An iterator that maps an iterator of tuples like `((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatWith","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"IntoChunks","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupBy","","`GroupBy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order. If all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling missing elements using a closure.",null,null],[3,"PeekingTakeWhile","","An iterator adaptor that takes items while a closure returns `true`.",null,null],[3,"RcIter","","A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",6,null],[3,"RepeatN","","An iterator that produces *n* repetitions of an element.",null,null],[3,"RepeatCall","","See `repeat_call` for more information.",null,null],[3,"Unfold","","See `unfold` for more information.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",7,null],[3,"Iterate","","An iterator that infinitely applies function to value and yields results.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"TupleBuffer","","An iterator over a incomplete tuple.",null,null],[3,"TupleWindows","","An iterator over all contiguous windows that produces tuples of a specific size.",null,null],[3,"Tuples","","An iterator that groups the items in tuples of a specific size.",null,null],[3,"WithPosition","","An iterator adaptor that wraps each element in an `Position`.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","See `multizip` for more information.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"multipeek"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reset_peek","","Reset the peeking “cursor”",8,{"inputs":[{"name":"self"}],"output":null}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn't advance itself. `.peek()` can be called multiple times, to peek further ahead.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"interleave"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"interleaveshortest"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"putback"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_value","","put back value `value` (builder method)",11,null],[11,"into_parts","","Split the `PutBack` into its parts.",11,null],[11,"put_back","","Put back a single value to the front of the iterator.",11,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"all","","",11,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"bool"}}],[11,"fold","","",11,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"putbackn"}}],[11,"put_back","","Puts x in front of the iterator. The values are yielded in order of the most recently put back values first.",12,null],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"batching"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"step"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",18,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"fold","","",19,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"uniqueby"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fold","","",26,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"next_back","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"intersperse"}}],[11,"next","","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"next","","",36,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",36,null],[11,"clone","itertools","",2,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"minmaxresult"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option` has variant `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`. If the `MinMaxResult` has variant `OneElement(x)`, performing this operation will make one clone of `x`.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools::structs","",37,{"inputs":[{"name":"self"}],"output":{"name":"padusing"}}],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peeking_next","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"peeking_next","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"next","","",38,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rciter"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","",39,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unfold"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"iterate"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",41,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"next","","",42,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next","","",44,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_buffer","","Return a buffer with the produced items that was not enough to be grouped in a tuple.",44,{"inputs":[{"name":"self"}],"output":{"name":"tuplebuffer"}}],[11,"next","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",3,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"into_inner","","Return the inner value.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"next","itertools::structs","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"zipeq"}}],[11,"next","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ziplongest"}}],[11,"next","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","itertools","",4,{"inputs":[{"name":"self"}],"output":{"name":"eitherorboth"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"eitherorboth"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","itertools::structs","",49,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"new","","Deprecated: renamed to multizip",49,{"inputs":[{"name":"u"}],"output":{"name":"zip"}}],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"from","","",49,null],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[8,"PeekingNext","itertools","An iterator that allows peeking at an element before deciding to accept it.",null,null],[10,"peeking_next","","Pass a reference to the next iterator element to the closure `accept`; if `accept` returns true, return it as the next element, else None.",50,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both run out.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"intersperse","","An iterator adaptor to insert a particular value between each element of the adapted iterator.",51,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of two optional elements.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"ziplongest"}}],[11,"zip_eq","","Create an iterator which iterates over both this and the specified iterator simultaneously, yielding pairs of elements.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"zipeq"}}],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator and may pick off as many elements as it likes, to produce the next iterator element.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"batching"}}],[11,"group_by","","Return an *iterable* that can group iterator elements. Consecutive elements that map to the same key (“runs”), are assigned to the same group.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"group_by_lazy","","",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"groupby"}}],[11,"chunks","","Return an *iterable* that can chunk the iterator.",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"chunks_lazy","","",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"intochunks"}}],[11,"tuple_windows","","Return an iterator over all contiguous windows producing tuples of a specific size (up to 4).",51,{"inputs":[{"name":"self"}],"output":{"name":"tuplewindows"}}],[11,"tuples","","Return an iterator that groups the items in tuples of a specific size (up to 4).",51,{"inputs":[{"name":"self"}],"output":{"name":"tuples"}}],[11,"tee","","Split into an iterator pair that both yield all elements from the original iterator.",51,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator for each iteration.",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"step"}}],[11,"map_results","","Return an iterator adaptor that applies the provided closure to every `Result::Ok` value. `Result::Err` values are unchanged.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"mapresults"}}],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.  If both base iterators are sorted (ascending), the result is sorted.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"merge"}}],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order. This is much like `.merge()` but allows for a custom ordering.",51,{"inputs":[{"name":"self"},{"name":"j"},{"name":"f"}],"output":{"name":"mergeby"}}],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by merging them in ascending order.",51,{"inputs":[{"name":"self"}],"output":{"name":"kmerge"}}],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of the element sets of two iterators `self` and `J`.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"product"}}],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to optionally merge together consecutive elements.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"coalesce"}}],[11,"dedup","","Remove duplicates from sections of consecutive identical elements. If the iterator is sorted, all elements will be unique.",51,{"inputs":[{"name":"self"}],"output":{"name":"dedup"}}],[11,"unique","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration. Duplicates are detected using hash and equality.",51,{"inputs":[{"name":"self"}],"output":{"name":"unique"}}],[11,"unique_by","","Return an iterator adaptor that filters out elements that have already been produced once during the iteration.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"peeking_take_while","","Return an iterator adaptor that borrows from this iterator and takes items while the closure `accept` returns `true`.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"peekingtakewhile"}}],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator to only pick off elements while the predicate `accept` returns `true`.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"takewhileref"}}],[11,"while_some","","Return an iterator adaptor that filters `Option<A>` iterator elements and produces `A`. Stops on the first `None` encountered.",51,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"tuple_combinations","","Return an iterator adaptor that iterates over the combinations of the elements from an iterator.",51,{"inputs":[{"name":"self"}],"output":{"name":"tuplecombinations"}}],[11,"combinations","","Return an iterator adaptor that iterates over the `n`-length combinations of the elements from an iterator.",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"combinations"}}],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of `min` by filling missing elements using a closure `f`.",51,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"flatten","","Unravel a nested iterator.",51,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"with_position","","Return an iterator adaptor that wraps each element in a `Position` to ease special-case handling of the first or last elements.",51,{"inputs":[{"name":"self"}],"output":{"name":"withposition"}}],[11,"next_tuple","","Advances the iterator and returns the next items grouped in a tuple of a specific size (up to 4).",51,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",51,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"dropping","","Consume the first `n` elements from the iterator eagerly, and return the same iterator again.",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly, and return the same iterator again.",51,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`, for convenience.",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"set_from","","Assign to each reference in `self` from the `from` iterator, stopping at the shortest of the two iterators.",51,{"inputs":[{"name":"self"},{"name":"j"}],"output":{"name":"usize"}}],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",51,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"format","","Format all iterator elements, separated by `sep`.",51,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_default","","",51,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"format"}}],[11,"format_with","","Format all iterator elements, separated by `sep`.",51,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"formatwith"}}],[11,"fold_results","","Fold `Result` values from an iterator.",51,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"result"}}],[11,"fold_options","","Fold `Option` values from an iterator.",51,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold1","","Accumulator of the elements in the iterator.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"fold_while","","An iterator method that applies a function, producing a single, final value.",51,{"inputs":[{"name":"self"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"vec"}}],[11,"partition_map","","Collect all iterator elements into one of two partitions. Unlike `Iterator::partition`, each partition may have a distinct type.",51,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",51,{"inputs":[{"name":"self"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by the specified function.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by the specified comparison function.",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"minmaxresult"}}],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"deref","","",0,null],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"either"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"extend","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}]],"paths":[[4,"Either"],[4,"Diff"],[4,"MinMaxResult"],[4,"Position"],[4,"EitherOrBoth"],[4,"FoldWhile"],[3,"RcIter"],[3,"Unfold"],[3,"MultiPeek"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"Coalesce"],[3,"Dedup"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"TupleCombinations"],[3,"Combinations"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"MapResults"],[3,"ConsTuples"],[3,"Format"],[3,"FormatWith"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"KMerge"],[3,"PadUsing"],[3,"PeekingTakeWhile"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Iterate"],[3,"Tee"],[3,"TupleBuffer"],[3,"Tuples"],[3,"TupleWindows"],[3,"WithPosition"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[8,"PeekingNext"],[8,"Itertools"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["kudu"] = {"doc":"","items":[[3,"Client","kudu","A Kudu database client.",null,null],[3,"ClientConfig","","Client configuration options.",null,null],[3,"RpcError","","",null,null],[3,"Status","","",null,null],[3,"TabletServerError","","",null,null],[3,"MasterError","","",null,null],[3,"Master","","Master metadata.",null,null],[3,"RangePartitionSchema","","",null,null],[3,"HashPartitionSchema","","",null,null],[3,"PartitionSchema","","",null,null],[3,"Partition","","",null,null],[3,"Row","","",null,null],[3,"Column","","`Column` instances hold metadata information about columns in a Kudu table.",null,null],[3,"Schema","","",null,null],[3,"SchemaBuilder","","",null,null],[3,"Table","","",null,null],[3,"TableBuilder","","",null,null],[3,"AlterTableBuilder","","",null,null],[3,"Tablet","","",null,null],[3,"Replica","","Tablet replica belonging to a tablet server.",null,null],[3,"TabletServer","","Tablet server metadata.",null,null],[3,"WriterConfig","","",null,null],[3,"Writer","","",null,null],[3,"FlushStats","","Carries information about the batches and row operations in a flush.",null,null],[3,"MasterId","","",null,null],[3,"ReplicaId","","",null,null],[3,"TableId","","",null,null],[3,"TabletId","","",null,null],[3,"TabletServerId","","",null,null],[4,"Error","","",null,null],[13,"InvalidArgument","","The operation failed because of an invalid argument.",0,null],[13,"Rpc","","A Kudu RPC error.",0,null],[13,"Master","","A Kudu Master error.",0,null],[13,"TabletServer","","A Kudu tablet server error.",0,null],[13,"Io","","An I/O error.",0,null],[13,"Serialization","","An error serializing, deserializing, encoding, or decoding data.",0,null],[13,"VersionMismatch","","An error due to a version mismatch between the client and server.",0,null],[13,"Backoff","","The send queue is full.",0,null],[13,"TimedOut","","The operation timed out. Includes zero or more errors which resulted in retries.",0,null],[13,"Cancelled","","The operation was cancelled.",0,null],[13,"ConnectionError","","The connection encountered an error or hangup.",0,null],[13,"NegotiationError","","",0,null],[13,"NoRangePartition","","An operation failed because the range partition did not exist.",0,null],[4,"RpcErrorCode","","",null,null],[13,"ApplicationError","","The application generated an error status. See the message field for more details.",1,null],[13,"NoSuchMethod","","The specified method was not valid.",1,null],[13,"NoSuchService","","The specified service was not valid.",1,null],[13,"ServerTooBusy","","The server is overloaded - the client should try again shortly.",1,null],[13,"InvalidRequest","","The request parameter was not parseable, was missing required fields, or the server does not support the required feature flags.",1,null],[13,"StaleRequest","","The server might have previously received this request but its response is no longer cached. It's unknown whether the request was executed or not.",1,null],[13,"FatalUnknown","","",1,null],[13,"FatalServerShuttingDown","","The RPC server is already shutting down.",1,null],[13,"FatalInvalidRpcHeader","","Fields of RpcHeader are invalid.",1,null],[13,"FatalDeserializingRequest","","Could not deserialize RPC request.",1,null],[13,"FatalVersionMismatch","","IPC Layer version mismatch.",1,null],[13,"FatalUnauthorized","","Auth failed.",1,null],[4,"StatusCode","","",null,null],[13,"UnknownError","","",2,null],[13,"NotFound","","",2,null],[13,"Corruption","","",2,null],[13,"NotSupported","","",2,null],[13,"InvalidArgument","","",2,null],[13,"IoError","","",2,null],[13,"AlreadyPresent","","",2,null],[13,"RuntimeError","","",2,null],[13,"NetworkError","","",2,null],[13,"IllegalState","","",2,null],[13,"NotAuthorized","","",2,null],[13,"Aborted","","",2,null],[13,"RemoteError","","",2,null],[13,"ServiceUnavailable","","",2,null],[13,"TimedOut","","",2,null],[13,"Uninitialized","","",2,null],[13,"ConfigurationError","","",2,null],[13,"Incomplete","","",2,null],[13,"EndOfFile","","",2,null],[4,"TabletServerErrorCode","","",null,null],[13,"UnknownError","","An error which has no more specific error code. The code and message in 'status' may reveal more details.",3,null],[13,"InvalidSchema","","The schema provided for a request was not well-formed.",3,null],[13,"InvalidRowBlock","","The row data provided for a request was not well-formed.",3,null],[13,"InvalidMutation","","The mutations or mutation keys provided for a request were not well formed.",3,null],[13,"MismatchedSchema","","The schema provided for a request didn't match the actual schema of the tablet.",3,null],[13,"TabletNotFound","","The requested tablet ID is not currently hosted on the server.",3,null],[13,"ScannerExpired","","A request was made against a scanner ID that was either never created or has expired.",3,null],[13,"InvalidScanSpec","","An invalid scan was specified -- e.g the values passed for predicates were incorrect sizes.",3,null],[13,"InvalidConfig","","The provided configuration was not well-formed and/or had a sequence number that was below the current config.",3,null],[13,"TabletAlreadyExists","","On a create tablet request, signals that the tablet already exists.",3,null],[13,"TabletHasANewerSchema","","If the tablet has a newer schema than the requested one the \"alter\" request will be rejected with this error.",3,null],[13,"TabletNotRunning","","The tablet is hosted on this server, but not in `RUNNING` state.",3,null],[13,"InvalidSnapshot","","Client requested a snapshot read but the snapshot was invalid.",3,null],[13,"InvalidScanCallSeqId","","An invalid scan call sequence ID was specified.",3,null],[13,"NotTheLeader","","This tserver is not the leader of the consensus configuration.",3,null],[13,"WrongServerUuid","","The destination UUID in the request does not match this server.",3,null],[13,"CasFailed","","The compare-and-swap specified by an atomic RPC operation failed.",3,null],[13,"AlreadyInProgress","","The requested operation is already inprogress, e.g. RemoteBootstrap.",3,null],[13,"Throttled","","The request is throttled.",3,null],[4,"MasterErrorCode","","",null,null],[13,"UnknownError","","An error which has no more specific error code. The `Status` code and message may reveal more details.",4,null],[13,"InvalidSchema","","The schema provided for a request was not well-formed.",4,null],[13,"TableNotFound","","The requested table does not exist",4,null],[13,"TableAlreadyPresent","","The name requested for the table is already in use",4,null],[13,"TooManyTablets","","The number of tablets requested for a new table is over the per TS limit.",4,null],[13,"CatalogManagerNotInitialized","","Catalog manager is not yet initialized.",4,null],[13,"NotTheLeader","","The operation attempted can only be invoked against either the leader or a single non-distributed master, which this node isn't.",4,null],[13,"InvalidReplicationFactor","","The replication factor is invalid, either because it is too low, too high, or an even number.",4,null],[13,"TabletNotRunning","","A tablet involved in the operation is not running.",4,null],[4,"RangePartitionBound","","",null,null],[13,"Inclusive","","",5,null],[13,"Exclusive","","",5,null],[4,"Event","","",null,null],[13,"Flush","","",6,null],[13,"SuccessfulOperation","","",6,null],[13,"FailedOperation","","",6,null],[4,"EventSet","","The events that the writer should return in the event channel. Each event set builds on the previous.",null,null],[13,"Flushes","","Flush events.",7,null],[13,"FailedOperations","","Flush events and failed operation events.",7,null],[13,"SuccessfulOperations","","Flush events, failed operation events, and successful operation events.",7,null],[4,"OperationType","","",null,null],[13,"Insert","","",8,null],[13,"Update","","",8,null],[13,"Upsert","","",8,null],[13,"Delete","","",8,null],[4,"DataType","","",null,null],[13,"Bool","","",9,null],[13,"Int8","","",9,null],[13,"Int16","","",9,null],[13,"Int32","","",9,null],[13,"Int64","","",9,null],[13,"Timestamp","","",9,null],[13,"Float","","",9,null],[13,"Double","","",9,null],[13,"Binary","","",9,null],[13,"String","","",9,null],[4,"EncodingType","","",null,null],[13,"Auto","","",10,null],[13,"Plain","","",10,null],[13,"Prefix","","",10,null],[13,"GroupVarint","","",10,null],[13,"RunLength","","",10,null],[13,"Dictionary","","",10,null],[13,"BitShuffle","","",10,null],[4,"CompressionType","","",null,null],[13,"Default","","",11,null],[13,"None","","",11,null],[13,"Snappy","","",11,null],[13,"Lz4","","",11,null],[13,"Zlib","","",11,null],[4,"RaftRole","","The role of a Kudu master or tserver in a consensus group.",null,null],[13,"Follower","","",12,null],[13,"Leader","","",12,null],[13,"Learner","","",12,null],[13,"NonParticipant","","",12,null],[13,"Unknown","","",12,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"new","","Creates a new client with the provided configuration.",13,{"inputs":[{"name":"clientconfig"}],"output":{"name":"client"}}],[11,"create_table","","Creates a new Kudu table with the schema and options specified by `builder`. Returns the new table's ID, or an error on failure.",13,{"inputs":[{"name":"self"},{"name":"tablebuilder"},{"name":"instant"}],"output":{"name":"result"}}],[11,"is_create_table_done","","Returns `true` if the table is fully created.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"is_create_table_done_by_id","","Returns `true` if the table is fully created.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"wait_for_table_creation","","Synchronously waits until the table is created. If an error is returned, the table may not be created yet.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"wait_for_table_creation_by_id","","Synchronously waits until the table is created. If an error is returned, the table may not be created yet.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"delete_table","","Deletes the table.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"delete_table_by_id","","Deletes the table.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"alter_table","","",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"altertablebuilder"},{"name":"instant"}],"output":{"name":"result"}}],[11,"alter_table_by_id","","",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"altertablebuilder"},{"name":"instant"}],"output":{"name":"result"}}],[11,"is_alter_table_done","","Returns `true` if the table is fully altered.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"is_alter_table_done_by_id","","Returns `true` if the table is fully altered.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"wait_for_table_alteration","","Synchronously waits until the table is altered. If an error is returned, the table may not be altered yet.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"wait_for_table_alteration_by_id","","Synchronously waits until the table is altered. If an error is returned, the table may not be altered yet.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"list_tables","","Lists all tables and their associated table ID.",13,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"result"}}],[11,"list_tables_with_prefix","","Lists all tables with the a name matching the provided prefix, and their associated table ID.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"list_masters","","",13,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"result"}}],[11,"list_tablet_servers","","",13,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"result"}}],[11,"open_table","","Returns an open table.",13,{"inputs":[{"name":"self"},{"name":"s"},{"name":"instant"}],"output":{"name":"result"}}],[11,"open_table_by_id","","Returns an open table.",13,{"inputs":[{"name":"self"},{"name":"tableid"},{"name":"instant"}],"output":{"name":"result"}}],[11,"latest_observed_timestamp","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"timestamp_observed","","",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"clientconfig"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"clientconfig"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"clientconfig"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"new","","",14,{"inputs":[{"name":"vec"}],"output":{"name":"clientconfig"}}],[11,"master_addresses","","",14,null],[11,"set_master_addresses","","",14,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"clientconfig"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"clientconfig"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_network_error","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"rpcerror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"mastererror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"tabletservererror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"protobuferror"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rpcerrorcode"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"rpcerrorcode"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"rpcerror"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"rpcerror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"rpcerror"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"invalid_rpc_header","","",15,{"inputs":[{"name":"string"}],"output":{"name":"rpcerror"}}],[11,"is_fatal","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,{"inputs":[{"name":"rpcerrorpb"}],"output":{"name":"rpcerror"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"from","","",2,{"inputs":[{"name":"statuscodepb"}],"output":{"name":"statuscode"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"status"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"code","","",16,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"message","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"posix_code","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"statuspb"}],"output":{"name":"status"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorcode"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"tabletservererrorcode"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"from","","",3,{"inputs":[{"name":"tabletservererrorcodepb"}],"output":{"name":"tabletservererrorcode"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererror"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"tabletservererror"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"tabletservererror"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"description","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",17,{"inputs":[{"name":"tabletservererrorpb"}],"output":{"name":"tabletservererror"}}],[11,"from","","",17,{"inputs":[{"name":"statuspb"}],"output":{"name":"tabletservererror"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorcode"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"mastererrorcode"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"from","","",4,{"inputs":[{"name":"mastererrorcodepb"}],"output":{"name":"mastererrorcode"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mastererror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"mastererror"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"mastererror"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"new","","",18,{"inputs":[{"name":"mastererrorcode"},{"name":"status"}],"output":{"name":"mastererror"}}],[11,"code","","",18,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorcode"}}],[11,"status","","",18,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",18,{"inputs":[{"name":"mastererrorpb"}],"output":{"name":"mastererror"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"master"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"master"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"master"}],"output":{"name":"bool"}}],[11,"id","","",19,{"inputs":[{"name":"self"}],"output":{"name":"masterid"}}],[11,"rpc_addrs","","",19,null],[11,"http_addrs","","",19,null],[11,"seqno","","",19,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"role","","",19,{"inputs":[{"name":"self"}],"output":{"name":"raftrole"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"rangepartitionschema"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"rangepartitionschema"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"rangepartitionschema"}],"output":{"name":"bool"}}],[11,"columns","","",20,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"hashpartitionschema"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"hashpartitionschema"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"hashpartitionschema"}],"output":{"name":"bool"}}],[11,"columns","","",21,null],[11,"num_buckets","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"seed","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"partitionschema"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"partitionschema"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"partitionschema"}],"output":{"name":"bool"}}],[11,"range_partition_schema","","",22,{"inputs":[{"name":"self"}],"output":{"name":"rangepartitionschema"}}],[11,"hash_partition_schemas","","",22,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"partition"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"partition"}],"output":{"name":"bool"}}],[11,"lower_bound_key","","",23,null],[11,"upper_bound_key","","",23,null],[11,"range_lower_bound","","",23,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"range_upper_bound","","",23,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"hash_partitions","","",23,null],[11,"fmt_range_partition","","Formats the range partition.",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"new","","",24,{"inputs":[{"name":"schema"}],"output":{"name":"row"}}],[11,"set","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"set_by_name","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"set_null","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_null_by_name","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_unchecked","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"row"}}],[11,"get","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get_by_name","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_null","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"is_null_by_name","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_set","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"is_set_by_name","","",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"schema","","",24,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"option"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"bool"}}],[11,"name","","",25,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"data_type","","",25,{"inputs":[{"name":"self"}],"output":{"name":"datatype"}}],[11,"is_nullable","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"encoding","","",25,{"inputs":[{"name":"self"}],"output":{"name":"encodingtype"}}],[11,"compression","","",25,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[11,"block_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"builder","","Returns a new column builder.",25,{"inputs":[{"name":"s"},{"name":"datatype"}],"output":{"name":"column"}}],[11,"set_nullable","","",25,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"set_nullable_by_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"set_not_null","","",25,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"set_not_null_by_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"column"}}],[11,"set_encoding","","",25,{"inputs":[{"name":"self"},{"name":"encodingtype"}],"output":{"name":"column"}}],[11,"set_encoding_by_ref","","",25,{"inputs":[{"name":"self"},{"name":"encodingtype"}],"output":{"name":"column"}}],[11,"set_compression","","",25,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"column"}}],[11,"set_compression_by_ref","","",25,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"column"}}],[11,"set_block_size","","",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"column"}}],[11,"set_block_size_by_ref","","",25,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"column"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"columns","","",26,null],[11,"column","","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"column_by_name","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"column_index","","",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"primary_key","","",26,null],[11,"primary_key_projection","","",26,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"row_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_nullable_columns","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"column_offsets","","",26,null],[11,"new_row","","",26,{"inputs":[{"name":"self"}],"output":{"name":"row"}}],[11,"ref_eq","","",26,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"schema"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"schemabuilder"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"schemabuilder"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"schemabuilder"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"schemabuilder"}],"output":{"name":"bool"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"schemabuilder"}}],[11,"add_column","","",27,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"schemabuilder"}}],[11,"add_column_by_ref","","",27,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"schemabuilder"}}],[11,"set_primary_key","","",27,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"schemabuilder"}}],[11,"set_primary_key_by_ref","","",27,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"schemabuilder"}}],[11,"build","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"table"}}],[11,"name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"id","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tableid"}}],[11,"schema","","",28,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"partition_schema","","",28,{"inputs":[{"name":"self"}],"output":{"name":"partitionschema"}}],[11,"num_replicas","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new_writer","","",28,{"inputs":[{"name":"self"},{"name":"writerconfig"}],"output":{"name":"writer"}}],[11,"list_tablets","","",28,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rangepartitionbound"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"}],"output":{"name":"bool"}}],[11,"new","","Creates a new table builder with the provided table name and schema.",29,{"inputs":[{"name":"s"},{"name":"schema"}],"output":{"name":"tablebuilder"}}],[11,"schema","","",29,{"inputs":[{"name":"self"}],"output":{"name":"schema"}}],[11,"add_hash_partitions","","Hash partitions the table by the specfied columns.",29,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"u32"}],"output":{"name":"tablebuilder"}}],[11,"add_hash_partition_with_seed","","",29,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"u32"},{"name":"u32"}],"output":{"name":"tablebuilder"}}],[11,"set_range_partition_columns","","Range partitions the table by the specified columns.",29,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"tablebuilder"}}],[11,"add_range_partition","","Adds a range partition to the table with the specified bounds.",29,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"},{"name":"rangepartitionbound"}],"output":{"name":"tablebuilder"}}],[11,"add_range_partition_split","","",29,{"inputs":[{"name":"self"},{"name":"row"}],"output":{"name":"tablebuilder"}}],[11,"set_num_replicas","","",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"new","","",30,{"inputs":[],"output":{"name":"altertablebuilder"}}],[11,"rename_table","","",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"altertablebuilder"}}],[11,"rename_table_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"altertablebuilder"}}],[11,"add_column","","",30,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"altertablebuilder"}}],[11,"add_column_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"column"}],"output":{"name":"altertablebuilder"}}],[11,"drop_column","","",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"altertablebuilder"}}],[11,"drop_column_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"altertablebuilder"}}],[11,"rename_column","","",30,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":{"name":"altertablebuilder"}}],[11,"rename_column_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":{"name":"altertablebuilder"}}],[11,"add_range_partition","","",30,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"},{"name":"rangepartitionbound"}],"output":{"name":"altertablebuilder"}}],[11,"add_range_partition_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"},{"name":"rangepartitionbound"}],"output":{"name":"altertablebuilder"}}],[11,"drop_range_partition","","",30,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"},{"name":"rangepartitionbound"}],"output":{"name":"altertablebuilder"}}],[11,"drop_range_partition_by_ref","","",30,{"inputs":[{"name":"self"},{"name":"rangepartitionbound"},{"name":"rangepartitionbound"}],"output":{"name":"altertablebuilder"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"tablet"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"tablet"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"tablet"}],"output":{"name":"bool"}}],[11,"id","","",31,{"inputs":[{"name":"self"}],"output":{"name":"tabletid"}}],[11,"partition","","",31,{"inputs":[{"name":"self"}],"output":{"name":"partition"}}],[11,"replicas","","",31,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"replica"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"replica"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"replica"}],"output":{"name":"bool"}}],[11,"id","","Returns the ID of the tablet server which owns this replica.",32,{"inputs":[{"name":"self"}],"output":{"name":"tabletserverid"}}],[11,"rpc_addrs","","Returns the RPC addresses of the tablet server which owns this replica.",32,null],[11,"role","","The Raft role of this replica.",32,{"inputs":[{"name":"self"}],"output":{"name":"raftrole"}}],[11,"resolved_rpc_addrs","","The resolved RPC addresses.",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"tabletserver"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"tabletserver"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"tabletserver"}],"output":{"name":"bool"}}],[11,"id","","",33,{"inputs":[{"name":"self"}],"output":{"name":"tabletserverid"}}],[11,"rpc_addrs","","",33,null],[11,"http_addrs","","",33,null],[11,"software_version","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"seqno","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"duration_since_heartbeat","","",33,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"writerconfig"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"writerconfig"}}],[11,"event_channel","","",34,{"inputs":[{"name":"self"}],"output":{"name":"receiver"}}],[11,"event_channel_with_capacity","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"receiver"}}],[11,"with_event_channel","","",34,{"inputs":[{"name":"self"},{"name":"syncsender"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_successful_operation","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_failed_operation","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventset"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"eventset"}],"output":{"name":"bool"}}],[11,"has_failed_operations","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_successful_operation","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"writer"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"operationtype"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"operationtype"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"flushstats"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"flushstats"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"flushstats"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"flushstats"}],"output":{"name":"bool"}}],[11,"epoch","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"successful_batches","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"failed_batches","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"successful_operations","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"failed_operations","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"data","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","",35,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"update","","",35,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"upsert","","",35,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"delete","","",35,{"inputs":[{"name":"self"},{"name":"row"}],"output":null}],[11,"apply","","",35,{"inputs":[{"name":"self"},{"name":"row"},{"name":"operationtype"}],"output":null}],[11,"flush","","Flush the `Writer`. The provided callback is called with statistics about the flush when it compeletes.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[6,"Result","","",null,null],[8,"Value","","Marker trait for types which can be stored in a Kudu column.",null,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"datatype"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"datatype"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"encodingtype"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"encodingtype"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"raftrole"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"raftrole"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"masterid"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"masterid"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"masterid"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"as_bytes","","",37,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"replicaid"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"replicaid"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"replicaid"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"as_bytes","","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"tableid"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"tableid"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"tableid"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"as_bytes","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"tabletid"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"tabletid"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"tabletid"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"as_bytes","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"tabletserverid"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"tabletserverid"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"tabletserverid"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"as_bytes","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[4,"RpcErrorCode"],[4,"StatusCode"],[4,"TabletServerErrorCode"],[4,"MasterErrorCode"],[4,"RangePartitionBound"],[4,"Event"],[4,"EventSet"],[4,"OperationType"],[4,"DataType"],[4,"EncodingType"],[4,"CompressionType"],[4,"RaftRole"],[3,"Client"],[3,"ClientConfig"],[3,"RpcError"],[3,"Status"],[3,"TabletServerError"],[3,"MasterError"],[3,"Master"],[3,"RangePartitionSchema"],[3,"HashPartitionSchema"],[3,"PartitionSchema"],[3,"Partition"],[3,"Row"],[3,"Column"],[3,"Schema"],[3,"SchemaBuilder"],[3,"Table"],[3,"TableBuilder"],[3,"AlterTableBuilder"],[3,"Tablet"],[3,"Replica"],[3,"TabletServer"],[3,"WriterConfig"],[3,"Writer"],[3,"FlushStats"],[3,"MasterId"],[3,"ReplicaId"],[3,"TableId"],[3,"TabletId"],[3,"TabletServerId"]]};
searchIndex["kudu_pb"] = {"doc":"","items":[[0,"client","kudu_pb","",null,null],[3,"ScanTokenPB","kudu_pb::client","",null,null],[4,"ScanTokenPB_Feature","","",null,null],[13,"Unknown","","",0,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"scantokenpb"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"scantokenpb"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scantokenpb"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"scantokenpb"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"scantokenpb"}}],[11,"default_instance","","",1,{"inputs":[],"output":{"name":"scantokenpb"}}],[11,"clear_feature_flags","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_feature_flags","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_feature_flags","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_feature_flags","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_feature_flags","","",1,null],[11,"clear_table_name","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_name","","",1,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_table_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_table_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_table_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_projected_columns","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_projected_columns","","",1,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_projected_columns","","",1,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_projected_columns","","",1,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_projected_columns","","",1,null],[11,"clear_column_predicates","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_predicates","","",1,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_column_predicates","","",1,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_column_predicates","","",1,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_column_predicates","","",1,null],[11,"clear_lower_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lower_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lower_bound_primary_key","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_lower_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_lower_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_lower_bound_primary_key","","",1,null],[11,"clear_upper_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_upper_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_upper_bound_primary_key","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_upper_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_upper_bound_primary_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_upper_bound_primary_key","","",1,null],[11,"clear_lower_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lower_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lower_bound_partition_key","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_lower_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_lower_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_lower_bound_partition_key","","",1,null],[11,"clear_upper_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_upper_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_upper_bound_partition_key","","",1,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_upper_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_upper_bound_partition_key","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_upper_bound_partition_key","","",1,null],[11,"clear_limit","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_limit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_limit","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_limit","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_read_mode","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_read_mode","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_mode","","",1,{"inputs":[{"name":"self"},{"name":"readmode"}],"output":null}],[11,"get_read_mode","","",1,{"inputs":[{"name":"self"}],"output":{"name":"readmode"}}],[11,"clear_snap_timestamp","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_snap_timestamp","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_snap_timestamp","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_snap_timestamp","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_propagated_timestamp","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_propagated_timestamp","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_propagated_timestamp","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_propagated_timestamp","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_cache_blocks","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cache_blocks","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cache_blocks","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cache_blocks","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_fault_tolerant","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"has_fault_tolerant","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_fault_tolerant","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_fault_tolerant","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",1,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",1,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",1,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",1,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",1,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",1,{"inputs":[],"output":{"name":"scantokenpb"}}],[11,"descriptor_static","","",1,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"scantokenpb_feature"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"scantokenpb_feature"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"value","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",0,null],[11,"enum_descriptor_static","","",0,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"common","kudu_pb","",null,null],[3,"ColumnSchemaPB","kudu_pb::common","",null,null],[3,"SchemaPB","","",null,null],[3,"HostPortPB","","",null,null],[3,"PartitionSchemaPB","","",null,null],[3,"PartitionSchemaPB_ColumnIdentifierPB","","",null,null],[3,"PartitionSchemaPB_RangeSchemaPB","","",null,null],[3,"PartitionSchemaPB_HashBucketSchemaPB","","",null,null],[3,"PartitionPB","","",null,null],[3,"ColumnPredicatePB","","",null,null],[3,"ColumnPredicatePB_Range","","",null,null],[3,"ColumnPredicatePB_Equality","","",null,null],[3,"ColumnPredicatePB_InList","","",null,null],[3,"ColumnPredicatePB_IsNotNull","","",null,null],[4,"PartitionSchemaPB_ColumnIdentifierPB_oneof_identifier","","",null,null],[13,"id","","",2,null],[13,"name","","",2,null],[4,"PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm","","",null,null],[13,"UNKNOWN","","",3,null],[13,"MURMUR_HASH_2","","",3,null],[4,"ColumnPredicatePB_oneof_predicate","","",null,null],[13,"range","","",4,null],[13,"equality","","",4,null],[13,"is_not_null","","",4,null],[13,"in_list","","",4,null],[4,"DataType","","",null,null],[13,"UNKNOWN_DATA","","",5,null],[13,"UINT8","","",5,null],[13,"INT8","","",5,null],[13,"UINT16","","",5,null],[13,"INT16","","",5,null],[13,"UINT32","","",5,null],[13,"INT32","","",5,null],[13,"UINT64","","",5,null],[13,"INT64","","",5,null],[13,"STRING","","",5,null],[13,"BOOL","","",5,null],[13,"FLOAT","","",5,null],[13,"DOUBLE","","",5,null],[13,"BINARY","","",5,null],[13,"UNIXTIME_MICROS","","",5,null],[4,"EncodingType","","",null,null],[13,"UNKNOWN_ENCODING","","",6,null],[13,"AUTO_ENCODING","","",6,null],[13,"PLAIN_ENCODING","","",6,null],[13,"PREFIX_ENCODING","","",6,null],[13,"GROUP_VARINT","","",6,null],[13,"RLE","","",6,null],[13,"DICT_ENCODING","","",6,null],[13,"BIT_SHUFFLE","","",6,null],[4,"CompressionType","","",null,null],[13,"UNKNOWN_COMPRESSION","","",7,null],[13,"DEFAULT_COMPRESSION","","",7,null],[13,"NO_COMPRESSION","","",7,null],[13,"SNAPPY","","",7,null],[13,"LZ4","","",7,null],[13,"ZLIB","","",7,null],[4,"ExternalConsistencyMode","","",null,null],[13,"UNKNOWN_EXTERNAL_CONSISTENCY_MODE","","",8,null],[13,"CLIENT_PROPAGATED","","",8,null],[13,"COMMIT_WAIT","","",8,null],[4,"ReadMode","","",null,null],[13,"UNKNOWN_READ_MODE","","",9,null],[13,"READ_LATEST","","",9,null],[13,"READ_AT_SNAPSHOT","","",9,null],[4,"OrderMode","","",null,null],[13,"UNKNOWN_ORDER_MODE","","",10,null],[13,"UNORDERED","","",10,null],[13,"ORDERED","","",10,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"columnschemapb"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"columnschemapb"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"columnschemapb"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"columnschemapb"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"columnschemapb"}}],[11,"clear_id","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_id","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_field_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",11,{"inputs":[{"name":"self"},{"name":"datatype"}],"output":null}],[11,"get_field_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datatype"}}],[11,"clear_is_key","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_key","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_key","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_key","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_is_nullable","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_nullable","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_nullable","","",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_nullable","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_read_default_value","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_read_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_default_value","","",11,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_read_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_read_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_read_default_value","","",11,null],[11,"clear_write_default_value","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_write_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_write_default_value","","",11,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_write_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_write_default_value","","",11,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_write_default_value","","",11,null],[11,"clear_encoding","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_encoding","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_encoding","","",11,{"inputs":[{"name":"self"},{"name":"encodingtype"}],"output":null}],[11,"get_encoding","","",11,{"inputs":[{"name":"self"}],"output":{"name":"encodingtype"}}],[11,"clear_compression","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_compression","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_compression","","",11,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":null}],[11,"get_compression","","",11,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[11,"clear_cfile_block_size","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cfile_block_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cfile_block_size","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_cfile_block_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",11,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"columnschemapb"}}],[11,"descriptor_static","","",11,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"schemapb"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"schemapb"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"schemapb"}}],[11,"clear_columns","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"set_columns","","",12,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_columns","","",12,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_columns","","",12,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_columns","","",12,null],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",12,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"schemapb"}}],[11,"descriptor_static","","",12,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"hostportpb"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"hostportpb"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"hostportpb"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"hostportpb"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"hostportpb"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"hostportpb"}}],[11,"clear_host","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_host","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_host","","",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_host","","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_host","","",13,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_host","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_port","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_port","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_port","","",13,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_port","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",13,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",13,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",13,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"hostportpb"}}],[11,"descriptor_static","","",13,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"partitionschemapb"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"partitionschemapb"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"partitionschemapb"}}],[11,"clear_hash_bucket_schemas","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"set_hash_bucket_schemas","","",14,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_hash_bucket_schemas","","",14,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_hash_bucket_schemas","","",14,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_hash_bucket_schemas","","",14,null],[11,"clear_range_schema","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_range_schema","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_range_schema","","",14,{"inputs":[{"name":"self"},{"name":"partitionschemapb_rangeschemapb"}],"output":null}],[11,"mut_range_schema","","",14,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"take_range_schema","","",14,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"get_range_schema","","",14,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"is_initialized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",14,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",14,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",14,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",14,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"partitionschemapb"}}],[11,"descriptor_static","","",14,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"partitionschemapb_columnidentifierpb"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"partitionschemapb_columnidentifierpb"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_columnidentifierpb"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"partitionschemapb_columnidentifierpb"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_columnidentifierpb_oneof_identifier"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"partitionschemapb_columnidentifierpb_oneof_identifier"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"partitionschemapb_columnidentifierpb_oneof_identifier"}],"output":{"name":"bool"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"partitionschemapb_columnidentifierpb"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"partitionschemapb_columnidentifierpb"}}],[11,"clear_id","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",15,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_id","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_name","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",15,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"partitionschemapb_columnidentifierpb"}}],[11,"descriptor_static","","",15,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"partitionschemapb_rangeschemapb"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"partitionschemapb_rangeschemapb"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"clear_columns","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"set_columns","","",16,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_columns","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_columns","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_columns","","",16,null],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",16,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"partitionschemapb_rangeschemapb"}}],[11,"descriptor_static","","",16,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"partitionschemapb_hashbucketschemapb"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"partitionschemapb_hashbucketschemapb"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_hashbucketschemapb"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"partitionschemapb_hashbucketschemapb"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"partitionschemapb_hashbucketschemapb"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"partitionschemapb_hashbucketschemapb"}}],[11,"clear_columns","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"set_columns","","",17,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_columns","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_columns","","",17,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_columns","","",17,null],[11,"clear_num_buckets","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_buckets","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_buckets","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_buckets","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_seed","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_seed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_seed","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_seed","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_hash_algorithm","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_hash_algorithm","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_hash_algorithm","","",17,{"inputs":[{"name":"self"},{"name":"partitionschemapb_hashbucketschemapb_hashalgorithm"}],"output":null}],[11,"get_hash_algorithm","","",17,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_hashbucketschemapb_hashalgorithm"}}],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",17,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"partitionschemapb_hashbucketschemapb"}}],[11,"descriptor_static","","",17,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb_hashbucketschemapb_hashalgorithm"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"partitionschemapb_hashbucketschemapb_hashalgorithm"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"value","","",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",3,null],[11,"enum_descriptor_static","","",3,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"partitionpb"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"partitionpb"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"partitionpb"}}],[11,"clear_hash_buckets","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"set_hash_buckets","","",18,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_hash_buckets","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_hash_buckets","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_hash_buckets","","",18,null],[11,"clear_partition_key_start","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_key_start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_key_start","","",18,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_partition_key_start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_partition_key_start","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_partition_key_start","","",18,null],[11,"clear_partition_key_end","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_key_end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_key_end","","",18,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_partition_key_end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_partition_key_end","","",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_partition_key_end","","",18,null],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",18,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"partitionpb"}}],[11,"descriptor_static","","",18,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"columnpredicatepb"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_oneof_predicate"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_oneof_predicate"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_oneof_predicate"}],"output":{"name":"bool"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"columnpredicatepb"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"columnpredicatepb"}}],[11,"clear_column","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_column","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_column","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_column","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_column","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_column","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_range","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_range","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_range","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_range"}],"output":null}],[11,"mut_range","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_range"}}],[11,"take_range","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_range"}}],[11,"get_range","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_range"}}],[11,"clear_equality","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_equality","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_equality","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_equality"}],"output":null}],[11,"mut_equality","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_equality"}}],[11,"take_equality","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_equality"}}],[11,"get_equality","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_equality"}}],[11,"clear_is_not_null","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_not_null","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_not_null","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_isnotnull"}],"output":null}],[11,"mut_is_not_null","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"take_is_not_null","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"get_is_not_null","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"clear_in_list","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_in_list","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_in_list","","",19,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_inlist"}],"output":null}],[11,"mut_in_list","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_inlist"}}],[11,"take_in_list","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_inlist"}}],[11,"get_in_list","","",19,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_inlist"}}],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"columnpredicatepb"}}],[11,"descriptor_static","","",19,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_range"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_range"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_range"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"columnpredicatepb_range"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"columnpredicatepb_range"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"columnpredicatepb_range"}}],[11,"clear_lower","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lower","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lower","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_lower","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_lower","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_lower","","",20,null],[11,"clear_upper","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_upper","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_upper","","",20,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_upper","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_upper","","",20,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_upper","","",20,null],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",20,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"columnpredicatepb_range"}}],[11,"descriptor_static","","",20,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_equality"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_equality"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_equality"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"columnpredicatepb_equality"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"columnpredicatepb_equality"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"columnpredicatepb_equality"}}],[11,"clear_value","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_value","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_value","","",21,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_value","","",21,null],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",21,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"columnpredicatepb_equality"}}],[11,"descriptor_static","","",21,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_inlist"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_inlist"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_inlist"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"columnpredicatepb_inlist"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"columnpredicatepb_inlist"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"columnpredicatepb_inlist"}}],[11,"clear_values","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"set_values","","",22,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_values","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_values","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_values","","",22,null],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",22,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"columnpredicatepb_inlist"}}],[11,"descriptor_static","","",22,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_isnotnull"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"columnpredicatepb_isnotnull"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"is_initialized","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",23,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",23,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",23,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"columnpredicatepb_isnotnull"}}],[11,"descriptor_static","","",23,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"datatype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"datatype"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"value","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"encodingtype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"encodingtype"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"compressiontype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"compressiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"value","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"externalconsistencymode"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"externalconsistencymode"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"value","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"readmode"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"readmode"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"value","","",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",9,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",9,null],[11,"enum_descriptor_static","","",9,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ordermode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ordermode"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"value","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",10,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",10,null],[11,"enum_descriptor_static","","",10,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"consensus_metadata","kudu_pb","",null,null],[3,"RaftPeerPB","kudu_pb::consensus_metadata","",null,null],[3,"RaftConfigPB","","",null,null],[3,"ConsensusStatePB","","",null,null],[3,"ConsensusMetadataPB","","",null,null],[4,"RaftPeerPB_Role","","",null,null],[13,"UNKNOWN_ROLE","","",24,null],[13,"FOLLOWER","","",24,null],[13,"LEADER","","",24,null],[13,"LEARNER","","",24,null],[13,"NON_PARTICIPANT","","",24,null],[4,"RaftPeerPB_MemberType","","",null,null],[13,"UNKNOWN_MEMBER_TYPE","","",25,null],[13,"NON_VOTER","","",25,null],[13,"VOTER","","",25,null],[4,"ConsensusConfigType","","",null,null],[13,"CONSENSUS_CONFIG_UNKNOWN","","",26,null],[13,"CONSENSUS_CONFIG_COMMITTED","","",26,null],[13,"CONSENSUS_CONFIG_ACTIVE","","",26,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"raftpeerpb"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"raftpeerpb"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"raftpeerpb"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"raftpeerpb"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"raftpeerpb"}}],[11,"clear_permanent_uuid","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_permanent_uuid","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_permanent_uuid","","",27,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_permanent_uuid","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_permanent_uuid","","",27,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_permanent_uuid","","",27,null],[11,"clear_member_type","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_member_type","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_member_type","","",27,{"inputs":[{"name":"self"},{"name":"raftpeerpb_membertype"}],"output":null}],[11,"get_member_type","","",27,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_membertype"}}],[11,"clear_last_known_addr","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_known_addr","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_known_addr","","",27,{"inputs":[{"name":"self"},{"name":"hostportpb"}],"output":null}],[11,"mut_last_known_addr","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hostportpb"}}],[11,"take_last_known_addr","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hostportpb"}}],[11,"get_last_known_addr","","",27,{"inputs":[{"name":"self"}],"output":{"name":"hostportpb"}}],[11,"is_initialized","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",27,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",27,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",27,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"raftpeerpb"}}],[11,"descriptor_static","","",27,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_role"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"raftpeerpb_role"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"value","","",24,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",24,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",24,null],[11,"enum_descriptor_static","","",24,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_membertype"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"raftpeerpb_membertype"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"value","","",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",25,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",25,null],[11,"enum_descriptor_static","","",25,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"raftconfigpb"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"raftconfigpb"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"raftconfigpb"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"raftconfigpb"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"raftconfigpb"}}],[11,"clear_opid_index","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_opid_index","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_opid_index","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_opid_index","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_OBSOLETE_local","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_OBSOLETE_local","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_OBSOLETE_local","","",28,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_OBSOLETE_local","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_peers","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"set_peers","","",28,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_peers","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_peers","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_peers","","",28,null],[11,"is_initialized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",28,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",28,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",28,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"raftconfigpb"}}],[11,"descriptor_static","","",28,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"consensusstatepb"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"consensusstatepb"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"consensusstatepb"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"consensusstatepb"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"consensusstatepb"}}],[11,"clear_current_term","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_current_term","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_current_term","","",29,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_current_term","","",29,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_leader_uuid","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_leader_uuid","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_leader_uuid","","",29,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_leader_uuid","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_leader_uuid","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_leader_uuid","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_config","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_config","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_config","","",29,{"inputs":[{"name":"self"},{"name":"raftconfigpb"}],"output":null}],[11,"mut_config","","",29,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"take_config","","",29,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"get_config","","",29,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"is_initialized","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",29,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",29,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",29,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"consensusstatepb"}}],[11,"descriptor_static","","",29,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"consensusmetadatapb"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"consensusmetadatapb"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"consensusmetadatapb"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"consensusmetadatapb"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"consensusmetadatapb"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"consensusmetadatapb"}}],[11,"clear_committed_config","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"has_committed_config","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_committed_config","","",30,{"inputs":[{"name":"self"},{"name":"raftconfigpb"}],"output":null}],[11,"mut_committed_config","","",30,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"take_committed_config","","",30,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"get_committed_config","","",30,{"inputs":[{"name":"self"}],"output":{"name":"raftconfigpb"}}],[11,"clear_current_term","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"has_current_term","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_current_term","","",30,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_current_term","","",30,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_voted_for","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"has_voted_for","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_voted_for","","",30,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_voted_for","","",30,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_voted_for","","",30,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_voted_for","","",30,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",30,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",30,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",30,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"consensusmetadatapb"}}],[11,"descriptor_static","","",30,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"consensusconfigtype"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"consensusconfigtype"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",26,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",26,null],[11,"enum_descriptor_static","","",26,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"fs","kudu_pb","",null,null],[3,"InstanceMetadataPB","kudu_pb::fs","",null,null],[3,"PathSetPB","","",null,null],[3,"PathInstanceMetadataPB","","",null,null],[3,"BlockIdPB","","",null,null],[3,"BlockRecordPB","","",null,null],[4,"BlockRecordType","","",null,null],[13,"UNKNOWN","","",31,null],[13,"CREATE","","",31,null],[13,"DELETE","","",31,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"instancemetadatapb"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"instancemetadatapb"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"instancemetadatapb"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"instancemetadatapb"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"instancemetadatapb"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"instancemetadatapb"}}],[11,"clear_uuid","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_uuid","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_uuid","","",32,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_uuid","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_uuid","","",32,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_uuid","","",32,null],[11,"clear_format_stamp","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"has_format_stamp","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_format_stamp","","",32,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_format_stamp","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_format_stamp","","",32,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_format_stamp","","",32,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",32,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",32,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",32,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",32,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"instancemetadatapb"}}],[11,"descriptor_static","","",32,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"pathsetpb"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"pathsetpb"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"pathsetpb"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"pathsetpb"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"pathsetpb"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"pathsetpb"}}],[11,"clear_uuid","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_uuid","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_uuid","","",33,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_uuid","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_uuid","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_uuid","","",33,null],[11,"clear_all_uuids","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"set_all_uuids","","",33,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_all_uuids","","",33,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_all_uuids","","",33,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_all_uuids","","",33,null],[11,"is_initialized","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",33,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",33,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",33,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"pathsetpb"}}],[11,"descriptor_static","","",33,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"pathinstancemetadatapb"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"pathinstancemetadatapb"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pathinstancemetadatapb"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"pathinstancemetadatapb"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"pathinstancemetadatapb"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"pathinstancemetadatapb"}}],[11,"clear_path_set","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_path_set","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_path_set","","",34,{"inputs":[{"name":"self"},{"name":"pathsetpb"}],"output":null}],[11,"mut_path_set","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pathsetpb"}}],[11,"take_path_set","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pathsetpb"}}],[11,"get_path_set","","",34,{"inputs":[{"name":"self"}],"output":{"name":"pathsetpb"}}],[11,"clear_block_manager_type","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_block_manager_type","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_block_manager_type","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_block_manager_type","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_block_manager_type","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_block_manager_type","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_filesystem_block_size_bytes","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_filesystem_block_size_bytes","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_filesystem_block_size_bytes","","",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_filesystem_block_size_bytes","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",34,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",34,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",34,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"pathinstancemetadatapb"}}],[11,"descriptor_static","","",34,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"blockidpb"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"blockidpb"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"blockidpb"}}],[11,"clear_id","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",35,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_id","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",35,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",35,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",35,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"blockidpb"}}],[11,"descriptor_static","","",35,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"blockrecordpb"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"blockrecordpb"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockrecordpb"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"blockrecordpb"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"blockrecordpb"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"blockrecordpb"}}],[11,"clear_block_id","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_block_id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_block_id","","",36,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":null}],[11,"mut_block_id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"take_block_id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"get_block_id","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"clear_op_type","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_op_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_op_type","","",36,{"inputs":[{"name":"self"},{"name":"blockrecordtype"}],"output":null}],[11,"get_op_type","","",36,{"inputs":[{"name":"self"}],"output":{"name":"blockrecordtype"}}],[11,"clear_timestamp_us","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_timestamp_us","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_timestamp_us","","",36,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_timestamp_us","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_offset","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_offset","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_offset","","",36,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_offset","","",36,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_length","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_length","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_length","","",36,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_length","","",36,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",36,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",36,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",36,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"blockrecordpb"}}],[11,"descriptor_static","","",36,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"blockrecordtype"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"blockrecordtype"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"value","","",31,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",31,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",31,null],[11,"enum_descriptor_static","","",31,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"master","kudu_pb","",null,null],[3,"MasterErrorPB","kudu_pb::master","",null,null],[3,"TSToMasterCommonPB","","",null,null],[3,"TableIdentifierPB","","",null,null],[3,"SysTabletsEntryPB","","",null,null],[3,"SysTablesEntryPB","","",null,null],[3,"PingRequestPB","","",null,null],[3,"PingResponsePB","","",null,null],[3,"ReportedTabletPB","","",null,null],[3,"TabletReportPB","","",null,null],[3,"ReportedTabletUpdatesPB","","",null,null],[3,"TabletReportUpdatesPB","","",null,null],[3,"TSHeartbeatRequestPB","","",null,null],[3,"TSHeartbeatResponsePB","","",null,null],[3,"TabletLocationsPB","","",null,null],[3,"TabletLocationsPB_ReplicaPB","","",null,null],[3,"TSInfoPB","","",null,null],[3,"GetTabletLocationsRequestPB","","",null,null],[3,"GetTabletLocationsResponsePB","","",null,null],[3,"GetTabletLocationsResponsePB_Error","","",null,null],[3,"CreateTableRequestPB","","",null,null],[3,"CreateTableResponsePB","","",null,null],[3,"IsCreateTableDoneRequestPB","","",null,null],[3,"IsCreateTableDoneResponsePB","","",null,null],[3,"DeleteTableRequestPB","","",null,null],[3,"DeleteTableResponsePB","","",null,null],[3,"ListTablesRequestPB","","",null,null],[3,"ListTablesResponsePB","","",null,null],[3,"ListTablesResponsePB_TableInfo","","",null,null],[3,"GetTableLocationsRequestPB","","",null,null],[3,"GetTableLocationsResponsePB","","",null,null],[3,"AlterTableRequestPB","","",null,null],[3,"AlterTableRequestPB_AddColumn","","",null,null],[3,"AlterTableRequestPB_DropColumn","","",null,null],[3,"AlterTableRequestPB_RenameColumn","","",null,null],[3,"AlterTableRequestPB_AddRangePartition","","",null,null],[3,"AlterTableRequestPB_DropRangePartition","","",null,null],[3,"AlterTableRequestPB_Step","","",null,null],[3,"AlterTableResponsePB","","",null,null],[3,"IsAlterTableDoneRequestPB","","",null,null],[3,"IsAlterTableDoneResponsePB","","",null,null],[3,"GetTableSchemaRequestPB","","",null,null],[3,"GetTableSchemaResponsePB","","",null,null],[3,"ListTabletServersRequestPB","","",null,null],[3,"ListTabletServersResponsePB","","",null,null],[3,"ListTabletServersResponsePB_Entry","","",null,null],[3,"GetMasterRegistrationRequestPB","","",null,null],[3,"GetMasterRegistrationResponsePB","","",null,null],[3,"ListMastersRequestPB","","",null,null],[3,"ListMastersResponsePB","","",null,null],[4,"MasterErrorPB_Code","","",null,null],[13,"UNKNOWN_ERROR","","",37,null],[13,"INVALID_SCHEMA","","",37,null],[13,"TABLE_NOT_FOUND","","",37,null],[13,"TABLE_ALREADY_PRESENT","","",37,null],[13,"TOO_MANY_TABLETS","","",37,null],[13,"CATALOG_MANAGER_NOT_INITIALIZED","","",37,null],[13,"NOT_THE_LEADER","","",37,null],[13,"REPLICATION_FACTOR_TOO_HIGH","","",37,null],[13,"TABLET_NOT_RUNNING","","",37,null],[13,"EVEN_REPLICATION_FACTOR","","",37,null],[13,"ILLEGAL_REPLICATION_FACTOR","","",37,null],[4,"SysTabletsEntryPB_State","","",null,null],[13,"UNKNOWN","","",38,null],[13,"PREPARING","","",38,null],[13,"CREATING","","",38,null],[13,"RUNNING","","",38,null],[13,"REPLACED","","",38,null],[13,"DELETED","","",38,null],[4,"SysTablesEntryPB_State","","",null,null],[13,"UNKNOWN","","",39,null],[13,"PREPARING","","",39,null],[13,"RUNNING","","",39,null],[13,"ALTERING","","",39,null],[13,"REMOVED","","",39,null],[4,"AlterTableRequestPB_StepType","","",null,null],[13,"UNKNOWN","","",40,null],[13,"ADD_COLUMN","","",40,null],[13,"DROP_COLUMN","","",40,null],[13,"RENAME_COLUMN","","",40,null],[13,"ALTER_COLUMN","","",40,null],[13,"ADD_RANGE_PARTITION","","",40,null],[13,"DROP_RANGE_PARTITION","","",40,null],[4,"MasterFeatures","","",null,null],[13,"UNKNOWN_FEATURE","","",41,null],[13,"RANGE_PARTITION_BOUNDS","","",41,null],[13,"ADD_DROP_RANGE_PARTITIONS","","",41,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"default","","",42,{"inputs":[],"output":{"name":"mastererrorpb"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"mastererrorpb"}}],[11,"default_instance","","",42,{"inputs":[],"output":{"name":"mastererrorpb"}}],[11,"clear_code","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",42,{"inputs":[{"name":"self"},{"name":"mastererrorpb_code"}],"output":null}],[11,"get_code","","",42,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb_code"}}],[11,"clear_status","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"has_status","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status","","",42,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_status","","",42,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_status","","",42,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_status","","",42,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"is_initialized","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",42,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",42,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",42,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",42,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",42,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",42,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"mastererrorpb"}}],[11,"descriptor_static","","",42,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb_code"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"mastererrorpb_code"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"value","","",37,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",37,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",37,null],[11,"enum_descriptor_static","","",37,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"tstomastercommonpb"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"tstomastercommonpb"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"tstomastercommonpb"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"tstomastercommonpb"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"tstomastercommonpb"}}],[11,"default_instance","","",43,{"inputs":[],"output":{"name":"tstomastercommonpb"}}],[11,"clear_ts_instance","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ts_instance","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ts_instance","","",43,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":null}],[11,"mut_ts_instance","","",43,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"take_ts_instance","","",43,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"get_ts_instance","","",43,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"is_initialized","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",43,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",43,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",43,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",43,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",43,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",43,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",43,{"inputs":[],"output":{"name":"tstomastercommonpb"}}],[11,"descriptor_static","","",43,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"tableidentifierpb"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"tableidentifierpb"}}],[11,"default_instance","","",44,{"inputs":[],"output":{"name":"tableidentifierpb"}}],[11,"clear_table_id","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",44,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",44,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",44,null],[11,"clear_table_name","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_name","","",44,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_table_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_table_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_table_name","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",44,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",44,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",44,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",44,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",44,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",44,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",44,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",44,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",44,{"inputs":[],"output":{"name":"tableidentifierpb"}}],[11,"descriptor_static","","",44,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"systabletsentrypb"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"systabletsentrypb"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"systabletsentrypb"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"systabletsentrypb"}}],[11,"new","","",45,{"inputs":[],"output":{"name":"systabletsentrypb"}}],[11,"default_instance","","",45,{"inputs":[],"output":{"name":"systabletsentrypb"}}],[11,"clear_DEPRECATED_start_key","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_DEPRECATED_start_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_DEPRECATED_start_key","","",45,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_DEPRECATED_start_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_DEPRECATED_start_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_DEPRECATED_start_key","","",45,null],[11,"clear_DEPRECATED_end_key","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_DEPRECATED_end_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_DEPRECATED_end_key","","",45,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_DEPRECATED_end_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_DEPRECATED_end_key","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_DEPRECATED_end_key","","",45,null],[11,"clear_partition","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition","","",45,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":null}],[11,"mut_partition","","",45,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"take_partition","","",45,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"get_partition","","",45,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"clear_committed_consensus_state","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_committed_consensus_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_committed_consensus_state","","",45,{"inputs":[{"name":"self"},{"name":"consensusstatepb"}],"output":null}],[11,"mut_committed_consensus_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"take_committed_consensus_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"get_committed_consensus_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"clear_state","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state","","",45,{"inputs":[{"name":"self"},{"name":"systabletsentrypb_state"}],"output":null}],[11,"get_state","","",45,{"inputs":[{"name":"self"}],"output":{"name":"systabletsentrypb_state"}}],[11,"clear_state_msg","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state_msg","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state_msg","","",45,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_state_msg","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_state_msg","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_state_msg","","",45,null],[11,"clear_table_id","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",45,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",45,null],[11,"is_initialized","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",45,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",45,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",45,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",45,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",45,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",45,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",45,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",45,{"inputs":[],"output":{"name":"systabletsentrypb"}}],[11,"descriptor_static","","",45,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"systabletsentrypb_state"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"systabletsentrypb_state"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"value","","",38,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",38,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",38,null],[11,"enum_descriptor_static","","",38,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"systablesentrypb"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"systablesentrypb"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"systablesentrypb"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"systablesentrypb"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"systablesentrypb"}}],[11,"default_instance","","",46,{"inputs":[],"output":{"name":"systablesentrypb"}}],[11,"clear_name","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_name","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_name","","",46,null],[11,"clear_version","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_version","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_version","","",46,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_version","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_schema","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",46,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_fully_applied_schema","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_fully_applied_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_fully_applied_schema","","",46,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_fully_applied_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_fully_applied_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_fully_applied_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_partition_schema","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_schema","","",46,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":null}],[11,"mut_partition_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"take_partition_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"get_partition_schema","","",46,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"clear_next_column_id","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_next_column_id","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_next_column_id","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_next_column_id","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_num_replicas","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_replicas","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_replicas","","",46,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_replicas","","",46,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_state","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state","","",46,{"inputs":[{"name":"self"},{"name":"systablesentrypb_state"}],"output":null}],[11,"get_state","","",46,{"inputs":[{"name":"self"}],"output":{"name":"systablesentrypb_state"}}],[11,"clear_state_msg","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state_msg","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state_msg","","",46,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_state_msg","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_state_msg","","",46,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_state_msg","","",46,null],[11,"is_initialized","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",46,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",46,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",46,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",46,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",46,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",46,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",46,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"systablesentrypb"}}],[11,"descriptor_static","","",46,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"systablesentrypb_state"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"systablesentrypb_state"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"pingrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"pingrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"pingrequestpb"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"default_instance","","",47,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"is_initialized","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",47,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",47,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",47,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",47,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"descriptor_static","","",47,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"pingresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"pingresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"pingresponsepb"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"default_instance","","",48,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"is_initialized","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",48,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",48,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",48,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",48,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",48,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",48,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",48,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",48,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",48,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",48,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"descriptor_static","","",48,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"reportedtabletpb"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"reportedtabletpb"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"reportedtabletpb"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"reportedtabletpb"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"reportedtabletpb"}}],[11,"default_instance","","",49,{"inputs":[],"output":{"name":"reportedtabletpb"}}],[11,"clear_tablet_id","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",49,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",49,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",49,null],[11,"clear_state","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state","","",49,{"inputs":[{"name":"self"},{"name":"tabletstatepb"}],"output":null}],[11,"get_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatepb"}}],[11,"clear_tablet_data_state","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_data_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_data_state","","",49,{"inputs":[{"name":"self"},{"name":"tabletdatastate"}],"output":null}],[11,"get_tablet_data_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"tabletdatastate"}}],[11,"clear_committed_consensus_state","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_committed_consensus_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_committed_consensus_state","","",49,{"inputs":[{"name":"self"},{"name":"consensusstatepb"}],"output":null}],[11,"mut_committed_consensus_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"take_committed_consensus_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"get_committed_consensus_state","","",49,{"inputs":[{"name":"self"}],"output":{"name":"consensusstatepb"}}],[11,"clear_error","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",49,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_error","","",49,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_error","","",49,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_error","","",49,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"clear_schema_version","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema_version","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema_version","","",49,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_schema_version","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",49,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",49,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",49,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",49,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",49,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",49,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"reportedtabletpb"}}],[11,"descriptor_static","","",49,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"tabletreportpb"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"tabletreportpb"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportpb"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"tabletreportpb"}}],[11,"new","","",50,{"inputs":[],"output":{"name":"tabletreportpb"}}],[11,"default_instance","","",50,{"inputs":[],"output":{"name":"tabletreportpb"}}],[11,"clear_is_incremental","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_incremental","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_incremental","","",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_incremental","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_updated_tablets","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"set_updated_tablets","","",50,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_updated_tablets","","",50,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_updated_tablets","","",50,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_updated_tablets","","",50,null],[11,"clear_removed_tablet_ids","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"set_removed_tablet_ids","","",50,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_removed_tablet_ids","","",50,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_removed_tablet_ids","","",50,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_removed_tablet_ids","","",50,null],[11,"clear_sequence_number","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"has_sequence_number","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_sequence_number","","",50,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_sequence_number","","",50,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",50,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",50,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",50,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",50,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",50,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",50,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",50,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",50,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",50,{"inputs":[],"output":{"name":"tabletreportpb"}}],[11,"descriptor_static","","",50,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"reportedtabletupdatespb"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"reportedtabletupdatespb"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"reportedtabletupdatespb"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"reportedtabletupdatespb"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"reportedtabletupdatespb"}}],[11,"default_instance","","",51,{"inputs":[],"output":{"name":"reportedtabletupdatespb"}}],[11,"clear_tablet_id","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",51,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",51,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",51,null],[11,"clear_state_msg","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state_msg","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state_msg","","",51,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_state_msg","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_state_msg","","",51,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_state_msg","","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",51,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",51,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",51,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",51,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",51,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",51,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",51,{"inputs":[],"output":{"name":"reportedtabletupdatespb"}}],[11,"descriptor_static","","",51,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"tabletreportupdatespb"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"tabletreportupdatespb"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportupdatespb"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"tabletreportupdatespb"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"tabletreportupdatespb"}}],[11,"default_instance","","",52,{"inputs":[],"output":{"name":"tabletreportupdatespb"}}],[11,"clear_tablets","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"set_tablets","","",52,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_tablets","","",52,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_tablets","","",52,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_tablets","","",52,null],[11,"is_initialized","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",52,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",52,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",52,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",52,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",52,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",52,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"tabletreportupdatespb"}}],[11,"descriptor_static","","",52,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"tsheartbeatrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"self"},{"name":"tsheartbeatrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tsheartbeatrequestpb"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"tsheartbeatrequestpb"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"tsheartbeatrequestpb"}}],[11,"default_instance","","",53,{"inputs":[],"output":{"name":"tsheartbeatrequestpb"}}],[11,"clear_common","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"has_common","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_common","","",53,{"inputs":[{"name":"self"},{"name":"tstomastercommonpb"}],"output":null}],[11,"mut_common","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tstomastercommonpb"}}],[11,"take_common","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tstomastercommonpb"}}],[11,"get_common","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tstomastercommonpb"}}],[11,"clear_registration","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"has_registration","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_registration","","",53,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":null}],[11,"mut_registration","","",53,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"take_registration","","",53,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"get_registration","","",53,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"clear_tablet_report","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_report","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_report","","",53,{"inputs":[{"name":"self"},{"name":"tabletreportpb"}],"output":null}],[11,"mut_tablet_report","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportpb"}}],[11,"take_tablet_report","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportpb"}}],[11,"get_tablet_report","","",53,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportpb"}}],[11,"clear_num_live_tablets","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_live_tablets","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_live_tablets","","",53,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_live_tablets","","",53,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",53,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",53,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",53,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",53,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",53,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"tsheartbeatrequestpb"}}],[11,"descriptor_static","","",53,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"tsheartbeatresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"tsheartbeatresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tsheartbeatresponsepb"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"tsheartbeatresponsepb"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"tsheartbeatresponsepb"}}],[11,"default_instance","","",54,{"inputs":[],"output":{"name":"tsheartbeatresponsepb"}}],[11,"clear_error","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",54,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",54,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",54,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",54,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_master_instance","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_master_instance","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_master_instance","","",54,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":null}],[11,"mut_master_instance","","",54,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"take_master_instance","","",54,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"get_master_instance","","",54,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"clear_needs_reregister","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_needs_reregister","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_needs_reregister","","",54,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_needs_reregister","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_needs_full_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_needs_full_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_needs_full_tablet_report","","",54,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_needs_full_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_report","","",54,{"inputs":[{"name":"self"},{"name":"tabletreportupdatespb"}],"output":null}],[11,"mut_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportupdatespb"}}],[11,"take_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportupdatespb"}}],[11,"get_tablet_report","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tabletreportupdatespb"}}],[11,"clear_leader_master","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"has_leader_master","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_leader_master","","",54,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_leader_master","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",54,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",54,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",54,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",54,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",54,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",54,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",54,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",54,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",54,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"tsheartbeatresponsepb"}}],[11,"descriptor_static","","",54,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"tabletlocationspb"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"self"},{"name":"tabletlocationspb"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"tabletlocationspb"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"tabletlocationspb"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"tabletlocationspb"}}],[11,"default_instance","","",55,{"inputs":[],"output":{"name":"tabletlocationspb"}}],[11,"clear_tablet_id","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",55,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",55,null],[11,"clear_start_key","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start_key","","",55,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_start_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_start_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_start_key","","",55,null],[11,"clear_end_key","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end_key","","",55,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_end_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_end_key","","",55,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_end_key","","",55,null],[11,"clear_partition","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition","","",55,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":null}],[11,"mut_partition","","",55,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"take_partition","","",55,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"get_partition","","",55,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"clear_replicas","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"set_replicas","","",55,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_replicas","","",55,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_replicas","","",55,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_replicas","","",55,null],[11,"clear_DEPRECATED_stale","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"has_DEPRECATED_stale","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_DEPRECATED_stale","","",55,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_DEPRECATED_stale","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",55,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",55,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",55,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",55,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",55,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",55,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",55,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"tabletlocationspb"}}],[11,"descriptor_static","","",55,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"tabletlocationspb_replicapb"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"tabletlocationspb_replicapb"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"tabletlocationspb_replicapb"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"tabletlocationspb_replicapb"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"tabletlocationspb_replicapb"}}],[11,"default_instance","","",56,{"inputs":[],"output":{"name":"tabletlocationspb_replicapb"}}],[11,"clear_ts_info","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ts_info","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ts_info","","",56,{"inputs":[{"name":"self"},{"name":"tsinfopb"}],"output":null}],[11,"mut_ts_info","","",56,{"inputs":[{"name":"self"}],"output":{"name":"tsinfopb"}}],[11,"take_ts_info","","",56,{"inputs":[{"name":"self"}],"output":{"name":"tsinfopb"}}],[11,"get_ts_info","","",56,{"inputs":[{"name":"self"}],"output":{"name":"tsinfopb"}}],[11,"clear_role","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"has_role","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_role","","",56,{"inputs":[{"name":"self"},{"name":"raftpeerpb_role"}],"output":null}],[11,"get_role","","",56,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_role"}}],[11,"is_initialized","","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",56,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",56,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",56,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",56,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",56,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",56,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",56,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",56,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",56,{"inputs":[],"output":{"name":"tabletlocationspb_replicapb"}}],[11,"descriptor_static","","",56,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"tsinfopb"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"tsinfopb"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"tsinfopb"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"tsinfopb"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"tsinfopb"}}],[11,"default_instance","","",57,{"inputs":[],"output":{"name":"tsinfopb"}}],[11,"clear_permanent_uuid","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"has_permanent_uuid","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_permanent_uuid","","",57,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_permanent_uuid","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_permanent_uuid","","",57,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_permanent_uuid","","",57,null],[11,"clear_rpc_addresses","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"set_rpc_addresses","","",57,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_rpc_addresses","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_rpc_addresses","","",57,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_rpc_addresses","","",57,null],[11,"is_initialized","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",57,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",57,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",57,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",57,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",57,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",57,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",57,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",57,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"tsinfopb"}}],[11,"descriptor_static","","",57,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"gettabletlocationsrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"gettabletlocationsrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"gettabletlocationsrequestpb"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"gettabletlocationsrequestpb"}}],[11,"new","","",58,{"inputs":[],"output":{"name":"gettabletlocationsrequestpb"}}],[11,"default_instance","","",58,{"inputs":[],"output":{"name":"gettabletlocationsrequestpb"}}],[11,"clear_tablet_ids","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"set_tablet_ids","","",58,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_tablet_ids","","",58,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_tablet_ids","","",58,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_tablet_ids","","",58,null],[11,"is_initialized","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",58,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",58,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",58,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",58,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",58,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",58,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",58,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",58,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",58,{"inputs":[],"output":{"name":"gettabletlocationsrequestpb"}}],[11,"descriptor_static","","",58,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"gettabletlocationsresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"gettabletlocationsresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"gettabletlocationsresponsepb"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb"}}],[11,"default_instance","","",59,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb"}}],[11,"clear_error","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",59,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",59,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_tablet_locations","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"set_tablet_locations","","",59,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_tablet_locations","","",59,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_tablet_locations","","",59,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_tablet_locations","","",59,null],[11,"clear_errors","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"set_errors","","",59,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_errors","","",59,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_errors","","",59,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_errors","","",59,null],[11,"is_initialized","","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",59,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",59,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",59,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",59,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",59,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",59,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",59,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",59,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",59,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",59,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb"}}],[11,"descriptor_static","","",59,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"gettabletlocationsresponsepb_error"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"gettabletlocationsresponsepb_error"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"gettabletlocationsresponsepb_error"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb_error"}}],[11,"new","","",60,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb_error"}}],[11,"default_instance","","",60,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb_error"}}],[11,"clear_tablet_id","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",60,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",60,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",60,null],[11,"clear_status","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"has_status","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status","","",60,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_status","","",60,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_status","","",60,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_status","","",60,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"is_initialized","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",60,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",60,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",60,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",60,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",60,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",60,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",60,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",60,{"inputs":[],"output":{"name":"gettabletlocationsresponsepb_error"}}],[11,"descriptor_static","","",60,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"createtablerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"createtablerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"createtablerequestpb"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"createtablerequestpb"}}],[11,"new","","",61,{"inputs":[],"output":{"name":"createtablerequestpb"}}],[11,"default_instance","","",61,{"inputs":[],"output":{"name":"createtablerequestpb"}}],[11,"clear_name","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",61,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",61,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",61,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_schema","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",61,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":null}],[11,"mut_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"take_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"get_split_rows_range_bounds","","",61,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"clear_partition_schema","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_schema","","",61,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":null}],[11,"mut_partition_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"take_partition_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"get_partition_schema","","",61,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"clear_num_replicas","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_replicas","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_replicas","","",61,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_replicas","","",61,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",61,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",61,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",61,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",61,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",61,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",61,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",61,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",61,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",61,{"inputs":[],"output":{"name":"createtablerequestpb"}}],[11,"descriptor_static","","",61,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"createtableresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"createtableresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"createtableresponsepb"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"createtableresponsepb"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"createtableresponsepb"}}],[11,"default_instance","","",62,{"inputs":[],"output":{"name":"createtableresponsepb"}}],[11,"clear_error","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",62,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",62,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_table_id","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",62,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",62,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",62,null],[11,"is_initialized","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",62,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",62,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",62,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",62,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",62,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",62,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",62,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",62,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"createtableresponsepb"}}],[11,"descriptor_static","","",62,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"iscreatetabledonerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"iscreatetabledonerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"iscreatetabledonerequestpb"}}],[11,"default","","",63,{"inputs":[],"output":{"name":"iscreatetabledonerequestpb"}}],[11,"new","","",63,{"inputs":[],"output":{"name":"iscreatetabledonerequestpb"}}],[11,"default_instance","","",63,{"inputs":[],"output":{"name":"iscreatetabledonerequestpb"}}],[11,"clear_table","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",63,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",63,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",63,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",63,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"is_initialized","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",63,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",63,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",63,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",63,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",63,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",63,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",63,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",63,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",63,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",63,{"inputs":[],"output":{"name":"iscreatetabledonerequestpb"}}],[11,"descriptor_static","","",63,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"iscreatetabledoneresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"iscreatetabledoneresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"iscreatetabledoneresponsepb"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"iscreatetabledoneresponsepb"}}],[11,"new","","",64,{"inputs":[],"output":{"name":"iscreatetabledoneresponsepb"}}],[11,"default_instance","","",64,{"inputs":[],"output":{"name":"iscreatetabledoneresponsepb"}}],[11,"clear_error","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",64,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",64,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",64,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",64,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_done","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"has_done","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_done","","",64,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_done","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",64,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",64,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",64,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",64,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",64,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",64,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",64,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",64,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",64,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",64,{"inputs":[],"output":{"name":"iscreatetabledoneresponsepb"}}],[11,"descriptor_static","","",64,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"deletetablerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"deletetablerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"deletetablerequestpb"}}],[11,"default","","",65,{"inputs":[],"output":{"name":"deletetablerequestpb"}}],[11,"new","","",65,{"inputs":[],"output":{"name":"deletetablerequestpb"}}],[11,"default_instance","","",65,{"inputs":[],"output":{"name":"deletetablerequestpb"}}],[11,"clear_table","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",65,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",65,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",65,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",65,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"is_initialized","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",65,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",65,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",65,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",65,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",65,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",65,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",65,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",65,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",65,{"inputs":[],"output":{"name":"deletetablerequestpb"}}],[11,"descriptor_static","","",65,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"deletetableresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"self"},{"name":"deletetableresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"deletetableresponsepb"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"deletetableresponsepb"}}],[11,"new","","",66,{"inputs":[],"output":{"name":"deletetableresponsepb"}}],[11,"default_instance","","",66,{"inputs":[],"output":{"name":"deletetableresponsepb"}}],[11,"clear_error","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",66,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",66,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",66,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",66,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"is_initialized","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",66,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",66,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",66,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",66,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",66,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",66,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",66,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",66,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",66,{"inputs":[],"output":{"name":"deletetableresponsepb"}}],[11,"descriptor_static","","",66,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"listtablesrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"self"},{"name":"listtablesrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"listtablesrequestpb"}}],[11,"default","","",67,{"inputs":[],"output":{"name":"listtablesrequestpb"}}],[11,"new","","",67,{"inputs":[],"output":{"name":"listtablesrequestpb"}}],[11,"default_instance","","",67,{"inputs":[],"output":{"name":"listtablesrequestpb"}}],[11,"clear_name_filter","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name_filter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name_filter","","",67,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name_filter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name_filter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name_filter","","",67,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",67,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",67,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",67,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",67,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",67,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",67,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",67,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",67,{"inputs":[],"output":{"name":"listtablesrequestpb"}}],[11,"descriptor_static","","",67,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"listtablesresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"listtablesresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"listtablesresponsepb"}}],[11,"default","","",68,{"inputs":[],"output":{"name":"listtablesresponsepb"}}],[11,"new","","",68,{"inputs":[],"output":{"name":"listtablesresponsepb"}}],[11,"default_instance","","",68,{"inputs":[],"output":{"name":"listtablesresponsepb"}}],[11,"clear_error","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",68,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",68,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",68,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",68,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_tables","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"set_tables","","",68,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_tables","","",68,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_tables","","",68,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_tables","","",68,null],[11,"is_initialized","","",68,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",68,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",68,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",68,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",68,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",68,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",68,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",68,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",68,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",68,{"inputs":[],"output":{"name":"listtablesresponsepb"}}],[11,"descriptor_static","","",68,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"listtablesresponsepb_tableinfo"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"listtablesresponsepb_tableinfo"}],"output":{"name":"bool"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"listtablesresponsepb_tableinfo"}}],[11,"default","","",69,{"inputs":[],"output":{"name":"listtablesresponsepb_tableinfo"}}],[11,"new","","",69,{"inputs":[],"output":{"name":"listtablesresponsepb_tableinfo"}}],[11,"default_instance","","",69,{"inputs":[],"output":{"name":"listtablesresponsepb_tableinfo"}}],[11,"clear_id","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",69,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_id","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_id","","",69,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_id","","",69,null],[11,"clear_name","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",69,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",69,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",69,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",69,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",69,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",69,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",69,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",69,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",69,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",69,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",69,{"inputs":[],"output":{"name":"listtablesresponsepb_tableinfo"}}],[11,"descriptor_static","","",69,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"gettablelocationsrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"gettablelocationsrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"gettablelocationsrequestpb"}}],[11,"default","","",70,{"inputs":[],"output":{"name":"gettablelocationsrequestpb"}}],[11,"new","","",70,{"inputs":[],"output":{"name":"gettablelocationsrequestpb"}}],[11,"default_instance","","",70,{"inputs":[],"output":{"name":"gettablelocationsrequestpb"}}],[11,"clear_table","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",70,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",70,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",70,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",70,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"clear_partition_key_start","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_key_start","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_key_start","","",70,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_partition_key_start","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_partition_key_start","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_partition_key_start","","",70,null],[11,"clear_partition_key_end","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_key_end","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_key_end","","",70,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_partition_key_end","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_partition_key_end","","",70,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_partition_key_end","","",70,null],[11,"clear_max_returned_locations","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"has_max_returned_locations","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_max_returned_locations","","",70,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_max_returned_locations","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",70,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",70,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",70,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",70,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",70,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",70,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",70,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",70,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",70,{"inputs":[],"output":{"name":"gettablelocationsrequestpb"}}],[11,"descriptor_static","","",70,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"gettablelocationsresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"self"},{"name":"gettablelocationsresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"gettablelocationsresponsepb"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"gettablelocationsresponsepb"}}],[11,"new","","",71,{"inputs":[],"output":{"name":"gettablelocationsresponsepb"}}],[11,"default_instance","","",71,{"inputs":[],"output":{"name":"gettablelocationsresponsepb"}}],[11,"clear_error","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",71,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",71,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_tablet_locations","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"set_tablet_locations","","",71,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_tablet_locations","","",71,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_tablet_locations","","",71,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_tablet_locations","","",71,null],[11,"clear_ttl_millis","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ttl_millis","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ttl_millis","","",71,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_ttl_millis","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_initialized","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",71,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",71,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",71,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",71,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",71,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",71,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",71,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",71,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",71,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",71,{"inputs":[],"output":{"name":"gettablelocationsresponsepb"}}],[11,"descriptor_static","","",71,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",72,{"inputs":[{"name":"self"},{"name":"altertablerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"self"},{"name":"altertablerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb"}}],[11,"default","","",72,{"inputs":[],"output":{"name":"altertablerequestpb"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"altertablerequestpb"}}],[11,"default_instance","","",72,{"inputs":[],"output":{"name":"altertablerequestpb"}}],[11,"clear_table","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",72,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",72,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",72,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",72,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"clear_alter_schema_steps","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"set_alter_schema_steps","","",72,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_alter_schema_steps","","",72,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_alter_schema_steps","","",72,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_alter_schema_steps","","",72,null],[11,"clear_new_table_name","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_new_table_name","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_new_table_name","","",72,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_new_table_name","","",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_new_table_name","","",72,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_new_table_name","","",72,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_schema","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",72,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",72,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",72,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",72,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"is_initialized","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",72,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",72,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",72,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",72,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",72,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",72,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",72,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",72,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",72,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",72,{"inputs":[],"output":{"name":"altertablerequestpb"}}],[11,"descriptor_static","","",72,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addcolumn"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addcolumn"}],"output":{"name":"bool"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"default","","",73,{"inputs":[],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"new","","",73,{"inputs":[],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"default_instance","","",73,{"inputs":[],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"clear_schema","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",73,{"inputs":[{"name":"self"},{"name":"columnschemapb"}],"output":null}],[11,"mut_schema","","",73,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"take_schema","","",73,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"get_schema","","",73,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"is_initialized","","",73,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",73,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",73,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",73,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",73,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",73,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",73,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",73,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",73,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",73,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",73,{"inputs":[],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"descriptor_static","","",73,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_dropcolumn"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_dropcolumn"}],"output":{"name":"bool"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"default","","",74,{"inputs":[],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"new","","",74,{"inputs":[],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"default_instance","","",74,{"inputs":[],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"clear_name","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",74,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",74,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",74,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",74,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",74,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",74,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",74,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",74,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",74,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",74,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",74,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",74,{"inputs":[],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"descriptor_static","","",74,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_renamecolumn"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_renamecolumn"}],"output":{"name":"bool"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"default","","",75,{"inputs":[],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"new","","",75,{"inputs":[],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"default_instance","","",75,{"inputs":[],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"clear_old_name","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"has_old_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_old_name","","",75,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_old_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_old_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_old_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_new_name","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"has_new_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_new_name","","",75,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_new_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_new_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_new_name","","",75,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",75,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",75,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",75,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",75,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",75,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",75,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",75,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",75,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",75,{"inputs":[],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"descriptor_static","","",75,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addrangepartition"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addrangepartition"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"default","","",76,{"inputs":[],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"new","","",76,{"inputs":[],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"default_instance","","",76,{"inputs":[],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"clear_range_bounds","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"has_range_bounds","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_range_bounds","","",76,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":null}],[11,"mut_range_bounds","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"take_range_bounds","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"get_range_bounds","","",76,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"is_initialized","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",76,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",76,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",76,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",76,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",76,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",76,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",76,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",76,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",76,{"inputs":[],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"descriptor_static","","",76,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",76,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_droprangepartition"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_droprangepartition"}],"output":{"name":"bool"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"new","","",77,{"inputs":[],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"default_instance","","",77,{"inputs":[],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"clear_range_bounds","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"has_range_bounds","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_range_bounds","","",77,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":null}],[11,"mut_range_bounds","","",77,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"take_range_bounds","","",77,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"get_range_bounds","","",77,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"is_initialized","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",77,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",77,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",77,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",77,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",77,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",77,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",77,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",77,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",77,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",77,{"inputs":[],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"descriptor_static","","",77,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_step"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_step"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_step"}}],[11,"default","","",78,{"inputs":[],"output":{"name":"altertablerequestpb_step"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"altertablerequestpb_step"}}],[11,"default_instance","","",78,{"inputs":[],"output":{"name":"altertablerequestpb_step"}}],[11,"clear_field_type","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_steptype"}],"output":null}],[11,"get_field_type","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_steptype"}}],[11,"clear_add_column","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_add_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_add_column","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addcolumn"}],"output":null}],[11,"mut_add_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"take_add_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"get_add_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addcolumn"}}],[11,"clear_drop_column","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_drop_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_drop_column","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_dropcolumn"}],"output":null}],[11,"mut_drop_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"take_drop_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"get_drop_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_dropcolumn"}}],[11,"clear_rename_column","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_rename_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rename_column","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_renamecolumn"}],"output":null}],[11,"mut_rename_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"take_rename_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"get_rename_column","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_renamecolumn"}}],[11,"clear_add_range_partition","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_add_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_add_range_partition","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_addrangepartition"}],"output":null}],[11,"mut_add_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"take_add_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"get_add_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_addrangepartition"}}],[11,"clear_drop_range_partition","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"has_drop_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_drop_range_partition","","",78,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_droprangepartition"}],"output":null}],[11,"mut_drop_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"take_drop_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"get_drop_range_partition","","",78,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_droprangepartition"}}],[11,"is_initialized","","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",78,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",78,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",78,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",78,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",78,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",78,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",78,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",78,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",78,{"inputs":[],"output":{"name":"altertablerequestpb_step"}}],[11,"descriptor_static","","",78,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"altertablerequestpb_steptype"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"altertablerequestpb_steptype"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"value","","",40,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",40,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",40,null],[11,"enum_descriptor_static","","",40,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"altertableresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"altertableresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"altertableresponsepb"}}],[11,"default","","",79,{"inputs":[],"output":{"name":"altertableresponsepb"}}],[11,"new","","",79,{"inputs":[],"output":{"name":"altertableresponsepb"}}],[11,"default_instance","","",79,{"inputs":[],"output":{"name":"altertableresponsepb"}}],[11,"clear_error","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",79,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",79,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",79,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",79,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_schema_version","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema_version","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema_version","","",79,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_schema_version","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_table_id","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",79,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",79,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",79,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",79,null],[11,"is_initialized","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",79,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",79,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",79,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",79,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",79,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",79,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",79,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",79,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",79,{"inputs":[],"output":{"name":"altertableresponsepb"}}],[11,"descriptor_static","","",79,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"isaltertabledonerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"isaltertabledonerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"isaltertabledonerequestpb"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"isaltertabledonerequestpb"}}],[11,"new","","",80,{"inputs":[],"output":{"name":"isaltertabledonerequestpb"}}],[11,"default_instance","","",80,{"inputs":[],"output":{"name":"isaltertabledonerequestpb"}}],[11,"clear_table","","",80,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",80,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",80,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"is_initialized","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",80,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",80,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",80,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",80,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",80,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",80,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",80,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",80,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",80,{"inputs":[],"output":{"name":"isaltertabledonerequestpb"}}],[11,"descriptor_static","","",80,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",80,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"isaltertabledoneresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"isaltertabledoneresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"isaltertabledoneresponsepb"}}],[11,"default","","",81,{"inputs":[],"output":{"name":"isaltertabledoneresponsepb"}}],[11,"new","","",81,{"inputs":[],"output":{"name":"isaltertabledoneresponsepb"}}],[11,"default_instance","","",81,{"inputs":[],"output":{"name":"isaltertabledoneresponsepb"}}],[11,"clear_error","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",81,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",81,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_schema_version","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema_version","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema_version","","",81,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_schema_version","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_done","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"has_done","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_done","","",81,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_done","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",81,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",81,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",81,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",81,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",81,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",81,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",81,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",81,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",81,{"inputs":[],"output":{"name":"isaltertabledoneresponsepb"}}],[11,"descriptor_static","","",81,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"gettableschemarequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"self"},{"name":"gettableschemarequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"gettableschemarequestpb"}}],[11,"default","","",82,{"inputs":[],"output":{"name":"gettableschemarequestpb"}}],[11,"new","","",82,{"inputs":[],"output":{"name":"gettableschemarequestpb"}}],[11,"default_instance","","",82,{"inputs":[],"output":{"name":"gettableschemarequestpb"}}],[11,"clear_table","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table","","",82,{"inputs":[{"name":"self"},{"name":"tableidentifierpb"}],"output":null}],[11,"mut_table","","",82,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"take_table","","",82,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"get_table","","",82,{"inputs":[{"name":"self"}],"output":{"name":"tableidentifierpb"}}],[11,"is_initialized","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",82,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",82,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",82,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",82,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",82,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",82,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",82,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",82,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",82,{"inputs":[],"output":{"name":"gettableschemarequestpb"}}],[11,"descriptor_static","","",82,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"gettableschemaresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"gettableschemaresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"gettableschemaresponsepb"}}],[11,"default","","",83,{"inputs":[],"output":{"name":"gettableschemaresponsepb"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"gettableschemaresponsepb"}}],[11,"default_instance","","",83,{"inputs":[],"output":{"name":"gettableschemaresponsepb"}}],[11,"clear_error","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",83,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_schema","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",83,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_partition_schema","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_schema","","",83,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":null}],[11,"mut_partition_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"take_partition_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"get_partition_schema","","",83,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"clear_num_replicas","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_replicas","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_replicas","","",83,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_replicas","","",83,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_table_id","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",83,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",83,null],[11,"clear_create_table_done","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_create_table_done","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_create_table_done","","",83,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_create_table_done","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_table_name","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_name","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_name","","",83,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_table_name","","",83,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_table_name","","",83,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_table_name","","",83,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",83,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",83,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",83,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",83,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",83,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",83,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",83,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",83,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",83,{"inputs":[],"output":{"name":"gettableschemaresponsepb"}}],[11,"descriptor_static","","",83,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"listtabletserversrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"listtabletserversrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"listtabletserversrequestpb"}}],[11,"default","","",84,{"inputs":[],"output":{"name":"listtabletserversrequestpb"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"listtabletserversrequestpb"}}],[11,"default_instance","","",84,{"inputs":[],"output":{"name":"listtabletserversrequestpb"}}],[11,"is_initialized","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",84,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",84,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",84,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",84,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",84,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"listtabletserversrequestpb"}}],[11,"descriptor_static","","",84,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"listtabletserversresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",85,{"inputs":[{"name":"self"},{"name":"listtabletserversresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"listtabletserversresponsepb"}}],[11,"default","","",85,{"inputs":[],"output":{"name":"listtabletserversresponsepb"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"listtabletserversresponsepb"}}],[11,"default_instance","","",85,{"inputs":[],"output":{"name":"listtabletserversresponsepb"}}],[11,"clear_error","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",85,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",85,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"clear_servers","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"set_servers","","",85,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_servers","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_servers","","",85,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_servers","","",85,null],[11,"is_initialized","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",85,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",85,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",85,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",85,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",85,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",85,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",85,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",85,{"inputs":[],"output":{"name":"listtabletserversresponsepb"}}],[11,"descriptor_static","","",85,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"listtabletserversresponsepb_entry"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"listtabletserversresponsepb_entry"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"listtabletserversresponsepb_entry"}}],[11,"default","","",86,{"inputs":[],"output":{"name":"listtabletserversresponsepb_entry"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"listtabletserversresponsepb_entry"}}],[11,"default_instance","","",86,{"inputs":[],"output":{"name":"listtabletserversresponsepb_entry"}}],[11,"clear_instance_id","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_instance_id","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_instance_id","","",86,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":null}],[11,"mut_instance_id","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"take_instance_id","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"get_instance_id","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"clear_registration","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_registration","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_registration","","",86,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":null}],[11,"mut_registration","","",86,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"take_registration","","",86,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"get_registration","","",86,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"clear_millis_since_heartbeat","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"has_millis_since_heartbeat","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_millis_since_heartbeat","","",86,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_millis_since_heartbeat","","",86,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",86,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",86,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",86,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",86,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",86,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",86,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",86,{"inputs":[],"output":{"name":"listtabletserversresponsepb_entry"}}],[11,"descriptor_static","","",86,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"getmasterregistrationrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"getmasterregistrationrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"getmasterregistrationrequestpb"}}],[11,"default","","",87,{"inputs":[],"output":{"name":"getmasterregistrationrequestpb"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"getmasterregistrationrequestpb"}}],[11,"default_instance","","",87,{"inputs":[],"output":{"name":"getmasterregistrationrequestpb"}}],[11,"is_initialized","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",87,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",87,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",87,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",87,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",87,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",87,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",87,{"inputs":[],"output":{"name":"getmasterregistrationrequestpb"}}],[11,"descriptor_static","","",87,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"getmasterregistrationresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"getmasterregistrationresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"getmasterregistrationresponsepb"}}],[11,"default","","",88,{"inputs":[],"output":{"name":"getmasterregistrationresponsepb"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"getmasterregistrationresponsepb"}}],[11,"default_instance","","",88,{"inputs":[],"output":{"name":"getmasterregistrationresponsepb"}}],[11,"clear_instance_id","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_instance_id","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_instance_id","","",88,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":null}],[11,"mut_instance_id","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"take_instance_id","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"get_instance_id","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"clear_registration","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_registration","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_registration","","",88,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":null}],[11,"mut_registration","","",88,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"take_registration","","",88,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"get_registration","","",88,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"clear_role","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_role","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_role","","",88,{"inputs":[{"name":"self"},{"name":"raftpeerpb_role"}],"output":null}],[11,"get_role","","",88,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_role"}}],[11,"clear_error","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",88,{"inputs":[{"name":"self"},{"name":"mastererrorpb"}],"output":null}],[11,"mut_error","","",88,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"take_error","","",88,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"get_error","","",88,{"inputs":[{"name":"self"}],"output":{"name":"mastererrorpb"}}],[11,"is_initialized","","",88,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",88,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",88,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",88,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",88,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",88,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",88,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",88,{"inputs":[],"output":{"name":"getmasterregistrationresponsepb"}}],[11,"descriptor_static","","",88,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"listmastersrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"listmastersrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"listmastersrequestpb"}}],[11,"default","","",89,{"inputs":[],"output":{"name":"listmastersrequestpb"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"listmastersrequestpb"}}],[11,"default_instance","","",89,{"inputs":[],"output":{"name":"listmastersrequestpb"}}],[11,"is_initialized","","",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",89,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",89,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",89,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",89,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",89,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",89,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",89,{"inputs":[],"output":{"name":"listmastersrequestpb"}}],[11,"descriptor_static","","",89,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"listmastersresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"listmastersresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"listmastersresponsepb"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"listmastersresponsepb"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"listmastersresponsepb"}}],[11,"default_instance","","",90,{"inputs":[],"output":{"name":"listmastersresponsepb"}}],[11,"clear_masters","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"set_masters","","",90,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_masters","","",90,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_masters","","",90,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_masters","","",90,null],[11,"clear_error","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",90,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_error","","",90,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_error","","",90,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_error","","",90,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"is_initialized","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",90,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",90,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",90,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",90,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",90,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",90,{"inputs":[],"output":{"name":"listmastersresponsepb"}}],[11,"descriptor_static","","",90,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"masterfeatures"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"masterfeatures"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"value","","",41,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",41,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",41,null],[11,"enum_descriptor_static","","",41,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"opid","kudu_pb","",null,null],[3,"OpId","kudu_pb::opid","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"opid"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"opid"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"opid"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"opid"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"opid"}}],[11,"default_instance","","",91,{"inputs":[],"output":{"name":"opid"}}],[11,"clear_term","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"has_term","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_term","","",91,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_term","","",91,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_index","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"has_index","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_index","","",91,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_index","","",91,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",91,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",91,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",91,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",91,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",91,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",91,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",91,{"inputs":[],"output":{"name":"opid"}}],[11,"descriptor_static","","",91,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"rpc_header","kudu_pb","",null,null],[3,"UserInformationPB","kudu_pb::rpc_header","",null,null],[3,"ConnectionContextPB","","",null,null],[3,"SaslMessagePB","","",null,null],[3,"SaslMessagePB_SaslAuth","","",null,null],[3,"RemoteMethodPB","","",null,null],[3,"RequestIdPB","","",null,null],[3,"RequestHeader","","",null,null],[3,"ResponseHeader","","",null,null],[3,"ErrorStatusPB","","",null,null],[4,"SaslMessagePB_SaslState","","",null,null],[13,"UNKNOWN","","",92,null],[13,"SUCCESS","","",92,null],[13,"NEGOTIATE","","",92,null],[13,"INITIATE","","",92,null],[13,"CHALLENGE","","",92,null],[13,"RESPONSE","","",92,null],[4,"ErrorStatusPB_RpcErrorCodePB","","",null,null],[13,"FATAL_UNKNOWN","","",93,null],[13,"ERROR_APPLICATION","","",93,null],[13,"ERROR_NO_SUCH_METHOD","","",93,null],[13,"ERROR_NO_SUCH_SERVICE","","",93,null],[13,"ERROR_SERVER_TOO_BUSY","","",93,null],[13,"ERROR_INVALID_REQUEST","","",93,null],[13,"ERROR_REQUEST_STALE","","",93,null],[13,"FATAL_SERVER_SHUTTING_DOWN","","",93,null],[13,"FATAL_INVALID_RPC_HEADER","","",93,null],[13,"FATAL_DESERIALIZING_REQUEST","","",93,null],[13,"FATAL_VERSION_MISMATCH","","",93,null],[13,"FATAL_UNAUTHORIZED","","",93,null],[4,"RpcFeatureFlag","","",null,null],[13,"UNKNOWN","","",94,null],[13,"APPLICATION_FEATURE_FLAGS","","",94,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"userinformationpb"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"userinformationpb"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"userinformationpb"}}],[11,"default","","",95,{"inputs":[],"output":{"name":"userinformationpb"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"userinformationpb"}}],[11,"default_instance","","",95,{"inputs":[],"output":{"name":"userinformationpb"}}],[11,"clear_effective_user","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"has_effective_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_effective_user","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_effective_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_effective_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_effective_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_real_user","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"has_real_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_real_user","","",95,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_real_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_real_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_real_user","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",95,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",95,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",95,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",95,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",95,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",95,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",95,{"inputs":[],"output":{"name":"userinformationpb"}}],[11,"descriptor_static","","",95,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"connectioncontextpb"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"connectioncontextpb"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"connectioncontextpb"}}],[11,"default","","",96,{"inputs":[],"output":{"name":"connectioncontextpb"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"connectioncontextpb"}}],[11,"default_instance","","",96,{"inputs":[],"output":{"name":"connectioncontextpb"}}],[11,"clear_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"has_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"},{"name":"userinformationpb"}],"output":null}],[11,"mut_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"}],"output":{"name":"userinformationpb"}}],[11,"take_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"}],"output":{"name":"userinformationpb"}}],[11,"get_DEPRECATED_user_info","","",96,{"inputs":[{"name":"self"}],"output":{"name":"userinformationpb"}}],[11,"is_initialized","","",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",96,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",96,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",96,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",96,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",96,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",96,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",96,{"inputs":[],"output":{"name":"connectioncontextpb"}}],[11,"descriptor_static","","",96,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"saslmessagepb"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"saslmessagepb"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"saslmessagepb"}}],[11,"default","","",97,{"inputs":[],"output":{"name":"saslmessagepb"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"saslmessagepb"}}],[11,"default_instance","","",97,{"inputs":[],"output":{"name":"saslmessagepb"}}],[11,"clear_supported_features","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_supported_features","","",97,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_supported_features","","",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_supported_features","","",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_supported_features","","",97,null],[11,"clear_state","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state","","",97,{"inputs":[{"name":"self"},{"name":"saslmessagepb_saslstate"}],"output":null}],[11,"get_state","","",97,{"inputs":[{"name":"self"}],"output":{"name":"saslmessagepb_saslstate"}}],[11,"clear_token","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"has_token","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_token","","",97,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_token","","",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_token","","",97,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_token","","",97,null],[11,"clear_auths","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"set_auths","","",97,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_auths","","",97,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_auths","","",97,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_auths","","",97,null],[11,"is_initialized","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",97,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",97,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",97,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",97,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",97,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",97,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",97,{"inputs":[],"output":{"name":"saslmessagepb"}}],[11,"descriptor_static","","",97,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"saslmessagepb_saslauth"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"saslmessagepb_saslauth"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"saslmessagepb_saslauth"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"saslmessagepb_saslauth"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"saslmessagepb_saslauth"}}],[11,"default_instance","","",98,{"inputs":[],"output":{"name":"saslmessagepb_saslauth"}}],[11,"clear_method","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"has_method","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_method","","",98,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_method","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_method","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_method","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_mechanism","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"has_mechanism","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mechanism","","",98,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_mechanism","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_mechanism","","",98,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_mechanism","","",98,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_challenge","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"has_challenge","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_challenge","","",98,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_challenge","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_challenge","","",98,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_challenge","","",98,null],[11,"is_initialized","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",98,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",98,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",98,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",98,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",98,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",98,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",98,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",98,{"inputs":[],"output":{"name":"saslmessagepb_saslauth"}}],[11,"descriptor_static","","",98,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"saslmessagepb_saslstate"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"saslmessagepb_saslstate"}],"output":{"name":"bool"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"value","","",92,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",92,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",92,null],[11,"enum_descriptor_static","","",92,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",99,{"inputs":[{"name":"self"},{"name":"remotemethodpb"}],"output":{"name":"bool"}}],[11,"ne","","",99,{"inputs":[{"name":"self"},{"name":"remotemethodpb"}],"output":{"name":"bool"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"remotemethodpb"}}],[11,"default","","",99,{"inputs":[],"output":{"name":"remotemethodpb"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"remotemethodpb"}}],[11,"default_instance","","",99,{"inputs":[],"output":{"name":"remotemethodpb"}}],[11,"clear_service_name","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"has_service_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_service_name","","",99,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_service_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_service_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_service_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_method_name","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"has_method_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_method_name","","",99,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_method_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_method_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_method_name","","",99,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",99,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",99,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",99,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",99,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",99,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",99,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",99,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",99,{"inputs":[],"output":{"name":"remotemethodpb"}}],[11,"descriptor_static","","",99,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"requestidpb"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"requestidpb"}],"output":{"name":"bool"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"requestidpb"}}],[11,"default","","",100,{"inputs":[],"output":{"name":"requestidpb"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"requestidpb"}}],[11,"default_instance","","",100,{"inputs":[],"output":{"name":"requestidpb"}}],[11,"clear_client_id","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"has_client_id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_client_id","","",100,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_client_id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_client_id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_client_id","","",100,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_seq_no","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"has_seq_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_seq_no","","",100,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_seq_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_first_incomplete_seq_no","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"has_first_incomplete_seq_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_first_incomplete_seq_no","","",100,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_first_incomplete_seq_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_attempt_no","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"has_attempt_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_attempt_no","","",100,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_attempt_no","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",100,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",100,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",100,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",100,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",100,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",100,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",100,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",100,{"inputs":[],"output":{"name":"requestidpb"}}],[11,"descriptor_static","","",100,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"requestheader"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"requestheader"}],"output":{"name":"bool"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"requestheader"}}],[11,"default","","",101,{"inputs":[],"output":{"name":"requestheader"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"requestheader"}}],[11,"default_instance","","",101,{"inputs":[],"output":{"name":"requestheader"}}],[11,"clear_call_id","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"has_call_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_call_id","","",101,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_call_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_remote_method","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"has_remote_method","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_remote_method","","",101,{"inputs":[{"name":"self"},{"name":"remotemethodpb"}],"output":null}],[11,"mut_remote_method","","",101,{"inputs":[{"name":"self"}],"output":{"name":"remotemethodpb"}}],[11,"take_remote_method","","",101,{"inputs":[{"name":"self"}],"output":{"name":"remotemethodpb"}}],[11,"get_remote_method","","",101,{"inputs":[{"name":"self"}],"output":{"name":"remotemethodpb"}}],[11,"clear_timeout_millis","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"has_timeout_millis","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_timeout_millis","","",101,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_timeout_millis","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_required_feature_flags","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"set_required_feature_flags","","",101,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_required_feature_flags","","",101,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_required_feature_flags","","",101,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_required_feature_flags","","",101,null],[11,"clear_request_id","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"has_request_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_request_id","","",101,{"inputs":[{"name":"self"},{"name":"requestidpb"}],"output":null}],[11,"mut_request_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"requestidpb"}}],[11,"take_request_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"requestidpb"}}],[11,"get_request_id","","",101,{"inputs":[{"name":"self"}],"output":{"name":"requestidpb"}}],[11,"is_initialized","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",101,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",101,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",101,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",101,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",101,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",101,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"requestheader"}}],[11,"descriptor_static","","",101,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"responseheader"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"responseheader"}],"output":{"name":"bool"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"responseheader"}}],[11,"default","","",102,{"inputs":[],"output":{"name":"responseheader"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"responseheader"}}],[11,"default_instance","","",102,{"inputs":[],"output":{"name":"responseheader"}}],[11,"clear_call_id","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"has_call_id","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_call_id","","",102,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_call_id","","",102,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_is_error","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_error","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_error","","",102,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_error","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_sidecar_offsets","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"set_sidecar_offsets","","",102,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_sidecar_offsets","","",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_sidecar_offsets","","",102,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_sidecar_offsets","","",102,null],[11,"is_initialized","","",102,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",102,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",102,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",102,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",102,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",102,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",102,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",102,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",102,{"inputs":[],"output":{"name":"responseheader"}}],[11,"descriptor_static","","",102,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"errorstatuspb"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"errorstatuspb"}],"output":{"name":"bool"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"errorstatuspb"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"errorstatuspb"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"errorstatuspb"}}],[11,"default_instance","","",103,{"inputs":[],"output":{"name":"errorstatuspb"}}],[11,"clear_message","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",103,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message","","",103,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message","","",103,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message","","",103,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_code","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",103,{"inputs":[{"name":"self"},{"name":"errorstatuspb_rpcerrorcodepb"}],"output":null}],[11,"get_code","","",103,{"inputs":[{"name":"self"}],"output":{"name":"errorstatuspb_rpcerrorcodepb"}}],[11,"clear_unsupported_feature_flags","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"set_unsupported_feature_flags","","",103,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_unsupported_feature_flags","","",103,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_unsupported_feature_flags","","",103,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_unsupported_feature_flags","","",103,null],[11,"is_initialized","","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",103,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",103,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",103,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",103,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",103,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",103,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",103,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",103,{"inputs":[],"output":{"name":"errorstatuspb"}}],[11,"descriptor_static","","",103,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"errorstatuspb_rpcerrorcodepb"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"errorstatuspb_rpcerrorcodepb"}],"output":{"name":"bool"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"value","","",93,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",93,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",93,null],[11,"enum_descriptor_static","","",93,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"rpcfeatureflag"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"rpcfeatureflag"}],"output":{"name":"bool"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"value","","",94,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",94,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",94,null],[11,"enum_descriptor_static","","",94,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"tablet","kudu_pb","",null,null],[3,"MemStoreTargetPB","kudu_pb::tablet","",null,null],[3,"OperationResultPB","","",null,null],[3,"TxResultPB","","",null,null],[3,"DeltaStatsPB","","",null,null],[3,"DeltaStatsPB_ColumnStats","","",null,null],[3,"TabletStatusPB","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"memstoretargetpb"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"memstoretargetpb"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"memstoretargetpb"}}],[11,"default","","",104,{"inputs":[],"output":{"name":"memstoretargetpb"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"memstoretargetpb"}}],[11,"default_instance","","",104,{"inputs":[],"output":{"name":"memstoretargetpb"}}],[11,"clear_mrs_id","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"has_mrs_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_mrs_id","","",104,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_mrs_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_rs_id","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"has_rs_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rs_id","","",104,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_rs_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_dms_id","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"has_dms_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_dms_id","","",104,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_dms_id","","",104,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",104,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",104,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",104,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",104,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",104,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",104,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",104,{"inputs":[],"output":{"name":"memstoretargetpb"}}],[11,"descriptor_static","","",104,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"operationresultpb"}],"output":{"name":"bool"}}],[11,"ne","","",105,{"inputs":[{"name":"self"},{"name":"operationresultpb"}],"output":{"name":"bool"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"operationresultpb"}}],[11,"default","","",105,{"inputs":[],"output":{"name":"operationresultpb"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"operationresultpb"}}],[11,"default_instance","","",105,{"inputs":[],"output":{"name":"operationresultpb"}}],[11,"clear_flushed","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"has_flushed","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_flushed","","",105,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_flushed","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_failed_status","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"has_failed_status","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_failed_status","","",105,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_failed_status","","",105,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_failed_status","","",105,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_failed_status","","",105,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"clear_mutated_stores","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"set_mutated_stores","","",105,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_mutated_stores","","",105,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_mutated_stores","","",105,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_mutated_stores","","",105,null],[11,"is_initialized","","",105,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",105,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",105,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",105,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",105,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",105,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",105,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",105,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",105,{"inputs":[],"output":{"name":"operationresultpb"}}],[11,"descriptor_static","","",105,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"txresultpb"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"txresultpb"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"txresultpb"}}],[11,"default","","",106,{"inputs":[],"output":{"name":"txresultpb"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"txresultpb"}}],[11,"default_instance","","",106,{"inputs":[],"output":{"name":"txresultpb"}}],[11,"clear_ops","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"set_ops","","",106,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_ops","","",106,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_ops","","",106,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_ops","","",106,null],[11,"is_initialized","","",106,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",106,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",106,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",106,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",106,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",106,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",106,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",106,{"inputs":[],"output":{"name":"txresultpb"}}],[11,"descriptor_static","","",106,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"deltastatspb"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"deltastatspb"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"deltastatspb"}}],[11,"default","","",107,{"inputs":[],"output":{"name":"deltastatspb"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"deltastatspb"}}],[11,"default_instance","","",107,{"inputs":[],"output":{"name":"deltastatspb"}}],[11,"clear_delete_count","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"has_delete_count","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_delete_count","","",107,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_delete_count","","",107,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_reinsert_count","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"has_reinsert_count","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_reinsert_count","","",107,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_reinsert_count","","",107,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_min_timestamp","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"has_min_timestamp","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_min_timestamp","","",107,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_min_timestamp","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_max_timestamp","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"has_max_timestamp","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_max_timestamp","","",107,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_max_timestamp","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_column_stats","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_stats","","",107,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_column_stats","","",107,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_column_stats","","",107,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_column_stats","","",107,null],[11,"is_initialized","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",107,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",107,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",107,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",107,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",107,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",107,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",107,{"inputs":[],"output":{"name":"deltastatspb"}}],[11,"descriptor_static","","",107,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",108,{"inputs":[{"name":"self"},{"name":"deltastatspb_columnstats"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"deltastatspb_columnstats"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"deltastatspb_columnstats"}}],[11,"default","","",108,{"inputs":[],"output":{"name":"deltastatspb_columnstats"}}],[11,"new","","",108,{"inputs":[],"output":{"name":"deltastatspb_columnstats"}}],[11,"default_instance","","",108,{"inputs":[],"output":{"name":"deltastatspb_columnstats"}}],[11,"clear_col_id","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"has_col_id","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_col_id","","",108,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_col_id","","",108,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_update_count","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"has_update_count","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_update_count","","",108,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_update_count","","",108,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",108,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",108,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",108,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",108,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",108,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",108,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",108,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",108,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",108,{"inputs":[],"output":{"name":"deltastatspb_columnstats"}}],[11,"descriptor_static","","",108,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"tabletstatuspb"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"self"},{"name":"tabletstatuspb"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatuspb"}}],[11,"default","","",109,{"inputs":[],"output":{"name":"tabletstatuspb"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"tabletstatuspb"}}],[11,"default_instance","","",109,{"inputs":[],"output":{"name":"tabletstatuspb"}}],[11,"clear_tablet_id","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",109,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_tablet_id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_tablet_id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_tablet_id","","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_table_name","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_name","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_name","","",109,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_table_name","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_table_name","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_table_name","","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_state","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_state","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_state","","",109,{"inputs":[{"name":"self"},{"name":"tabletstatepb"}],"output":null}],[11,"get_state","","",109,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatepb"}}],[11,"clear_tablet_data_state","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_data_state","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_data_state","","",109,{"inputs":[{"name":"self"},{"name":"tabletdatastate"}],"output":null}],[11,"get_tablet_data_state","","",109,{"inputs":[{"name":"self"}],"output":{"name":"tabletdatastate"}}],[11,"clear_last_status","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_status","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_status","","",109,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_last_status","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_last_status","","",109,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_last_status","","",109,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_start_key","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start_key","","",109,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_start_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_start_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_start_key","","",109,null],[11,"clear_end_key","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end_key","","",109,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_end_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_end_key","","",109,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_end_key","","",109,null],[11,"clear_partition","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition","","",109,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":null}],[11,"mut_partition","","",109,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"take_partition","","",109,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"get_partition","","",109,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"clear_estimated_on_disk_size","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"has_estimated_on_disk_size","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_estimated_on_disk_size","","",109,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_estimated_on_disk_size","","",109,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",109,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",109,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",109,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",109,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",109,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",109,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",109,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",109,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",109,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",109,{"inputs":[],"output":{"name":"tabletstatuspb"}}],[11,"descriptor_static","","",109,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"tablet_metadata","kudu_pb","",null,null],[3,"ColumnDataPB","kudu_pb::tablet_metadata","",null,null],[3,"DeltaDataPB","","",null,null],[3,"RowSetDataPB","","",null,null],[3,"TabletSuperBlockPB","","",null,null],[4,"TabletDataState","","",null,null],[13,"TABLET_DATA_UNKNOWN","","",110,null],[13,"TABLET_DATA_COPYING","","",110,null],[13,"TABLET_DATA_READY","","",110,null],[13,"TABLET_DATA_DELETED","","",110,null],[13,"TABLET_DATA_TOMBSTONED","","",110,null],[4,"TabletStatePB","","",null,null],[13,"UNKNOWN","","",111,null],[13,"NOT_STARTED","","",111,null],[13,"BOOTSTRAPPING","","",111,null],[13,"RUNNING","","",111,null],[13,"FAILED","","",111,null],[13,"QUIESCING","","",111,null],[13,"SHUTDOWN","","",111,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"columndatapb"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"columndatapb"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"columndatapb"}}],[11,"default","","",112,{"inputs":[],"output":{"name":"columndatapb"}}],[11,"new","","",112,{"inputs":[],"output":{"name":"columndatapb"}}],[11,"default_instance","","",112,{"inputs":[],"output":{"name":"columndatapb"}}],[11,"clear_block","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"has_block","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_block","","",112,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":null}],[11,"mut_block","","",112,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"take_block","","",112,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"get_block","","",112,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"clear_column_id","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"has_column_id","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_column_id","","",112,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_column_id","","",112,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",112,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",112,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",112,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",112,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",112,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",112,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",112,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",112,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",112,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",112,{"inputs":[],"output":{"name":"columndatapb"}}],[11,"descriptor_static","","",112,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",112,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"deltadatapb"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"deltadatapb"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"deltadatapb"}}],[11,"default","","",113,{"inputs":[],"output":{"name":"deltadatapb"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"deltadatapb"}}],[11,"default_instance","","",113,{"inputs":[],"output":{"name":"deltadatapb"}}],[11,"clear_block","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"has_block","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_block","","",113,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":null}],[11,"mut_block","","",113,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"take_block","","",113,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"get_block","","",113,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"is_initialized","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",113,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",113,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",113,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",113,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",113,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",113,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",113,{"inputs":[],"output":{"name":"deltadatapb"}}],[11,"descriptor_static","","",113,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"rowsetdatapb"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"rowsetdatapb"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"rowsetdatapb"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"rowsetdatapb"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"rowsetdatapb"}}],[11,"default_instance","","",114,{"inputs":[],"output":{"name":"rowsetdatapb"}}],[11,"clear_id","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_id","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_id","","",114,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_id","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_last_durable_dms_id","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_durable_dms_id","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_durable_dms_id","","",114,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_last_durable_dms_id","","",114,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_columns","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"set_columns","","",114,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_columns","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_columns","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_columns","","",114,null],[11,"clear_redo_deltas","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"set_redo_deltas","","",114,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_redo_deltas","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_redo_deltas","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_redo_deltas","","",114,null],[11,"clear_undo_deltas","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"set_undo_deltas","","",114,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_undo_deltas","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_undo_deltas","","",114,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_undo_deltas","","",114,null],[11,"clear_bloom_block","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_bloom_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_bloom_block","","",114,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":null}],[11,"mut_bloom_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"take_bloom_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"get_bloom_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"clear_adhoc_index_block","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"has_adhoc_index_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_adhoc_index_block","","",114,{"inputs":[{"name":"self"},{"name":"blockidpb"}],"output":null}],[11,"mut_adhoc_index_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"take_adhoc_index_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"get_adhoc_index_block","","",114,{"inputs":[{"name":"self"}],"output":{"name":"blockidpb"}}],[11,"is_initialized","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",114,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",114,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",114,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",114,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",114,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",114,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",114,{"inputs":[],"output":{"name":"rowsetdatapb"}}],[11,"descriptor_static","","",114,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"tabletsuperblockpb"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"tabletsuperblockpb"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"tabletsuperblockpb"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"tabletsuperblockpb"}}],[11,"new","","",115,{"inputs":[],"output":{"name":"tabletsuperblockpb"}}],[11,"default_instance","","",115,{"inputs":[],"output":{"name":"tabletsuperblockpb"}}],[11,"clear_table_id","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_id","","",115,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_table_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_table_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_table_id","","",115,null],[11,"clear_tablet_id","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",115,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",115,null],[11,"clear_last_durable_mrs_id","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_durable_mrs_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_durable_mrs_id","","",115,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_last_durable_mrs_id","","",115,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_start_key","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start_key","","",115,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_start_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_start_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_start_key","","",115,null],[11,"clear_end_key","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end_key","","",115,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_end_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_end_key","","",115,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_end_key","","",115,null],[11,"clear_partition","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition","","",115,{"inputs":[{"name":"self"},{"name":"partitionpb"}],"output":null}],[11,"mut_partition","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"take_partition","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"get_partition","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionpb"}}],[11,"clear_rowsets","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"set_rowsets","","",115,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_rowsets","","",115,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_rowsets","","",115,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_rowsets","","",115,null],[11,"clear_table_name","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_table_name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_table_name","","",115,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_table_name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_table_name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_table_name","","",115,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_schema","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",115,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_schema_version","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema_version","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema_version","","",115,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_schema_version","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_partition_schema","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_schema","","",115,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":null}],[11,"mut_partition_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"take_partition_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"get_partition_schema","","",115,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"clear_tablet_data_state","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_data_state","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_data_state","","",115,{"inputs":[{"name":"self"},{"name":"tabletdatastate"}],"output":null}],[11,"get_tablet_data_state","","",115,{"inputs":[{"name":"self"}],"output":{"name":"tabletdatastate"}}],[11,"clear_orphaned_blocks","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"set_orphaned_blocks","","",115,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_orphaned_blocks","","",115,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_orphaned_blocks","","",115,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_orphaned_blocks","","",115,null],[11,"clear_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"},{"name":"opid"}],"output":null}],[11,"mut_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"}],"output":{"name":"opid"}}],[11,"take_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"}],"output":{"name":"opid"}}],[11,"get_tombstone_last_logged_opid","","",115,{"inputs":[{"name":"self"}],"output":{"name":"opid"}}],[11,"is_initialized","","",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",115,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",115,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",115,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",115,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",115,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",115,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",115,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",115,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",115,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",115,{"inputs":[],"output":{"name":"tabletsuperblockpb"}}],[11,"descriptor_static","","",115,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"tabletdatastate"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"tabletdatastate"}],"output":{"name":"bool"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",110,null],[11,"value","","",110,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",110,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",110,null],[11,"enum_descriptor_static","","",110,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",110,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatepb"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"tabletstatepb"}],"output":{"name":"bool"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",111,null],[11,"value","","",111,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",111,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",111,null],[11,"enum_descriptor_static","","",111,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"tserver","kudu_pb","",null,null],[3,"TabletServerErrorPB","kudu_pb::tserver","",null,null],[3,"PingRequestPB","","",null,null],[3,"PingResponsePB","","",null,null],[3,"WriteRequestPB","","",null,null],[3,"WriteResponsePB","","",null,null],[3,"WriteResponsePB_PerRowErrorPB","","",null,null],[3,"ListTabletsRequestPB","","",null,null],[3,"ListTabletsResponsePB","","",null,null],[3,"ListTabletsResponsePB_StatusAndSchemaPB","","",null,null],[3,"ColumnRangePredicatePB","","",null,null],[3,"ColumnRangePredicateListPB","","",null,null],[3,"NewScanRequestPB","","",null,null],[3,"ScanRequestPB","","",null,null],[3,"ResourceMetricsPB","","",null,null],[3,"ScanResponsePB","","",null,null],[3,"ScannerKeepAliveRequestPB","","",null,null],[3,"ScannerKeepAliveResponsePB","","",null,null],[4,"TabletServerErrorPB_Code","","",null,null],[13,"UNKNOWN_ERROR","","",116,null],[13,"INVALID_SCHEMA","","",116,null],[13,"INVALID_ROW_BLOCK","","",116,null],[13,"INVALID_MUTATION","","",116,null],[13,"MISMATCHED_SCHEMA","","",116,null],[13,"TABLET_NOT_FOUND","","",116,null],[13,"SCANNER_EXPIRED","","",116,null],[13,"INVALID_SCAN_SPEC","","",116,null],[13,"INVALID_CONFIG","","",116,null],[13,"TABLET_ALREADY_EXISTS","","",116,null],[13,"TABLET_HAS_A_NEWER_SCHEMA","","",116,null],[13,"TABLET_NOT_RUNNING","","",116,null],[13,"INVALID_SNAPSHOT","","",116,null],[13,"INVALID_SCAN_CALL_SEQ_ID","","",116,null],[13,"NOT_THE_LEADER","","",116,null],[13,"WRONG_SERVER_UUID","","",116,null],[13,"CAS_FAILED","","",116,null],[13,"ALREADY_INPROGRESS","","",116,null],[13,"THROTTLED","","",116,null],[4,"TabletServerFeatures","","",null,null],[13,"UNKNOWN_FEATURE","","",117,null],[13,"COLUMN_PREDICATES","","",117,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",118,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"tabletservererrorpb"}}],[11,"new","","",118,{"inputs":[],"output":{"name":"tabletservererrorpb"}}],[11,"default_instance","","",118,{"inputs":[],"output":{"name":"tabletservererrorpb"}}],[11,"clear_code","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",118,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb_code"}],"output":null}],[11,"get_code","","",118,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb_code"}}],[11,"clear_status","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"has_status","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_status","","",118,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_status","","",118,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_status","","",118,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_status","","",118,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"is_initialized","","",118,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",118,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",118,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",118,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",118,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",118,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",118,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",118,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",118,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",118,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",118,{"inputs":[],"output":{"name":"tabletservererrorpb"}}],[11,"descriptor_static","","",118,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb_code"}}],[11,"eq","","",116,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb_code"}],"output":{"name":"bool"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"value","","",116,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",116,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",116,null],[11,"enum_descriptor_static","","",116,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",119,{"inputs":[{"name":"self"},{"name":"pingrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"self"},{"name":"pingrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"pingrequestpb"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"default_instance","","",119,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"is_initialized","","",119,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",119,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",119,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",119,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",119,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",119,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",119,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",119,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",119,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",119,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",119,{"inputs":[],"output":{"name":"pingrequestpb"}}],[11,"descriptor_static","","",119,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"pingresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"pingresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"pingresponsepb"}}],[11,"default","","",120,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"new","","",120,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"default_instance","","",120,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"is_initialized","","",120,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",120,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",120,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",120,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",120,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",120,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",120,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",120,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",120,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",120,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",120,{"inputs":[],"output":{"name":"pingresponsepb"}}],[11,"descriptor_static","","",120,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",120,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",121,{"inputs":[{"name":"self"},{"name":"writerequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"self"},{"name":"writerequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"writerequestpb"}}],[11,"default","","",121,{"inputs":[],"output":{"name":"writerequestpb"}}],[11,"new","","",121,{"inputs":[],"output":{"name":"writerequestpb"}}],[11,"default_instance","","",121,{"inputs":[],"output":{"name":"writerequestpb"}}],[11,"clear_tablet_id","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",121,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",121,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",121,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",121,null],[11,"clear_schema","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",121,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",121,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",121,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",121,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_row_operations","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"has_row_operations","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_row_operations","","",121,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":null}],[11,"mut_row_operations","","",121,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"take_row_operations","","",121,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"get_row_operations","","",121,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"clear_external_consistency_mode","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"has_external_consistency_mode","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_external_consistency_mode","","",121,{"inputs":[{"name":"self"},{"name":"externalconsistencymode"}],"output":null}],[11,"get_external_consistency_mode","","",121,{"inputs":[{"name":"self"}],"output":{"name":"externalconsistencymode"}}],[11,"clear_propagated_timestamp","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"has_propagated_timestamp","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_propagated_timestamp","","",121,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_propagated_timestamp","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",121,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",121,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",121,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",121,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",121,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",121,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",121,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",121,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",121,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",121,{"inputs":[],"output":{"name":"writerequestpb"}}],[11,"descriptor_static","","",121,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"writeresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"writeresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"writeresponsepb"}}],[11,"default","","",122,{"inputs":[],"output":{"name":"writeresponsepb"}}],[11,"new","","",122,{"inputs":[],"output":{"name":"writeresponsepb"}}],[11,"default_instance","","",122,{"inputs":[],"output":{"name":"writeresponsepb"}}],[11,"clear_error","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",122,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":null}],[11,"mut_error","","",122,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"take_error","","",122,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"get_error","","",122,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"clear_per_row_errors","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"set_per_row_errors","","",122,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_per_row_errors","","",122,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_per_row_errors","","",122,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_per_row_errors","","",122,null],[11,"clear_timestamp","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"has_timestamp","","",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_timestamp","","",122,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_timestamp","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",122,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",122,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",122,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",122,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",122,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",122,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",122,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",122,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",122,{"inputs":[],"output":{"name":"writeresponsepb"}}],[11,"descriptor_static","","",122,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",122,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"writeresponsepb_perrowerrorpb"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"self"},{"name":"writeresponsepb_perrowerrorpb"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"writeresponsepb_perrowerrorpb"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"writeresponsepb_perrowerrorpb"}}],[11,"new","","",123,{"inputs":[],"output":{"name":"writeresponsepb_perrowerrorpb"}}],[11,"default_instance","","",123,{"inputs":[],"output":{"name":"writeresponsepb_perrowerrorpb"}}],[11,"clear_row_index","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"has_row_index","","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_row_index","","",123,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_row_index","","",123,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_error","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",123,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_error","","",123,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_error","","",123,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_error","","",123,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"is_initialized","","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",123,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",123,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",123,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",123,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",123,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",123,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",123,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",123,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",123,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",123,{"inputs":[],"output":{"name":"writeresponsepb_perrowerrorpb"}}],[11,"descriptor_static","","",123,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",123,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"listtabletsrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"self"},{"name":"listtabletsrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"listtabletsrequestpb"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"listtabletsrequestpb"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"listtabletsrequestpb"}}],[11,"default_instance","","",124,{"inputs":[],"output":{"name":"listtabletsrequestpb"}}],[11,"clear_need_schema_info","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"has_need_schema_info","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_need_schema_info","","",124,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_need_schema_info","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",124,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",124,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",124,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",124,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",124,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",124,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",124,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",124,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",124,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",124,{"inputs":[],"output":{"name":"listtabletsrequestpb"}}],[11,"descriptor_static","","",124,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",125,{"inputs":[{"name":"self"},{"name":"listtabletsresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"self"},{"name":"listtabletsresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"self"}],"output":{"name":"listtabletsresponsepb"}}],[11,"default","","",125,{"inputs":[],"output":{"name":"listtabletsresponsepb"}}],[11,"new","","",125,{"inputs":[],"output":{"name":"listtabletsresponsepb"}}],[11,"default_instance","","",125,{"inputs":[],"output":{"name":"listtabletsresponsepb"}}],[11,"clear_error","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",125,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":null}],[11,"mut_error","","",125,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"take_error","","",125,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"get_error","","",125,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"clear_status_and_schema","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"set_status_and_schema","","",125,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_status_and_schema","","",125,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_status_and_schema","","",125,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_status_and_schema","","",125,null],[11,"is_initialized","","",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",125,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",125,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",125,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",125,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",125,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",125,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",125,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",125,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",125,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",125,{"inputs":[],"output":{"name":"listtabletsresponsepb"}}],[11,"descriptor_static","","",125,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"listtabletsresponsepb_statusandschemapb"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"listtabletsresponsepb_statusandschemapb"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"listtabletsresponsepb_statusandschemapb"}}],[11,"default","","",126,{"inputs":[],"output":{"name":"listtabletsresponsepb_statusandschemapb"}}],[11,"new","","",126,{"inputs":[],"output":{"name":"listtabletsresponsepb_statusandschemapb"}}],[11,"default_instance","","",126,{"inputs":[],"output":{"name":"listtabletsresponsepb_statusandschemapb"}}],[11,"clear_tablet_status","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_status","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_status","","",126,{"inputs":[{"name":"self"},{"name":"tabletstatuspb"}],"output":null}],[11,"mut_tablet_status","","",126,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatuspb"}}],[11,"take_tablet_status","","",126,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatuspb"}}],[11,"get_tablet_status","","",126,{"inputs":[{"name":"self"}],"output":{"name":"tabletstatuspb"}}],[11,"clear_schema","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"has_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_schema","","",126,{"inputs":[{"name":"self"},{"name":"schemapb"}],"output":null}],[11,"mut_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"take_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"get_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"schemapb"}}],[11,"clear_partition_schema","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"has_partition_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_partition_schema","","",126,{"inputs":[{"name":"self"},{"name":"partitionschemapb"}],"output":null}],[11,"mut_partition_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"take_partition_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"get_partition_schema","","",126,{"inputs":[{"name":"self"}],"output":{"name":"partitionschemapb"}}],[11,"is_initialized","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",126,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",126,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",126,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",126,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",126,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",126,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",126,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",126,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",126,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",126,{"inputs":[],"output":{"name":"listtabletsresponsepb_statusandschemapb"}}],[11,"descriptor_static","","",126,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",127,{"inputs":[{"name":"self"},{"name":"columnrangepredicatepb"}],"output":{"name":"bool"}}],[11,"ne","","",127,{"inputs":[{"name":"self"},{"name":"columnrangepredicatepb"}],"output":{"name":"bool"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"columnrangepredicatepb"}}],[11,"default","","",127,{"inputs":[],"output":{"name":"columnrangepredicatepb"}}],[11,"new","","",127,{"inputs":[],"output":{"name":"columnrangepredicatepb"}}],[11,"default_instance","","",127,{"inputs":[],"output":{"name":"columnrangepredicatepb"}}],[11,"clear_column","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"has_column","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_column","","",127,{"inputs":[{"name":"self"},{"name":"columnschemapb"}],"output":null}],[11,"mut_column","","",127,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"take_column","","",127,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"get_column","","",127,{"inputs":[{"name":"self"}],"output":{"name":"columnschemapb"}}],[11,"clear_lower_bound","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lower_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lower_bound","","",127,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_lower_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_lower_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_lower_bound","","",127,null],[11,"clear_inclusive_upper_bound","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"has_inclusive_upper_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_inclusive_upper_bound","","",127,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_inclusive_upper_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_inclusive_upper_bound","","",127,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_inclusive_upper_bound","","",127,null],[11,"is_initialized","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",127,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",127,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",127,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",127,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",127,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",127,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",127,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",127,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",127,{"inputs":[],"output":{"name":"columnrangepredicatepb"}}],[11,"descriptor_static","","",127,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"columnrangepredicatelistpb"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"columnrangepredicatelistpb"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"columnrangepredicatelistpb"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"columnrangepredicatelistpb"}}],[11,"new","","",128,{"inputs":[],"output":{"name":"columnrangepredicatelistpb"}}],[11,"default_instance","","",128,{"inputs":[],"output":{"name":"columnrangepredicatelistpb"}}],[11,"clear_range_predicates","","",128,{"inputs":[{"name":"self"}],"output":null}],[11,"set_range_predicates","","",128,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_range_predicates","","",128,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_range_predicates","","",128,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_range_predicates","","",128,null],[11,"is_initialized","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",128,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",128,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",128,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",128,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",128,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",128,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",128,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",128,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",128,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",128,{"inputs":[],"output":{"name":"columnrangepredicatelistpb"}}],[11,"descriptor_static","","",128,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",128,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",128,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",129,{"inputs":[{"name":"self"},{"name":"newscanrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"self"},{"name":"newscanrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"newscanrequestpb"}}],[11,"new","","",129,{"inputs":[],"output":{"name":"newscanrequestpb"}}],[11,"default_instance","","",129,{"inputs":[],"output":{"name":"newscanrequestpb"}}],[11,"clear_tablet_id","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_tablet_id","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_tablet_id","","",129,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_tablet_id","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_tablet_id","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_tablet_id","","",129,null],[11,"clear_limit","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_limit","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_limit","","",129,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_limit","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_DEPRECATED_range_predicates","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"set_DEPRECATED_range_predicates","","",129,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_DEPRECATED_range_predicates","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_DEPRECATED_range_predicates","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_DEPRECATED_range_predicates","","",129,null],[11,"clear_column_predicates","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"set_column_predicates","","",129,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_column_predicates","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_column_predicates","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_column_predicates","","",129,null],[11,"clear_start_primary_key","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start_primary_key","","",129,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_start_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_start_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_start_primary_key","","",129,null],[11,"clear_stop_primary_key","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_stop_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_stop_primary_key","","",129,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_stop_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_stop_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_stop_primary_key","","",129,null],[11,"clear_projected_columns","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"set_projected_columns","","",129,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_projected_columns","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_projected_columns","","",129,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_projected_columns","","",129,null],[11,"clear_read_mode","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_read_mode","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_read_mode","","",129,{"inputs":[{"name":"self"},{"name":"readmode"}],"output":null}],[11,"get_read_mode","","",129,{"inputs":[{"name":"self"}],"output":{"name":"readmode"}}],[11,"clear_snap_timestamp","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_snap_timestamp","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_snap_timestamp","","",129,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_snap_timestamp","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_propagated_timestamp","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_propagated_timestamp","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_propagated_timestamp","","",129,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_propagated_timestamp","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_cache_blocks","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cache_blocks","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cache_blocks","","",129,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cache_blocks","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_order_mode","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_order_mode","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_order_mode","","",129,{"inputs":[{"name":"self"},{"name":"ordermode"}],"output":null}],[11,"get_order_mode","","",129,{"inputs":[{"name":"self"}],"output":{"name":"ordermode"}}],[11,"clear_last_primary_key","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_primary_key","","",129,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_last_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_last_primary_key","","",129,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_last_primary_key","","",129,null],[11,"is_initialized","","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",129,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",129,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",129,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",129,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",129,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",129,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",129,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",129,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",129,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",129,{"inputs":[],"output":{"name":"newscanrequestpb"}}],[11,"descriptor_static","","",129,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",130,{"inputs":[{"name":"self"},{"name":"scanrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",130,{"inputs":[{"name":"self"},{"name":"scanrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"scanrequestpb"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"scanrequestpb"}}],[11,"new","","",130,{"inputs":[],"output":{"name":"scanrequestpb"}}],[11,"default_instance","","",130,{"inputs":[],"output":{"name":"scanrequestpb"}}],[11,"clear_scanner_id","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"has_scanner_id","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_scanner_id","","",130,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_scanner_id","","",130,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_scanner_id","","",130,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_scanner_id","","",130,null],[11,"clear_new_scan_request","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"has_new_scan_request","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_new_scan_request","","",130,{"inputs":[{"name":"self"},{"name":"newscanrequestpb"}],"output":null}],[11,"mut_new_scan_request","","",130,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"take_new_scan_request","","",130,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"get_new_scan_request","","",130,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"clear_call_seq_id","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"has_call_seq_id","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_call_seq_id","","",130,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_call_seq_id","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_batch_size_bytes","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"has_batch_size_bytes","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_batch_size_bytes","","",130,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_batch_size_bytes","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_close_scanner","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"has_close_scanner","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_close_scanner","","",130,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_close_scanner","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",130,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",130,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",130,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",130,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",130,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",130,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",130,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",130,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",130,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",130,{"inputs":[],"output":{"name":"scanrequestpb"}}],[11,"descriptor_static","","",130,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",130,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",131,{"inputs":[{"name":"self"},{"name":"resourcemetricspb"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"self"},{"name":"resourcemetricspb"}],"output":{"name":"bool"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"default","","",131,{"inputs":[],"output":{"name":"resourcemetricspb"}}],[11,"new","","",131,{"inputs":[],"output":{"name":"resourcemetricspb"}}],[11,"default_instance","","",131,{"inputs":[],"output":{"name":"resourcemetricspb"}}],[11,"clear_cfile_cache_miss_bytes","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cfile_cache_miss_bytes","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cfile_cache_miss_bytes","","",131,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_cfile_cache_miss_bytes","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_cfile_cache_hit_bytes","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cfile_cache_hit_bytes","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cfile_cache_hit_bytes","","",131,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_cfile_cache_hit_bytes","","",131,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",131,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",131,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",131,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",131,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",131,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",131,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",131,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",131,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",131,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",131,{"inputs":[],"output":{"name":"resourcemetricspb"}}],[11,"descriptor_static","","",131,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",131,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"scanresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"scanresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"scanresponsepb"}}],[11,"default","","",132,{"inputs":[],"output":{"name":"scanresponsepb"}}],[11,"new","","",132,{"inputs":[],"output":{"name":"scanresponsepb"}}],[11,"default_instance","","",132,{"inputs":[],"output":{"name":"scanresponsepb"}}],[11,"clear_error","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",132,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":null}],[11,"mut_error","","",132,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"take_error","","",132,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"get_error","","",132,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"clear_scanner_id","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_scanner_id","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_scanner_id","","",132,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_scanner_id","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_scanner_id","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_scanner_id","","",132,null],[11,"clear_has_more_results","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_has_more_results","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_has_more_results","","",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_has_more_results","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_data","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_data","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_data","","",132,{"inputs":[{"name":"self"},{"name":"rowwiserowblockpb"}],"output":null}],[11,"mut_data","","",132,{"inputs":[{"name":"self"}],"output":{"name":"rowwiserowblockpb"}}],[11,"take_data","","",132,{"inputs":[{"name":"self"}],"output":{"name":"rowwiserowblockpb"}}],[11,"get_data","","",132,{"inputs":[{"name":"self"}],"output":{"name":"rowwiserowblockpb"}}],[11,"clear_snap_timestamp","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_snap_timestamp","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_snap_timestamp","","",132,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_snap_timestamp","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_last_primary_key","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_last_primary_key","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_last_primary_key","","",132,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_last_primary_key","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_last_primary_key","","",132,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_last_primary_key","","",132,null],[11,"clear_resource_metrics","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_resource_metrics","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_resource_metrics","","",132,{"inputs":[{"name":"self"},{"name":"resourcemetricspb"}],"output":null}],[11,"mut_resource_metrics","","",132,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"take_resource_metrics","","",132,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"get_resource_metrics","","",132,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"clear_propagated_timestamp","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"has_propagated_timestamp","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_propagated_timestamp","","",132,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_propagated_timestamp","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",132,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",132,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",132,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",132,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",132,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",132,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",132,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",132,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",132,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",132,{"inputs":[],"output":{"name":"scanresponsepb"}}],[11,"descriptor_static","","",132,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"scannerkeepaliverequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"scannerkeepaliverequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"scannerkeepaliverequestpb"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"scannerkeepaliverequestpb"}}],[11,"new","","",133,{"inputs":[],"output":{"name":"scannerkeepaliverequestpb"}}],[11,"default_instance","","",133,{"inputs":[],"output":{"name":"scannerkeepaliverequestpb"}}],[11,"clear_scanner_id","","",133,{"inputs":[{"name":"self"}],"output":null}],[11,"has_scanner_id","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_scanner_id","","",133,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_scanner_id","","",133,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_scanner_id","","",133,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_scanner_id","","",133,null],[11,"is_initialized","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",133,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",133,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",133,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",133,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",133,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",133,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",133,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",133,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",133,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",133,{"inputs":[],"output":{"name":"scannerkeepaliverequestpb"}}],[11,"descriptor_static","","",133,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",133,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"scannerkeepaliveresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"scannerkeepaliveresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"scannerkeepaliveresponsepb"}}],[11,"default","","",134,{"inputs":[],"output":{"name":"scannerkeepaliveresponsepb"}}],[11,"new","","",134,{"inputs":[],"output":{"name":"scannerkeepaliveresponsepb"}}],[11,"default_instance","","",134,{"inputs":[],"output":{"name":"scannerkeepaliveresponsepb"}}],[11,"clear_error","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",134,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":null}],[11,"mut_error","","",134,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"take_error","","",134,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"get_error","","",134,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"is_initialized","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",134,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",134,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",134,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",134,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",134,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",134,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",134,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",134,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",134,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",134,{"inputs":[],"output":{"name":"scannerkeepaliveresponsepb"}}],[11,"descriptor_static","","",134,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",134,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"tabletserverfeatures"}}],[11,"eq","","",117,{"inputs":[{"name":"self"},{"name":"tabletserverfeatures"}],"output":{"name":"bool"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",117,null],[11,"value","","",117,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",117,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",117,null],[11,"enum_descriptor_static","","",117,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"tserver_service","kudu_pb","",null,null],[3,"ChecksumRequestPB","kudu_pb::tserver_service","",null,null],[3,"ContinueChecksumRequestPB","","",null,null],[3,"ChecksumResponsePB","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"checksumrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"checksumrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"checksumrequestpb"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"checksumrequestpb"}}],[11,"new","","",135,{"inputs":[],"output":{"name":"checksumrequestpb"}}],[11,"default_instance","","",135,{"inputs":[],"output":{"name":"checksumrequestpb"}}],[11,"clear_new_request","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"has_new_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_new_request","","",135,{"inputs":[{"name":"self"},{"name":"newscanrequestpb"}],"output":null}],[11,"mut_new_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"take_new_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"get_new_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"newscanrequestpb"}}],[11,"clear_continue_request","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"has_continue_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_continue_request","","",135,{"inputs":[{"name":"self"},{"name":"continuechecksumrequestpb"}],"output":null}],[11,"mut_continue_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"continuechecksumrequestpb"}}],[11,"take_continue_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"continuechecksumrequestpb"}}],[11,"get_continue_request","","",135,{"inputs":[{"name":"self"}],"output":{"name":"continuechecksumrequestpb"}}],[11,"clear_call_seq_id","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"has_call_seq_id","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_call_seq_id","","",135,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_call_seq_id","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_batch_size_bytes","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"has_batch_size_bytes","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_batch_size_bytes","","",135,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"get_batch_size_bytes","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clear_close_scanner","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"has_close_scanner","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_close_scanner","","",135,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_close_scanner","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",135,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",135,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",135,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",135,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",135,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",135,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",135,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",135,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",135,{"inputs":[],"output":{"name":"checksumrequestpb"}}],[11,"descriptor_static","","",135,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",135,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"continuechecksumrequestpb"}],"output":{"name":"bool"}}],[11,"ne","","",136,{"inputs":[{"name":"self"},{"name":"continuechecksumrequestpb"}],"output":{"name":"bool"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"continuechecksumrequestpb"}}],[11,"default","","",136,{"inputs":[],"output":{"name":"continuechecksumrequestpb"}}],[11,"new","","",136,{"inputs":[],"output":{"name":"continuechecksumrequestpb"}}],[11,"default_instance","","",136,{"inputs":[],"output":{"name":"continuechecksumrequestpb"}}],[11,"clear_scanner_id","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"has_scanner_id","","",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_scanner_id","","",136,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_scanner_id","","",136,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_scanner_id","","",136,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_scanner_id","","",136,null],[11,"clear_previous_checksum","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"has_previous_checksum","","",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_previous_checksum","","",136,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_previous_checksum","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"is_initialized","","",136,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",136,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",136,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",136,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",136,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",136,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",136,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",136,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",136,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",136,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",136,{"inputs":[],"output":{"name":"continuechecksumrequestpb"}}],[11,"descriptor_static","","",136,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"checksumresponsepb"}],"output":{"name":"bool"}}],[11,"ne","","",137,{"inputs":[{"name":"self"},{"name":"checksumresponsepb"}],"output":{"name":"bool"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"checksumresponsepb"}}],[11,"default","","",137,{"inputs":[],"output":{"name":"checksumresponsepb"}}],[11,"new","","",137,{"inputs":[],"output":{"name":"checksumresponsepb"}}],[11,"default_instance","","",137,{"inputs":[],"output":{"name":"checksumresponsepb"}}],[11,"clear_error","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",137,{"inputs":[{"name":"self"},{"name":"tabletservererrorpb"}],"output":null}],[11,"mut_error","","",137,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"take_error","","",137,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"get_error","","",137,{"inputs":[{"name":"self"}],"output":{"name":"tabletservererrorpb"}}],[11,"clear_checksum","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_checksum","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_checksum","","",137,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_checksum","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_scanner_id","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_scanner_id","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_scanner_id","","",137,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_scanner_id","","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_scanner_id","","",137,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_scanner_id","","",137,null],[11,"clear_has_more_results","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_has_more_results","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_has_more_results","","",137,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_has_more_results","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_snap_timestamp","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_snap_timestamp","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_snap_timestamp","","",137,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_snap_timestamp","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_rows_checksummed","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_rows_checksummed","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rows_checksummed","","",137,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_rows_checksummed","","",137,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_resource_metrics","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"has_resource_metrics","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_resource_metrics","","",137,{"inputs":[{"name":"self"},{"name":"resourcemetricspb"}],"output":null}],[11,"mut_resource_metrics","","",137,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"take_resource_metrics","","",137,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"get_resource_metrics","","",137,{"inputs":[{"name":"self"}],"output":{"name":"resourcemetricspb"}}],[11,"is_initialized","","",137,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",137,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",137,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",137,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",137,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",137,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",137,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",137,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",137,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",137,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",137,{"inputs":[],"output":{"name":"checksumresponsepb"}}],[11,"descriptor_static","","",137,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"wire_protocol","kudu_pb","",null,null],[3,"AppStatusPB","kudu_pb::wire_protocol","",null,null],[3,"NodeInstancePB","","",null,null],[3,"ServerRegistrationPB","","",null,null],[3,"ServerEntryPB","","",null,null],[3,"RowwiseRowBlockPB","","",null,null],[3,"RowOperationsPB","","",null,null],[4,"AppStatusPB_ErrorCode","","",null,null],[13,"UNKNOWN_ERROR","","",138,null],[13,"OK","","",138,null],[13,"NOT_FOUND","","",138,null],[13,"CORRUPTION","","",138,null],[13,"NOT_SUPPORTED","","",138,null],[13,"INVALID_ARGUMENT","","",138,null],[13,"IO_ERROR","","",138,null],[13,"ALREADY_PRESENT","","",138,null],[13,"RUNTIME_ERROR","","",138,null],[13,"NETWORK_ERROR","","",138,null],[13,"ILLEGAL_STATE","","",138,null],[13,"NOT_AUTHORIZED","","",138,null],[13,"ABORTED","","",138,null],[13,"REMOTE_ERROR","","",138,null],[13,"SERVICE_UNAVAILABLE","","",138,null],[13,"TIMED_OUT","","",138,null],[13,"UNINITIALIZED","","",138,null],[13,"CONFIGURATION_ERROR","","",138,null],[13,"INCOMPLETE","","",138,null],[13,"END_OF_FILE","","",138,null],[4,"RowOperationsPB_Type","","",null,null],[13,"UNKNOWN","","",139,null],[13,"INSERT","","",139,null],[13,"UPDATE","","",139,null],[13,"DELETE","","",139,null],[13,"UPSERT","","",139,null],[13,"SPLIT_ROW","","",139,null],[13,"RANGE_LOWER_BOUND","","",139,null],[13,"RANGE_UPPER_BOUND","","",139,null],[13,"EXCLUSIVE_RANGE_LOWER_BOUND","","",139,null],[13,"INCLUSIVE_RANGE_UPPER_BOUND","","",139,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":{"name":"bool"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"appstatuspb"}}],[11,"new","","",140,{"inputs":[],"output":{"name":"appstatuspb"}}],[11,"default_instance","","",140,{"inputs":[],"output":{"name":"appstatuspb"}}],[11,"clear_code","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"has_code","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_code","","",140,{"inputs":[{"name":"self"},{"name":"appstatuspb_errorcode"}],"output":null}],[11,"get_code","","",140,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb_errorcode"}}],[11,"clear_message","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message","","",140,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_message","","",140,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_message","","",140,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_message","","",140,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_posix_code","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"has_posix_code","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_posix_code","","",140,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_posix_code","","",140,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",140,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",140,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",140,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",140,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",140,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",140,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",140,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",140,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",140,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",140,{"inputs":[],"output":{"name":"appstatuspb"}}],[11,"descriptor_static","","",140,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",140,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb_errorcode"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"appstatuspb_errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",138,null],[11,"value","","",138,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",138,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",138,null],[11,"enum_descriptor_static","","",138,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",141,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":{"name":"bool"}}],[11,"ne","","",141,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":{"name":"bool"}}],[11,"clone","","",141,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"default","","",141,{"inputs":[],"output":{"name":"nodeinstancepb"}}],[11,"new","","",141,{"inputs":[],"output":{"name":"nodeinstancepb"}}],[11,"default_instance","","",141,{"inputs":[],"output":{"name":"nodeinstancepb"}}],[11,"clear_permanent_uuid","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"has_permanent_uuid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_permanent_uuid","","",141,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_permanent_uuid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_permanent_uuid","","",141,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_permanent_uuid","","",141,null],[11,"clear_instance_seqno","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"has_instance_seqno","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_instance_seqno","","",141,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_instance_seqno","","",141,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"is_initialized","","",141,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",141,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",141,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",141,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",141,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",141,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",141,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",141,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",141,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",141,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",141,{"inputs":[],"output":{"name":"nodeinstancepb"}}],[11,"descriptor_static","","",141,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",141,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",142,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":{"name":"bool"}}],[11,"ne","","",142,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":{"name":"bool"}}],[11,"clone","","",142,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"default","","",142,{"inputs":[],"output":{"name":"serverregistrationpb"}}],[11,"new","","",142,{"inputs":[],"output":{"name":"serverregistrationpb"}}],[11,"default_instance","","",142,{"inputs":[],"output":{"name":"serverregistrationpb"}}],[11,"clear_rpc_addresses","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"set_rpc_addresses","","",142,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_rpc_addresses","","",142,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_rpc_addresses","","",142,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_rpc_addresses","","",142,null],[11,"clear_http_addresses","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"set_http_addresses","","",142,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_http_addresses","","",142,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_http_addresses","","",142,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_http_addresses","","",142,null],[11,"clear_software_version","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"has_software_version","","",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_software_version","","",142,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_software_version","","",142,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_software_version","","",142,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_software_version","","",142,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",142,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",142,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",142,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",142,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",142,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",142,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",142,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",142,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",142,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",142,{"inputs":[],"output":{"name":"serverregistrationpb"}}],[11,"descriptor_static","","",142,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",142,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",143,{"inputs":[{"name":"self"},{"name":"serverentrypb"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"self"},{"name":"serverentrypb"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"self"}],"output":{"name":"serverentrypb"}}],[11,"default","","",143,{"inputs":[],"output":{"name":"serverentrypb"}}],[11,"new","","",143,{"inputs":[],"output":{"name":"serverentrypb"}}],[11,"default_instance","","",143,{"inputs":[],"output":{"name":"serverentrypb"}}],[11,"clear_error","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",143,{"inputs":[{"name":"self"},{"name":"appstatuspb"}],"output":null}],[11,"mut_error","","",143,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"take_error","","",143,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"get_error","","",143,{"inputs":[{"name":"self"}],"output":{"name":"appstatuspb"}}],[11,"clear_instance_id","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"has_instance_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_instance_id","","",143,{"inputs":[{"name":"self"},{"name":"nodeinstancepb"}],"output":null}],[11,"mut_instance_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"take_instance_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"get_instance_id","","",143,{"inputs":[{"name":"self"}],"output":{"name":"nodeinstancepb"}}],[11,"clear_registration","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"has_registration","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_registration","","",143,{"inputs":[{"name":"self"},{"name":"serverregistrationpb"}],"output":null}],[11,"mut_registration","","",143,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"take_registration","","",143,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"get_registration","","",143,{"inputs":[{"name":"self"}],"output":{"name":"serverregistrationpb"}}],[11,"clear_role","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"has_role","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_role","","",143,{"inputs":[{"name":"self"},{"name":"raftpeerpb_role"}],"output":null}],[11,"get_role","","",143,{"inputs":[{"name":"self"}],"output":{"name":"raftpeerpb_role"}}],[11,"is_initialized","","",143,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",143,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",143,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",143,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",143,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",143,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",143,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",143,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",143,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",143,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",143,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",143,{"inputs":[],"output":{"name":"serverentrypb"}}],[11,"descriptor_static","","",143,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",143,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",144,{"inputs":[{"name":"self"},{"name":"rowwiserowblockpb"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"self"},{"name":"rowwiserowblockpb"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"rowwiserowblockpb"}}],[11,"default","","",144,{"inputs":[],"output":{"name":"rowwiserowblockpb"}}],[11,"new","","",144,{"inputs":[],"output":{"name":"rowwiserowblockpb"}}],[11,"default_instance","","",144,{"inputs":[],"output":{"name":"rowwiserowblockpb"}}],[11,"clear_num_rows","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"has_num_rows","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_num_rows","","",144,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_num_rows","","",144,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_rows_sidecar","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"has_rows_sidecar","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rows_sidecar","","",144,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_rows_sidecar","","",144,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_indirect_data_sidecar","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"has_indirect_data_sidecar","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_indirect_data_sidecar","","",144,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_indirect_data_sidecar","","",144,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",144,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",144,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",144,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",144,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",144,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",144,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",144,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",144,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",144,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",144,{"inputs":[],"output":{"name":"rowwiserowblockpb"}}],[11,"descriptor_static","","",144,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",144,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",145,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"self"},{"name":"rowoperationspb"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb"}}],[11,"default","","",145,{"inputs":[],"output":{"name":"rowoperationspb"}}],[11,"new","","",145,{"inputs":[],"output":{"name":"rowoperationspb"}}],[11,"default_instance","","",145,{"inputs":[],"output":{"name":"rowoperationspb"}}],[11,"clear_rows","","",145,{"inputs":[{"name":"self"}],"output":null}],[11,"has_rows","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_rows","","",145,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_rows","","",145,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_rows","","",145,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_rows","","",145,null],[11,"clear_indirect_data","","",145,{"inputs":[{"name":"self"}],"output":null}],[11,"has_indirect_data","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_indirect_data","","",145,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_indirect_data","","",145,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_indirect_data","","",145,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_indirect_data","","",145,null],[11,"is_initialized","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",145,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",145,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",145,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",145,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",145,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",145,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",145,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",145,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",145,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",145,{"inputs":[],"output":{"name":"rowoperationspb"}}],[11,"descriptor_static","","",145,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",145,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",145,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"rowoperationspb_type"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"rowoperationspb_type"}],"output":{"name":"bool"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",139,null],[11,"value","","",139,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",139,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",139,null],[11,"enum_descriptor_static","","",139,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}]],"paths":[[4,"ScanTokenPB_Feature"],[3,"ScanTokenPB"],[4,"PartitionSchemaPB_ColumnIdentifierPB_oneof_identifier"],[4,"PartitionSchemaPB_HashBucketSchemaPB_HashAlgorithm"],[4,"ColumnPredicatePB_oneof_predicate"],[4,"DataType"],[4,"EncodingType"],[4,"CompressionType"],[4,"ExternalConsistencyMode"],[4,"ReadMode"],[4,"OrderMode"],[3,"ColumnSchemaPB"],[3,"SchemaPB"],[3,"HostPortPB"],[3,"PartitionSchemaPB"],[3,"PartitionSchemaPB_ColumnIdentifierPB"],[3,"PartitionSchemaPB_RangeSchemaPB"],[3,"PartitionSchemaPB_HashBucketSchemaPB"],[3,"PartitionPB"],[3,"ColumnPredicatePB"],[3,"ColumnPredicatePB_Range"],[3,"ColumnPredicatePB_Equality"],[3,"ColumnPredicatePB_InList"],[3,"ColumnPredicatePB_IsNotNull"],[4,"RaftPeerPB_Role"],[4,"RaftPeerPB_MemberType"],[4,"ConsensusConfigType"],[3,"RaftPeerPB"],[3,"RaftConfigPB"],[3,"ConsensusStatePB"],[3,"ConsensusMetadataPB"],[4,"BlockRecordType"],[3,"InstanceMetadataPB"],[3,"PathSetPB"],[3,"PathInstanceMetadataPB"],[3,"BlockIdPB"],[3,"BlockRecordPB"],[4,"MasterErrorPB_Code"],[4,"SysTabletsEntryPB_State"],[4,"SysTablesEntryPB_State"],[4,"AlterTableRequestPB_StepType"],[4,"MasterFeatures"],[3,"MasterErrorPB"],[3,"TSToMasterCommonPB"],[3,"TableIdentifierPB"],[3,"SysTabletsEntryPB"],[3,"SysTablesEntryPB"],[3,"PingRequestPB"],[3,"PingResponsePB"],[3,"ReportedTabletPB"],[3,"TabletReportPB"],[3,"ReportedTabletUpdatesPB"],[3,"TabletReportUpdatesPB"],[3,"TSHeartbeatRequestPB"],[3,"TSHeartbeatResponsePB"],[3,"TabletLocationsPB"],[3,"TabletLocationsPB_ReplicaPB"],[3,"TSInfoPB"],[3,"GetTabletLocationsRequestPB"],[3,"GetTabletLocationsResponsePB"],[3,"GetTabletLocationsResponsePB_Error"],[3,"CreateTableRequestPB"],[3,"CreateTableResponsePB"],[3,"IsCreateTableDoneRequestPB"],[3,"IsCreateTableDoneResponsePB"],[3,"DeleteTableRequestPB"],[3,"DeleteTableResponsePB"],[3,"ListTablesRequestPB"],[3,"ListTablesResponsePB"],[3,"ListTablesResponsePB_TableInfo"],[3,"GetTableLocationsRequestPB"],[3,"GetTableLocationsResponsePB"],[3,"AlterTableRequestPB"],[3,"AlterTableRequestPB_AddColumn"],[3,"AlterTableRequestPB_DropColumn"],[3,"AlterTableRequestPB_RenameColumn"],[3,"AlterTableRequestPB_AddRangePartition"],[3,"AlterTableRequestPB_DropRangePartition"],[3,"AlterTableRequestPB_Step"],[3,"AlterTableResponsePB"],[3,"IsAlterTableDoneRequestPB"],[3,"IsAlterTableDoneResponsePB"],[3,"GetTableSchemaRequestPB"],[3,"GetTableSchemaResponsePB"],[3,"ListTabletServersRequestPB"],[3,"ListTabletServersResponsePB"],[3,"ListTabletServersResponsePB_Entry"],[3,"GetMasterRegistrationRequestPB"],[3,"GetMasterRegistrationResponsePB"],[3,"ListMastersRequestPB"],[3,"ListMastersResponsePB"],[3,"OpId"],[4,"SaslMessagePB_SaslState"],[4,"ErrorStatusPB_RpcErrorCodePB"],[4,"RpcFeatureFlag"],[3,"UserInformationPB"],[3,"ConnectionContextPB"],[3,"SaslMessagePB"],[3,"SaslMessagePB_SaslAuth"],[3,"RemoteMethodPB"],[3,"RequestIdPB"],[3,"RequestHeader"],[3,"ResponseHeader"],[3,"ErrorStatusPB"],[3,"MemStoreTargetPB"],[3,"OperationResultPB"],[3,"TxResultPB"],[3,"DeltaStatsPB"],[3,"DeltaStatsPB_ColumnStats"],[3,"TabletStatusPB"],[4,"TabletDataState"],[4,"TabletStatePB"],[3,"ColumnDataPB"],[3,"DeltaDataPB"],[3,"RowSetDataPB"],[3,"TabletSuperBlockPB"],[4,"TabletServerErrorPB_Code"],[4,"TabletServerFeatures"],[3,"TabletServerErrorPB"],[3,"PingRequestPB"],[3,"PingResponsePB"],[3,"WriteRequestPB"],[3,"WriteResponsePB"],[3,"WriteResponsePB_PerRowErrorPB"],[3,"ListTabletsRequestPB"],[3,"ListTabletsResponsePB"],[3,"ListTabletsResponsePB_StatusAndSchemaPB"],[3,"ColumnRangePredicatePB"],[3,"ColumnRangePredicateListPB"],[3,"NewScanRequestPB"],[3,"ScanRequestPB"],[3,"ResourceMetricsPB"],[3,"ScanResponsePB"],[3,"ScannerKeepAliveRequestPB"],[3,"ScannerKeepAliveResponsePB"],[3,"ChecksumRequestPB"],[3,"ContinueChecksumRequestPB"],[3,"ChecksumResponsePB"],[4,"AppStatusPB_ErrorCode"],[4,"RowOperationsPB_Type"],[3,"AppStatusPB"],[3,"NodeInstancePB"],[3,"ServerRegistrationPB"],[3,"ServerEntryPB"],[3,"RowwiseRowBlockPB"],[3,"RowOperationsPB"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing operations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create","lazy_static","",null,null],[14,"lazy_static","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["lazycell"] = {"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`, but with frozen contents.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with frozen contents.",null,null],[3,"AtomicLazyCell","","A lazily filled `Cell`, with frozen contents.",null,null],[11,"new","","Creates a new, empty, `LazyCell`.",0,{"inputs":[],"output":{"name":"lazycell"}}],[11,"fill","","Put a value into this cell.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,{"inputs":[],"output":{"name":"atomiclazycell"}}],[11,"fill","","Put a value into this cell.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"filled","","Test whether this cell has been previously filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["mio"] = {"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"PollOpt","mio","Configures readiness polling behavior for a given `Evented` value.",null,null],[3,"Ready","","A set of readiness events returned by `Poll`.",null,null],[3,"Event","","An readiness event returned by `Poll`.",null,null],[3,"IoVec","","",null,null],[3,"Poll","","Polls for readiness events on all registered values.",null,null],[3,"Events","","A buffer for I/O events to get placed into, passed to `Poll::poll`.",null,null],[3,"EventsIter","","Iterate an Events structure",null,null],[3,"Registration","","Handle to a Poll registration. Used for registering custom types for event notifications.",null,null],[3,"SetReadiness","","Used to update readiness for an associated `Registration`. `SetReadiness` is `Sync` which allows it to be updated across threads.",null,null],[3,"Token","","Used to identify which `Evented` value is associated with an `Event` notification returned by `Poll`.",null,null],[12,"0","","",0,null],[5,"would_block","","Returns a std `WouldBlock` error without allocating",null,{"inputs":[],"output":{"name":"error"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"ordering"}}],[11,"edge","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"empty","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"level","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"oneshot","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"urgent","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"all","","",1,{"inputs":[],"output":{"name":"pollopt"}}],[11,"is_edge","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_level","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_oneshot","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_urgent","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bits","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"bool"}}],[11,"insert","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"remove","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":null}],[11,"bitor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitxor","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"bitand","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"pollopt"}],"output":{"name":"pollopt"}}],[11,"not","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pollopt"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ordering"}}],[11,"none","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"readable","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"writable","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"error","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"hup","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"all","","",2,{"inputs":[],"output":{"name":"ready"}}],[11,"is_none","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_readable","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_writable","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_hup","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"insert","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":null}],[11,"remove","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":null}],[11,"bits","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"contains","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"bool"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ready"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ready"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ready"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"ready"}}],[11,"not","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"event"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Event.",3,{"inputs":[{"name":"ready"},{"name":"token"}],"output":{"name":"event"}}],[11,"kind","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"token","","",3,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"as_bytes","","",4,null],[11,"as_mut_bytes","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setreadiness"}}],[11,"new","","Return a new `Poll` handle using a default configuration.",6,{"inputs":[],"output":{"name":"result"}}],[11,"register","","Register an `Evented` handle with the `Poll` instance.",6,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",6,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",6,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"poll","","Block the current thread and wait until any `Evented` values registered with the `Poll` instance are ready or the given timeout has elapsed.",6,{"inputs":[{"name":"self"},{"name":"events"},{"name":"option"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_capacity","","Create a net blank set of events capable of holding up to `capacity` events.",7,{"inputs":[{"name":"usize"}],"output":{"name":"events"}}],[11,"get","","Returns the `idx`-th event.",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"len","","Returns how many events this buffer contains.",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether this buffer contains 0 events.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"eventsiter"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new `Registration` associated with the given `Poll` instance. The returned `Registration` will be associated with this `Poll` for its entire lifetime.",9,null],[11,"update","","",9,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",9,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"readiness","","",5,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[11,"set_readiness","","",5,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"token"}}],[0,"channel","","Thread safe communication channel implementing `Evented`",null,null],[3,"SenderCtl","mio::channel","Tracks messages sent on a channel in order to update readiness.",null,null],[3,"ReceiverCtl","","Tracks messages received on a channel in order to track readiness.",null,null],[3,"Sender","","",null,null],[3,"SyncSender","","",null,null],[3,"Receiver","","",null,null],[4,"SendError","","",null,null],[13,"Io","","",10,null],[13,"Disconnected","","",10,null],[4,"TrySendError","","",null,null],[13,"Io","","",11,null],[13,"Full","","",11,null],[13,"Disconnected","","",11,null],[5,"channel","","Creates a new asynchronous channel, where the `Receiver` can be registered with `Poll`.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel where the `Receiver` can be registered with `Poll`.",null,null],[5,"ctl_pair","","",null,null],[11,"send","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"send","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"syncsender"}}],[11,"try_recv","","",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",14,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",14,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",14,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"inc","","Call to track that a message has been sent",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"senderctl"}}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"dec","","",16,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",16,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",16,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",16,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"senderror"}}],[11,"from","","",11,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"from","","",11,{"inputs":[{"name":"senderror"}],"output":{"name":"trysenderror"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"trysenderror"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"timer","mio","Timer optimized for I/O related operations",null,null],[3,"Timer","mio::timer","",null,null],[3,"Builder","","",null,null],[3,"Timeout","","",null,null],[3,"TimerError","","",null,null],[4,"TimerErrorKind","","",null,null],[13,"TimerOverflow","","",17,null],[6,"Result","","",null,null],[6,"TimerResult","","",null,null],[6,"OldTimerResult","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"timeout"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"tick_duration","","",20,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"builder"}}],[11,"num_slots","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"capacity","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"timer"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"builder"}}],[11,"set_timeout","","",21,{"inputs":[{"name":"self"},{"name":"duration"},{"name":"t"}],"output":{"name":"result"}}],[11,"cancel_timeout","","",21,{"inputs":[{"name":"self"},{"name":"timeout"}],"output":{"name":"option"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"timer"}}],[11,"register","","",21,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",21,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",21,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"deprecated","mio","EventLoop and other deprecated types",null,null],[4,"Shutdown","mio::deprecated","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut down. All currently blocked and future reads will return `Ok(0)`.",22,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut down. All currently blocked and future writes will return an error.",22,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",22,null],[3,"EventLoop","","Single threaded IO event loop.",null,null],[3,"EventLoopBuilder","","",null,null],[3,"Sender","","Sends messages to the EventLoop from other threads.",null,null],[4,"NotifyError","","",null,null],[13,"Io","","",23,null],[13,"Full","","",23,null],[13,"Closed","","",23,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"eventloopbuilder"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"eventloopbuilder"}}],[11,"new","","Construct a new `EventLoopBuilder` with the default configuration values.",24,{"inputs":[],"output":{"name":"eventloopbuilder"}}],[11,"notify_capacity","","Sets the maximum number of messages that can be buffered on the event loop's notification channel before a send will fail.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"messages_per_tick","","Sets the maximum number of messages that can be processed on any tick of the event loop.",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_tick","","",24,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"self"}}],[11,"timer_wheel_size","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"timer_capacity","","",24,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"build","","Constructs a new `EventLoop` using the configured values. The `EventLoop` will not be running.",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `EventLoop` using the default configuration values. The `EventLoop` will not be running.",25,{"inputs":[],"output":{"name":"result"}}],[11,"channel","","Returns a sender that allows sending messages to the event loop in a thread-safe way, waking up the event loop if needed.",25,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"timeout","","Schedules a timeout after the requested time interval. When the duration has been reached, Handler::timeout will be invoked passing in the supplied token.",25,null],[11,"clear_timeout","","If the supplied timeout has not been triggered, cancel it such that it will not be triggered in the future.",25,{"inputs":[{"name":"self"},{"name":"timeout"}],"output":{"name":"bool"}}],[11,"shutdown","","Tells the event loop to exit after it is done handling all events in the current iteration.",25,{"inputs":[{"name":"self"}],"output":null}],[11,"is_running","","Indicates whether the event loop is currently running. If it's not it has either stopped or is scheduled to stop on the next tick.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"register","","Registers an IO handle with the event loop.",25,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","Re-Registers an IO handle with the event loop.",25,{"inputs":[{"name":"self"},{"name":"e"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"run","","Keep spinning the event loop indefinitely, and notify the handler whenever any of the registered handles are ready.",25,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"result"}}],[11,"deregister","","Deregisters an IO handle with the event loop.",25,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"run_once","","Spin the event loop once, with a given timeout (forever if `None`), and notify the handler if any of the registered handles become ready during that time.",25,{"inputs":[{"name":"self"},{"name":"h"},{"name":"option"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"send","","",26,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",23,{"inputs":[{"name":"trysenderror"}],"output":{"name":"notifyerror"}}],[0,"unix","","",null,null],[4,"Shutdown","mio::deprecated::unix","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut down. All currently blocked and future reads will return `Ok(0)`.",22,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut down. All currently blocked and future writes will return an error.",22,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",22,null],[3,"Io","","",null,null],[3,"UnixSocket","","",null,null],[3,"UnixStream","","",null,null],[3,"UnixListener","","",null,null],[3,"PipeReader","","",null,null],[3,"PipeWriter","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"stream","","Returns a new, unbound, non-blocking Unix domain socket",27,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connect the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"bind","","Bind the socket to the specified address",27,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"listen","","Listen for incoming requests",27,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"try_clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",27,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",27,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",27,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"from","","",27,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixsocket"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",28,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"try_clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",28,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read_recv_fd","","",28,null],[11,"try_read_recv_fd","","",28,null],[11,"write_send_fd","","",28,null],[11,"try_write_send_fd","","",28,null],[11,"read","","",28,null],[11,"write","","",28,null],[11,"flush","","",28,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",28,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",28,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",28,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"from","","",28,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixstream"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",29,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",29,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",29,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",29,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"accept","","",29,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"unixsocket"}],"output":{"name":"unixlistener"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_stdout","","",30,{"inputs":[{"name":"childstdout"}],"output":{"name":"result"}}],[11,"from_stderr","","",30,{"inputs":[{"name":"childstderr"}],"output":{"name":"result"}}],[11,"read","","",30,null],[11,"register","","",30,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",30,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",30,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"io"}],"output":{"name":"pipereader"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_stdin","","",31,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"write","","",31,null],[11,"flush","","",31,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",31,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",31,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",31,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"io"}],"output":{"name":"pipewriter"}}],[11,"into_raw_fd","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",27,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",27,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixsocket"}}],[11,"into_raw_fd","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",28,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",28,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",29,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",29,{"inputs":[{"name":"rawfd"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",30,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",30,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",30,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipereader"}}],[11,"into_raw_fd","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",31,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",31,{"inputs":[{"name":"rawfd"}],"output":{"name":"pipewriter"}}],[8,"TryAccept","mio::deprecated","",null,null],[16,"Output","","",32,null],[10,"accept","","",32,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TryRead","","",null,null],[10,"try_read","","",33,null],[8,"TryWrite","","",null,null],[10,"try_write","","",34,null],[8,"Handler","","",null,null],[16,"Timeout","","",35,null],[16,"Message","","",35,null],[11,"ready","","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",35,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"ready"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",35,null],[11,"timeout","","Invoked when a timeout has completed.",35,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",35,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",35,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[0,"tcp","mio","Primitives for working with TCP",null,null],[4,"Shutdown","mio::tcp","Possible values which can be passed to the [`shutdown`] method of [`TcpStream`].",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut down. All currently blocked and future reads will return `Ok(0)`.",22,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut down. All currently blocked and future writes will return an error.",22,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",22,null],[3,"TcpStream","","",null,null],[3,"TcpListener","","",null,null],[0,"udp","mio","Primitives for working with UDP",null,null],[3,"UdpSocket","mio::udp","",null,null],[0,"unix","mio","Unix only extensions",null,null],[3,"EventedFd","mio::unix","",null,null],[12,"0","","",36,null],[8,"Evented","mio","A value that may be registered with an `EventLoop`",null,null],[10,"register","","",37,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"reregister","","",37,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[10,"deregister","","",37,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"eq","mio::tcp","",22,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",38,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",38,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",38,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",38,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",38,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[11,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",38,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read_bufs","","Read in a list of buffers all at once.",38,null],[11,"write_bufs","","Write a list of buffers all at once.",38,null],[11,"read","","",38,null],[11,"write","","",38,null],[11,"flush","","",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",38,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",38,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",38,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",39,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_listener","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",39,{"inputs":[{"name":"tcplistener"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new `TcpStream`.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",39,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",39,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",39,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",39,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",39,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",38,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",38,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcpstream"}}],[11,"into_raw_fd","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",39,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",39,{"inputs":[{"name":"rawfd"}],"output":{"name":"tcplistener"}}],[11,"fmt","mio::udp","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a UDP socket from the given address.",40,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",40,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address that this socket was created from.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",40,null],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",40,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",40,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",40,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",40,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",40,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",40,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",40,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",40,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",40,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"register","","",40,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",40,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",40,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"into_raw_fd","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",40,{"inputs":[{"name":"rawfd"}],"output":{"name":"udpsocket"}}],[11,"fmt","mio::unix","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"register","","",36,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",36,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",36,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"fmt","mio::deprecated::unix","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",41,{"inputs":[{"name":"rawfd"}],"output":{"name":"io"}}],[11,"into_raw_fd","","",41,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"as_raw_fd","","",41,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"register","","",41,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"reregister","","",41,{"inputs":[{"name":"self"},{"name":"poll"},{"name":"token"},{"name":"ready"},{"name":"pollopt"}],"output":{"name":"result"}}],[11,"deregister","","",41,{"inputs":[{"name":"self"},{"name":"poll"}],"output":{"name":"result"}}],[11,"read","","",41,null],[11,"write","","",41,null],[11,"flush","","",41,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ready","mio::deprecated","Invoked when the socket represented by `token` is ready to be operated on. `events` indicates the specific operations that are ready to be performed.",35,{"inputs":[{"name":"self"},{"name":"eventloop"},{"name":"token"},{"name":"ready"}],"output":null}],[11,"notify","","Invoked when a message has been received via the event loop's channel.",35,null],[11,"timeout","","Invoked when a timeout has completed.",35,null],[11,"interrupted","","Invoked when `EventLoop` has been interrupted by a signal interrupt.",35,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}],[11,"tick","","Invoked at the end of an event loop tick.",35,{"inputs":[{"name":"self"},{"name":"eventloop"}],"output":null}]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"Event"],[3,"IoVec"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"EventsIter"],[3,"Registration"],[4,"SendError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"SenderCtl"],[3,"ReceiverCtl"],[4,"TimerErrorKind"],[3,"Timeout"],[3,"TimerError"],[3,"Builder"],[3,"Timer"],[4,"Shutdown"],[4,"NotifyError"],[3,"EventLoopBuilder"],[3,"EventLoop"],[3,"Sender"],[3,"UnixSocket"],[3,"UnixStream"],[3,"UnixListener"],[3,"PipeReader"],[3,"PipeWriter"],[8,"TryAccept"],[8,"TryRead"],[8,"TryWrite"],[8,"Handler"],[3,"EventedFd"],[8,"Evented"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Io"]]};
searchIndex["net2"] = {"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",null,null],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",null,null],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"connect","","Initiate a connection on this socket to the specified address.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,{"inputs":[],"output":{"name":"result"}}],[11,"bind","","Binds this socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from_raw_fd","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"tcpbuilder"}}],[11,"as_raw_fd","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_raw_fd","","",1,{"inputs":[{"name":"c_int"}],"output":{"name":"udpbuilder"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[0,"unix","","Unix-specific extensions to the `std::net` types.",null,null],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",null,null],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reuse_port","net2","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reuse_port","","",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get_reuse_port","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",null,null],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",null,null],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",null,null],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,null],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,null],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["netbuf"] = {"doc":"This module currently includes single `Buf` struct for holding buffers. Comparing to `Vec` class buffer has different allocation policy and has a marker of consumed data (i.e. already processed by protocol parser or already written to socket)","items":[[3,"Buf","netbuf","",null,null],[4,"RangeArgument","","Temporary type until the one in stdlib it made stable",null,null],[13,"RangeFrom","","",0,null],[13,"Range","","",0,null],[13,"RangeTo","","",0,null],[11,"new","","Create empty buffer. It has no preallocated size. It's always have deallocated underlying memory chunk when there are no useful bytes in the buffer.",1,{"inputs":[],"output":{"name":"buf"}}],[11,"consume","","Mark the first `bytes` of the buffer as read. Basically it's shaving off bytes from the buffer. But does it effeciently. When there are no more bytes in the buffer it's deallocated.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_range","","Allows to remove arbitrary range of bytes",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"capacity","","Capacity of the buffer. I.e. the bytes it is allocated for. Use for debugging or for calculating memory usage. Note it's not guaranteed that you can write `buf.capacity() - buf.len()` bytes without resize",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","Number of useful bytes in the buffer",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Is buffer is empty. Potentially a little bit faster than getting `len()`",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"extend","","Extend buffer. Note unlike `Write::write()` and `read_from()` this method reserves smallest possible chunk of memory. So it's inefficient to grow with this method.  You may use Write trait to grow incrementally.",1,null],[11,"read_from","","Read some bytes from stream (object implementing `Read`) into buffer",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"result"}}],[11,"read_max_from","","Reads no more than max bytes into buffer and returns boolean flag of whether max bytes are reached",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"r"}],"output":{"name":"result"}}],[11,"write_to","","Write contents of buffer to the stream (object implementing the Write trait). We assume that stream is non-blocking, use `Write::write` (instead of `Write::write_all`) and return all errors to the caller (including `WouldBlock` or `Interrupted`).",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"split_off","","Splits buffer into two at given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buf"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",1,null],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"range"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeargument"}}],[11,"from","","",0,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangeargument"}}],[17,"MAX_BUF_SIZE","","Maximum size of buffer allowed. Note: we assert on this size. Most network servers should set their own limits to something much smaller.",null,null]],"paths":[[4,"RangeArgument"],[3,"Buf"]]};
searchIndex["nix"] = {"doc":"Rust friendly bindings to the various *nix system functions.","items":[[6,"c_int","nix","",null,null],[4,"c_void","","",null,null],[4,"Errno","","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[4,"Error","","",null,null],[13,"Sys","","",1,null],[13,"InvalidPath","","",1,null],[0,"errno","","",null,null],[4,"Errno","nix::errno","",null,null],[13,"UnknownErrno","","",0,null],[13,"EPERM","","",0,null],[13,"ENOENT","","",0,null],[13,"ESRCH","","",0,null],[13,"EINTR","","",0,null],[13,"EIO","","",0,null],[13,"ENXIO","","",0,null],[13,"E2BIG","","",0,null],[13,"ENOEXEC","","",0,null],[13,"EBADF","","",0,null],[13,"ECHILD","","",0,null],[13,"EAGAIN","","",0,null],[13,"ENOMEM","","",0,null],[13,"EACCES","","",0,null],[13,"EFAULT","","",0,null],[13,"ENOTBLK","","",0,null],[13,"EBUSY","","",0,null],[13,"EEXIST","","",0,null],[13,"EXDEV","","",0,null],[13,"ENODEV","","",0,null],[13,"ENOTDIR","","",0,null],[13,"EISDIR","","",0,null],[13,"EINVAL","","",0,null],[13,"ENFILE","","",0,null],[13,"EMFILE","","",0,null],[13,"ENOTTY","","",0,null],[13,"ETXTBSY","","",0,null],[13,"EFBIG","","",0,null],[13,"ENOSPC","","",0,null],[13,"ESPIPE","","",0,null],[13,"EROFS","","",0,null],[13,"EMLINK","","",0,null],[13,"EPIPE","","",0,null],[13,"EDOM","","",0,null],[13,"ERANGE","","",0,null],[13,"EDEADLK","","",0,null],[13,"ENAMETOOLONG","","",0,null],[13,"ENOLCK","","",0,null],[13,"ENOSYS","","",0,null],[13,"ENOTEMPTY","","",0,null],[13,"ELOOP","","",0,null],[13,"ENOMSG","","",0,null],[13,"EIDRM","","",0,null],[13,"ECHRNG","","",0,null],[13,"EL2NSYNC","","",0,null],[13,"EL3HLT","","",0,null],[13,"EL3RST","","",0,null],[13,"ELNRNG","","",0,null],[13,"EUNATCH","","",0,null],[13,"ENOCSI","","",0,null],[13,"EL2HLT","","",0,null],[13,"EBADE","","",0,null],[13,"EBADR","","",0,null],[13,"EXFULL","","",0,null],[13,"ENOANO","","",0,null],[13,"EBADRQC","","",0,null],[13,"EBADSLT","","",0,null],[13,"EBFONT","","",0,null],[13,"ENOSTR","","",0,null],[13,"ENODATA","","",0,null],[13,"ETIME","","",0,null],[13,"ENOSR","","",0,null],[13,"ENONET","","",0,null],[13,"ENOPKG","","",0,null],[13,"EREMOTE","","",0,null],[13,"ENOLINK","","",0,null],[13,"EADV","","",0,null],[13,"ESRMNT","","",0,null],[13,"ECOMM","","",0,null],[13,"EPROTO","","",0,null],[13,"EMULTIHOP","","",0,null],[13,"EDOTDOT","","",0,null],[13,"EBADMSG","","",0,null],[13,"EOVERFLOW","","",0,null],[13,"ENOTUNIQ","","",0,null],[13,"EBADFD","","",0,null],[13,"EREMCHG","","",0,null],[13,"ELIBACC","","",0,null],[13,"ELIBBAD","","",0,null],[13,"ELIBSCN","","",0,null],[13,"ELIBMAX","","",0,null],[13,"ELIBEXEC","","",0,null],[13,"EILSEQ","","",0,null],[13,"ERESTART","","",0,null],[13,"ESTRPIPE","","",0,null],[13,"EUSERS","","",0,null],[13,"ENOTSOCK","","",0,null],[13,"EDESTADDRREQ","","",0,null],[13,"EMSGSIZE","","",0,null],[13,"EPROTOTYPE","","",0,null],[13,"ENOPROTOOPT","","",0,null],[13,"EPROTONOSUPPORT","","",0,null],[13,"ESOCKTNOSUPPORT","","",0,null],[13,"EOPNOTSUPP","","",0,null],[13,"EPFNOSUPPORT","","",0,null],[13,"EAFNOSUPPORT","","",0,null],[13,"EADDRINUSE","","",0,null],[13,"EADDRNOTAVAIL","","",0,null],[13,"ENETDOWN","","",0,null],[13,"ENETUNREACH","","",0,null],[13,"ENETRESET","","",0,null],[13,"ECONNABORTED","","",0,null],[13,"ECONNRESET","","",0,null],[13,"ENOBUFS","","",0,null],[13,"EISCONN","","",0,null],[13,"ENOTCONN","","",0,null],[13,"ESHUTDOWN","","",0,null],[13,"ETOOMANYREFS","","",0,null],[13,"ETIMEDOUT","","",0,null],[13,"ECONNREFUSED","","",0,null],[13,"EHOSTDOWN","","",0,null],[13,"EHOSTUNREACH","","",0,null],[13,"EALREADY","","",0,null],[13,"EINPROGRESS","","",0,null],[13,"ESTALE","","",0,null],[13,"EUCLEAN","","",0,null],[13,"ENOTNAM","","",0,null],[13,"ENAVAIL","","",0,null],[13,"EISNAM","","",0,null],[13,"EREMOTEIO","","",0,null],[13,"EDQUOT","","",0,null],[13,"ENOMEDIUM","","",0,null],[13,"EMEDIUMTYPE","","",0,null],[13,"ECANCELED","","",0,null],[13,"ENOKEY","","",0,null],[13,"EKEYEXPIRED","","",0,null],[13,"EKEYREVOKED","","",0,null],[13,"EKEYREJECTED","","",0,null],[13,"EOWNERDEAD","","",0,null],[13,"ENOTRECOVERABLE","","",0,null],[13,"ERFKILL","","",0,null],[13,"EHWPOISON","","",0,null],[5,"from_i32","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[5,"errno","","Returns the platform-specific value of errno",null,{"inputs":[],"output":{"name":"i32"}}],[11,"fmt","nix","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errno"}],"output":{"name":"bool"}}],[17,"EWOULDBLOCK","nix::errno","",null,null],[17,"EDEADLOCK","","",null,null],[8,"ErrnoSentinel","","The sentinel value indicates that a function failed and more detailed information about the error can be found in `errno`",null,null],[10,"sentinel","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"last","nix","",0,{"inputs":[],"output":{"name":"self"}}],[11,"desc","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i32","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"errno"}}],[11,"clear","","",0,null],[11,"result","","Returns `Ok(value)` if it does not contain the sentinel value. This should not be used when `-1` is not the errno sentinel value.",0,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"features","","",null,null],[5,"socket_atomic_cloexec","nix::features","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"fcntl","nix","",null,null],[3,"SpliceFFlags","nix::fcntl","",null,null],[3,"OFlag","","",null,null],[3,"FdFlag","","",null,null],[3,"SealFlag","","",null,null],[3,"flock","","",null,null],[12,"l_type","","",3,null],[12,"l_whence","","",3,null],[12,"l_start","","",3,null],[12,"l_len","","",3,null],[12,"l_pid","","",3,null],[12,"l_sysid","","",3,null],[4,"FcntlArg","","",null,null],[13,"F_DUPFD","","",4,null],[13,"F_DUPFD_CLOEXEC","","",4,null],[13,"F_GETFD","","",4,null],[13,"F_SETFD","","",4,null],[13,"F_GETFL","","",4,null],[13,"F_SETFL","","",4,null],[13,"F_SETLK","","",4,null],[13,"F_SETLKW","","",4,null],[13,"F_GETLK","","",4,null],[13,"F_OFD_SETLK","","",4,null],[13,"F_OFD_SETLKW","","",4,null],[13,"F_OFD_GETLK","","",4,null],[13,"F_ADD_SEALS","","",4,null],[13,"F_GET_SEALS","","",4,null],[4,"FlockArg","","",null,null],[13,"LockShared","","",5,null],[13,"LockExclusive","","",5,null],[13,"Unlock","","",5,null],[13,"LockSharedNonblock","","",5,null],[13,"LockExclusiveNonblock","","",5,null],[13,"UnlockNonblock","","",5,null],[5,"open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"fcntl","","",null,{"inputs":[{"name":"rawfd"},{"name":"fcntlarg"}],"output":{"name":"result"}}],[5,"flock","","",null,{"inputs":[{"name":"rawfd"},{"name":"flockarg"}],"output":{"name":"result"}}],[5,"splice","","",null,{"inputs":[{"name":"rawfd"},{"name":"option"},{"name":"rawfd"},{"name":"option"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"tee","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"usize"},{"name":"splicefflags"}],"output":{"name":"result"}}],[5,"vmsplice","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"flock"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[],"output":{"name":"splicefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",6,{"inputs":[{"name":"c_uint"}],"output":{"name":"splicefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"self"},{"name":"splicefflags"}],"output":{"name":"splicefflags"}}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"self"}],"output":{"name":"splicefflags"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"splicefflags"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[],"output":{"name":"oflag"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[],"output":{"name":"oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,{"inputs":[{"name":"c_int"}],"output":{"name":"oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"self"},{"name":"oflag"}],"output":{"name":"oflag"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"self"}],"output":{"name":"oflag"}}],[11,"from_iter","","",7,{"inputs":[{"name":"t"}],"output":{"name":"oflag"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",8,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",8,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[],"output":{"name":"sealflag"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[],"output":{"name":"sealflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",9,{"inputs":[{"name":"c_int"}],"output":{"name":"sealflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"self"},{"name":"sealflag"}],"output":{"name":"sealflag"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"self"}],"output":{"name":"sealflag"}}],[11,"from_iter","","",9,{"inputs":[{"name":"t"}],"output":{"name":"sealflag"}}],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"O_NDELAY","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[0,"mount","nix","",null,null],[3,"MsFlags","nix::mount","",null,null],[3,"MntFlags","","",null,null],[5,"mount","","",null,{"inputs":[{"name":"option"},{"name":"p2"},{"name":"option"},{"name":"msflags"},{"name":"option"}],"output":{"name":"result"}}],[5,"umount","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"umount2","","",null,{"inputs":[{"name":"p"},{"name":"mntflags"}],"output":{"name":"result"}}],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_VERBOSE","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_NOSEC","","",null,null],[17,"MS_BORN","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"c_ulong"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",11,{"inputs":[],"output":{"name":"mntflags"}}],[11,"all","","Returns the set containing all flags.",11,{"inputs":[],"output":{"name":"mntflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",11,{"inputs":[{"name":"c_int"}],"output":{"name":"mntflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",11,{"inputs":[{"name":"self"},{"name":"mntflags"}],"output":{"name":"mntflags"}}],[11,"not","","Returns the complement of this set of flags.",11,{"inputs":[{"name":"self"}],"output":{"name":"mntflags"}}],[11,"from_iter","","",11,{"inputs":[{"name":"t"}],"output":{"name":"mntflags"}}],[0,"mqueue","nix","Posix Message Queue functions",null,null],[3,"MQ_OFlag","nix::mqueue","",null,null],[3,"FdFlag","","",null,null],[3,"MqAttr","","",null,null],[12,"mq_flags","","",12,null],[12,"mq_maxmsg","","",12,null],[12,"mq_msgsize","","",12,null],[12,"mq_curmsgs","","",12,null],[5,"mq_open","","",null,{"inputs":[{"name":"cstring"},{"name":"mq_oflag"},{"name":"mode"},{"name":"option"}],"output":{"name":"result"}}],[5,"mq_unlink","","",null,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[5,"mq_close","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_setattr","","Set the attributes of the message queue. Only O_NONBLOCK can be set, everything else will be ignored Returns the old attributes It is recommend to use the mq_set_nonblock() and mq_remove_nonblock() convenience functions as they are easier to use",null,{"inputs":[{"name":"mqd"},{"name":"mqattr"}],"output":{"name":"result"}}],[5,"mq_set_nonblock","","Convenience function. Sets the O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[5,"mq_remove_nonblock","","Convenience function. Removes O_NONBLOCK attribute for a given message queue descriptor Returns the old attributes",null,{"inputs":[{"name":"mqd"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"all","","Returns the set containing all flags.",13,{"inputs":[],"output":{"name":"mq_oflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",13,{"inputs":[{"name":"c_int"}],"output":{"name":"mq_oflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",13,{"inputs":[{"name":"self"},{"name":"mq_oflag"}],"output":{"name":"mq_oflag"}}],[11,"not","","Returns the complement of this set of flags.",13,{"inputs":[{"name":"self"}],"output":{"name":"mq_oflag"}}],[11,"from_iter","","",13,{"inputs":[{"name":"t"}],"output":{"name":"mq_oflag"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"option"}}],[11,"lt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"le","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"gt","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"ge","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"all","","Returns the set containing all flags.",14,{"inputs":[],"output":{"name":"fdflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",14,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",14,{"inputs":[{"name":"c_int"}],"output":{"name":"fdflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",14,{"inputs":[{"name":"self"},{"name":"fdflag"}],"output":{"name":"fdflag"}}],[11,"not","","Returns the complement of this set of flags.",14,{"inputs":[{"name":"self"}],"output":{"name":"fdflag"}}],[11,"from_iter","","",14,{"inputs":[{"name":"t"}],"output":{"name":"fdflag"}}],[6,"MQd","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"FD_CLOEXEC","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"mqattr"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"mqattr"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"c_long"},{"name":"c_long"},{"name":"c_long"},{"name":"c_long"}],"output":{"name":"mqattr"}}],[0,"poll","nix","",null,null],[3,"PollFd","nix::poll","",null,null],[12,"fd","","",15,null],[12,"events","","",15,null],[12,"revents","","",15,null],[3,"EventFlags","","",null,null],[5,"poll","","",null,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"eventflags"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"eventflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"c_short"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"c_short"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",16,{"inputs":[{"name":"c_short"}],"output":{"name":"eventflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",16,{"inputs":[{"name":"self"},{"name":"eventflags"}],"output":{"name":"eventflags"}}],[11,"not","","Returns the complement of this set of flags.",16,{"inputs":[{"name":"self"}],"output":{"name":"eventflags"}}],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"eventflags"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"nfds_t","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[0,"net","nix","",null,null],[0,"if_","nix::net","Network interface name resolution.",null,null],[5,"if_nametoindex","nix::net::if_","Resolve an interface into a interface number.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[0,"sched","nix","",null,null],[3,"CloneFlags","nix::sched","",null,null],[3,"CpuSet","","",null,null],[5,"sched_setaffinity","","",null,{"inputs":[{"name":"isize"},{"name":"cpuset"}],"output":{"name":"result"}}],[5,"clone","","",null,null],[5,"unshare","","",null,{"inputs":[{"name":"cloneflags"}],"output":{"name":"result"}}],[5,"setns","","",null,{"inputs":[{"name":"rawfd"},{"name":"cloneflags"}],"output":{"name":"result"}}],[6,"CloneCb","","",null,null],[6,"CpuMask","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",17,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"all","","Returns the set containing all flags.",17,{"inputs":[],"output":{"name":"cloneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",17,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",17,{"inputs":[{"name":"c_int"}],"output":{"name":"cloneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",17,{"inputs":[{"name":"self"},{"name":"cloneflags"}],"output":{"name":"cloneflags"}}],[11,"not","","Returns the complement of this set of flags.",17,{"inputs":[{"name":"self"}],"output":{"name":"cloneflags"}}],[11,"from_iter","","",17,{"inputs":[{"name":"t"}],"output":{"name":"cloneflags"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"cpuset"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"cpuset"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"unset","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[0,"sys","nix","",null,null],[0,"epoll","nix::sys","",null,null],[3,"EpollEventKind","nix::sys::epoll","",null,null],[3,"EpollEvent","","",null,null],[12,"events","","",19,null],[12,"data","","",19,null],[4,"EpollOp","","",null,null],[13,"EpollCtlAdd","","",20,null],[13,"EpollCtlDel","","",20,null],[13,"EpollCtlMod","","",20,null],[5,"epoll_create","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"epoll_ctl","","",null,{"inputs":[{"name":"rawfd"},{"name":"epollop"},{"name":"rawfd"},{"name":"epollevent"}],"output":{"name":"result"}}],[5,"epoll_wait","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"EPOLLET","","",null,null],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"epolleventkind"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"ordering"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"epolleventkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",21,{"inputs":[{"name":"u32"}],"output":{"name":"epolleventkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"sub","","Returns the set difference of the two sets of flags.",21,{"inputs":[{"name":"self"},{"name":"epolleventkind"}],"output":{"name":"epolleventkind"}}],[11,"not","","Returns the complement of this set of flags.",21,{"inputs":[{"name":"self"}],"output":{"name":"epolleventkind"}}],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"epolleventkind"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"epollop"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"epollevent"}}],[0,"memfd","nix::sys","",null,null],[3,"MemFdCreateFlag","nix::sys::memfd","",null,null],[5,"memfd_create","","",null,{"inputs":[{"name":"cstr"},{"name":"memfdcreateflag"}],"output":{"name":"result"}}],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"ordering"}}],[11,"hash","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",22,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"all","","Returns the set containing all flags.",22,{"inputs":[],"output":{"name":"memfdcreateflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,{"inputs":[{"name":"c_uint"}],"output":{"name":"memfdcreateflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",22,{"inputs":[{"name":"self"},{"name":"memfdcreateflag"}],"output":{"name":"memfdcreateflag"}}],[11,"not","","Returns the complement of this set of flags.",22,{"inputs":[{"name":"self"}],"output":{"name":"memfdcreateflag"}}],[11,"from_iter","","",22,{"inputs":[{"name":"t"}],"output":{"name":"memfdcreateflag"}}],[0,"ioctl","nix::sys","Provide helpers for making ioctl system calls",null,null],[5,"ioc_dir","nix::sys::ioctl","Extracts the \"direction\" (read/write/none) from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[5,"ioc_type","","Extracts the type from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_nr","","Extracts the ioctl number from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"ioc_size","","Extracts the size from an encoded ioctl command.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[17,"NRBITS","","",null,null],[17,"TYPEBITS","","",null,null],[17,"NONE","","",null,null],[17,"READ","","",null,null],[17,"WRITE","","",null,null],[17,"SIZEBITS","","",null,null],[17,"DIRBITS","","",null,null],[17,"NRSHIFT","","",null,null],[17,"TYPESHIFT","","",null,null],[17,"SIZESHIFT","","",null,null],[17,"DIRSHIFT","","",null,null],[17,"NRMASK","","",null,null],[17,"TYPEMASK","","",null,null],[17,"SIZEMASK","","",null,null],[17,"DIRMASK","","",null,null],[17,"IN","","",null,null],[17,"OUT","","",null,null],[17,"INOUT","","",null,null],[17,"SIZE_MASK","","",null,null],[0,"sendfile","nix::sys","",null,null],[5,"sendfile","nix::sys::sendfile","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"option"},{"name":"usize"}],"output":{"name":"result"}}],[0,"signal","nix::sys","",null,null],[17,"SIGHUP","nix::sys::signal","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"SIGTRAP","","",null,null],[17,"SIGIOT","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[3,"SaFlag","","",null,null],[3,"SigFlag","","",null,null],[3,"SigSet","","",null,null],[3,"SigAction","","",null,null],[4,"SigHandler","","",null,null],[13,"SigDfl","","",23,null],[13,"SigIgn","","",23,null],[13,"Handler","","",23,null],[13,"SigAction","","",23,null],[5,"sigaction","","",null,{"inputs":[{"name":"signum"},{"name":"sigaction"}],"output":{"name":"result"}}],[5,"pthread_sigmask","","Manages the signal mask (set of blocked signals) for the calling thread.",null,{"inputs":[{"name":"sigflag"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"kill","","",null,{"inputs":[{"name":"pid_t"},{"name":"signum"}],"output":{"name":"result"}}],[5,"raise","","",null,{"inputs":[{"name":"signum"}],"output":{"name":"result"}}],[6,"SigNum","","",null,null],[17,"SIGEMT","","",null,null],[17,"NSIG","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"SIG_SETMASK","","",null,null],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"partial_cmp","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"option"}}],[11,"lt","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"le","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"gt","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"ge","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"cmp","","",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"ordering"}}],[11,"hash","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",24,{"inputs":[],"output":{"name":"saflag"}}],[11,"all","","Returns the set containing all flags.",24,{"inputs":[],"output":{"name":"saflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,{"inputs":[{"name":"c_int"}],"output":{"name":"saflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",24,{"inputs":[{"name":"self"},{"name":"saflag"}],"output":{"name":"saflag"}}],[11,"not","","Returns the complement of this set of flags.",24,{"inputs":[{"name":"self"}],"output":{"name":"saflag"}}],[11,"from_iter","","",24,{"inputs":[{"name":"t"}],"output":{"name":"saflag"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"ordering"}}],[11,"hash","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",25,{"inputs":[],"output":{"name":"sigflag"}}],[11,"all","","Returns the set containing all flags.",25,{"inputs":[],"output":{"name":"sigflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,{"inputs":[{"name":"c_int"}],"output":{"name":"sigflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",25,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"sigflag"}}],[11,"not","","Returns the complement of this set of flags.",25,{"inputs":[{"name":"self"}],"output":{"name":"sigflag"}}],[11,"from_iter","","",25,{"inputs":[{"name":"t"}],"output":{"name":"sigflag"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sigset"}}],[11,"all","","",26,{"inputs":[],"output":{"name":"sigset"}}],[11,"empty","","",26,{"inputs":[],"output":{"name":"sigset"}}],[11,"add","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"remove","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"contains","","",26,{"inputs":[{"name":"self"},{"name":"signum"}],"output":{"name":"result"}}],[11,"thread_get_mask","","Gets the currently blocked (masked) set of signals for the calling thread.",26,{"inputs":[],"output":{"name":"result"}}],[11,"thread_set_mask","","Sets the set of signals as the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_block","","Adds the set of signals to the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_unblock","","Removes the set of signals from the signal mask for the calling thread.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"thread_swap_mask","","Sets the set of signals as the signal mask, and returns the old mask.",26,{"inputs":[{"name":"self"},{"name":"sigflag"}],"output":{"name":"result"}}],[11,"wait","","Suspends execution of the calling thread until one of the signals in the signal mask becomes pending, and returns the accepted signal.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sighandler"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"sighandler"}],"output":{"name":"bool"}}],[11,"new","","This function will set or unset the flag `SA_SIGINFO` depending on the type of the `handler` argument.",27,{"inputs":[{"name":"sighandler"},{"name":"saflag"},{"name":"sigset"}],"output":{"name":"sigaction"}}],[0,"socket","nix::sys","Socket interface functions",null,null],[3,"in_addr","nix::sys::socket","",null,null],[12,"s_addr","","",28,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",29,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",30,null],[12,"sa_data","","",30,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",31,null],[12,"sin_port","","",31,null],[12,"sin_addr","","",31,null],[12,"sin_zero","","",31,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",32,null],[12,"sin6_port","","",32,null],[12,"sin6_flowinfo","","",32,null],[12,"sin6_addr","","",32,null],[12,"sin6_scope_id","","",32,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",33,null],[12,"sun_path","","",33,null],[6,"sa_family_t","","",null,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",34,null],[3,"UnixAddr","","A wrapper around sockaddr_un. We track the length of sun_path, because it may not be null-terminated (unconnected and abstract sockets). Note that the actual sockaddr length is greater by size_of::<sa_family_t>().",null,null],[12,"0","","",35,null],[12,"1","","",35,null],[3,"Ipv4Addr","","",null,null],[12,"0","","",36,null],[3,"Ipv6Addr","","",null,null],[12,"0","","",37,null],[3,"NetlinkAddr","","",null,null],[12,"0","","",38,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",39,null],[12,"imr_interface","","",39,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",40,null],[12,"ipv6mr_interface","","",40,null],[3,"MsgFlags","","",null,null],[3,"SockFlag","","",null,null],[3,"CmsgSpace","","A structure used to make room in a cmsghdr passed to recvmsg. The size and alignment match that of a cmsghdr followed by a T, but the fields are not accessible, as the actual types will change on a call to recvmsg.",null,null],[3,"RecvMsg","","",null,null],[12,"bytes","","",41,null],[12,"address","","",41,null],[12,"flags","","",41,null],[3,"CmsgIterator","","",null,null],[3,"linger","","",null,null],[12,"l_onoff","","",42,null],[12,"l_linger","","",42,null],[3,"ucred","","",null,null],[4,"AddressFamily","","",null,null],[13,"Unix","","",43,null],[13,"Inet","","",43,null],[13,"Inet6","","",43,null],[13,"Netlink","","",43,null],[13,"Packet","","",43,null],[4,"SockAddr","","Represents a socket address",null,null],[13,"Inet","","",44,null],[13,"Unix","","",44,null],[13,"Netlink","","",44,null],[4,"InetAddr","","",null,null],[13,"V4","","",45,null],[13,"V6","","",45,null],[4,"IpAddr","","",null,null],[13,"V4","","",46,null],[13,"V6","","",46,null],[4,"SockType","","",null,null],[13,"Stream","","",47,null],[13,"Datagram","","",47,null],[13,"SeqPacket","","",47,null],[13,"Raw","","",47,null],[13,"Rdm","","",47,null],[4,"ControlMessage","","A type-safe wrapper around a single control message. More types may be added to this enum; do not exhaustively pattern-match it. Further reading",null,null],[13,"ScmRights","","A message of type SCM_RIGHTS, containing an array of file descriptors passed between processes. See the description in the \"Ancillary messages\" section of the unix(7) man page.",48,null],[4,"SockLevel","","The protocol level at which to get / set socket options. Used as an argument to `getsockopt` and `setsockopt`.",null,null],[13,"Socket","","",49,null],[13,"Tcp","","",49,null],[13,"Ip","","",49,null],[13,"Ipv6","","",49,null],[13,"Udp","","",49,null],[13,"Netlink","","",49,null],[4,"Shutdown","","",null,null],[13,"Read","","Further receptions will be disallowed.",50,null],[13,"Write","","Further  transmissions will be disallowed.",50,null],[13,"Both","","Further receptions and transmissions will be disallowed.",50,null],[5,"sendmsg","","Send data in scatter-gather vectors to a socket, possibly accompanied by ancillary data. Optionally direct the message at the given address, as with sendto.",null,null],[5,"recvmsg","","Receive message in scatter-gather vectors from a socket, and optionally receive ancillary data into the provided buffer. If no ancillary data is desired, use () as the type parameter.",null,null],[5,"socket","","Create an endpoint for communication",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"sockflag"},{"name":"c_int"}],"output":{"name":"result"}}],[5,"socketpair","","Create a pair of connected sockets",null,{"inputs":[{"name":"addressfamily"},{"name":"socktype"},{"name":"c_int"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"listen","","Listen for connections on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[5,"bind","","Bind a name to a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"accept","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"accept4","","Accept a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockflag"}],"output":{"name":"result"}}],[5,"connect","","Initiate a connection on a socket",null,{"inputs":[{"name":"rawfd"},{"name":"sockaddr"}],"output":{"name":"result"}}],[5,"recv","","Receive data from a connection-oriented socket. Returns the number of bytes read",null,null],[5,"recvfrom","","Receive data from a connectionless or connection-oriented socket. Returns the number of bytes read and the socket address of the sender.",null,null],[5,"sendto","","",null,null],[5,"send","","Send data to a connection-oriented socket. Returns the number of bytes read",null,null],[5,"getsockopt","","Get the current value for the requested socket option",null,{"inputs":[{"name":"rawfd"},{"name":"o"}],"output":{"name":"result"}}],[5,"setsockopt","","Sets the value for the requested socket option",null,null],[5,"getpeername","","Get the address of the peer connected to the socket `fd`.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getsockname","","Get the current address to which the socket `fd` is bound.",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"sockaddr_storage_to_addr","","",null,{"inputs":[{"name":"sockaddr_storage"},{"name":"usize"}],"output":{"name":"result"}}],[5,"shutdown","","Shut down part of a full-duplex connection.",null,{"inputs":[{"name":"rawfd"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"netlinkaddr"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",38,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","",38,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"netlinkaddr"}}],[11,"pid","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"groups","","",38,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"addressfamily"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"from_std","","",45,{"inputs":[{"name":"socketaddr"}],"output":{"name":"inetaddr"}}],[11,"new","","",45,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"inetaddr"}}],[11,"ip","","Gets the IP address associated with this socket address.",45,{"inputs":[{"name":"self"}],"output":{"name":"ipaddr"}}],[11,"port","","Gets the port number associated with this socket address",45,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"to_std","","",45,{"inputs":[{"name":"self"}],"output":{"name":"socketaddr"}}],[11,"to_str","","",45,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"inetaddr"}],"output":{"name":"bool"}}],[11,"hash","","",45,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"inetaddr"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_v4","","Create a new IpAddr that contains an IPv4 address.",46,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipaddr"}}],[11,"new_v6","","Create a new IpAddr that contains an IPv6 address.",46,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",36,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"from_std","","",36,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"any","","",36,{"inputs":[],"output":{"name":"ipv4addr"}}],[11,"octets","","",36,null],[11,"to_std","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",36,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ipv4addr"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"new","","",37,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"from_std","","",37,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Return the eight 16-bit segments that make up this address",37,null],[11,"to_std","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new sockaddr_un representing a filesystem path.",35,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_abstract","","Create a new sockaddr_un representing an address in the \"abstract namespace\". This is a Linux-specific extension, primarily used to allow chrooted processes to communicate with specific daemons.",35,null],[11,"path","","If this address represents a filesystem path, return that path.",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"unixaddr"}],"output":{"name":"bool"}}],[11,"hash","","",35,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unixaddr"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_inet","","",44,{"inputs":[{"name":"inetaddr"}],"output":{"name":"sockaddr"}}],[11,"new_unix","","",44,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"new_netlink","","",44,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"sockaddr"}}],[11,"family","","",44,{"inputs":[{"name":"self"}],"output":{"name":"addressfamily"}}],[11,"to_str","","",44,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"as_ffi_pair","","",44,null],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"sockaddr"}],"output":{"name":"bool"}}],[11,"hash","","",44,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"ordering"}}],[11,"hash","","",51,null],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",51,{"inputs":[],"output":{"name":"msgflags"}}],[11,"all","","Returns the set containing all flags.",51,{"inputs":[],"output":{"name":"msgflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",51,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",51,{"inputs":[{"name":"c_int"}],"output":{"name":"msgflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",51,{"inputs":[{"name":"self"},{"name":"msgflags"}],"output":{"name":"msgflags"}}],[11,"not","","Returns the complement of this set of flags.",51,{"inputs":[{"name":"self"}],"output":{"name":"msgflags"}}],[11,"from_iter","","",51,{"inputs":[{"name":"t"}],"output":{"name":"msgflags"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",39,{"inputs":[{"name":"ipv4addr"},{"name":"option"}],"output":{"name":"ip_mreq"}}],[11,"new","","",40,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6_mreq"}}],[0,"sockopt","","",null,null],[3,"ReuseAddr","nix::sys::socket::sockopt","",null,null],[3,"ReusePort","","",null,null],[3,"TcpNoDelay","","",null,null],[3,"Linger","","",null,null],[3,"IpAddMembership","","",null,null],[3,"IpDropMembership","","",null,null],[3,"Ipv6AddMembership","","",null,null],[3,"Ipv6DropMembership","","",null,null],[3,"IpMulticastTtl","","",null,null],[3,"IpMulticastLoop","","",null,null],[3,"ReceiveTimeout","","",null,null],[3,"SendTimeout","","",null,null],[3,"Broadcast","","",null,null],[3,"OobInline","","",null,null],[3,"SocketError","","",null,null],[3,"KeepAlive","","",null,null],[3,"PeerCredentials","","",null,null],[3,"TcpKeepIdle","","",null,null],[3,"RcvBuf","","",null,null],[3,"SndBuf","","",null,null],[3,"RcvBufForce","","",null,null],[3,"SndBufForce","","",null,null],[3,"SockType","","",null,null],[3,"AcceptConn","","",null,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"reuseaddr"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",52,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"reuseport"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",53,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"tcpnodelay"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",54,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"linger"}],"output":{"name":"result"}}],[11,"get","","",55,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ipaddmembership"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",56,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ipdropmembership"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",57,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ip_mreq"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ipv6addmembership"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",58,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ipv6dropmembership"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",59,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"ipv6_mreq"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastttl"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u8"}],"output":{"name":"result"}}],[11,"get","","",60,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ipmulticastloop"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",61,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",61,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"receivetimeout"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",62,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",62,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"sendtimeout"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",63,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"timeval"}],"output":{"name":"result"}}],[11,"get","","",63,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"broadcast"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",64,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",64,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"oobinline"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",65,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",65,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"socketerror"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",66,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"keepalive"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"bool"}],"output":{"name":"result"}}],[11,"get","","",67,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"peercredentials"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",68,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"tcpkeepidle"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"u32"}],"output":{"name":"result"}}],[11,"get","","",69,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"rcvbuf"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",70,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sndbuf"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",71,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"get","","",71,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"rcvbufforce"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",72,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"sndbufforce"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set","","",73,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"usize"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",74,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"acceptconn"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","",75,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"result"}}],[6,"IpMulticastTtl","nix::sys::socket","",null,null],[6,"InAddrT","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_PACKET","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[8,"GetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `getsockopt`",null,null],[16,"Val","","",76,null],[8,"SetSockOpt","","Represents a socket option that can be accessed or set. Used as an argument to `setsockopt`",null,null],[16,"Val","","",77,null],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"socktype"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"socktype"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"partial_cmp","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"option"}}],[11,"lt","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"le","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"gt","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"ge","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"cmp","","",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"ordering"}}],[11,"hash","","",78,null],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",78,{"inputs":[],"output":{"name":"sockflag"}}],[11,"all","","Returns the set containing all flags.",78,{"inputs":[],"output":{"name":"sockflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",78,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",78,{"inputs":[{"name":"c_int"}],"output":{"name":"sockflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",78,{"inputs":[{"name":"self"},{"name":"sockflag"}],"output":{"name":"sockflag"}}],[11,"not","","Returns the complement of this set of flags.",78,{"inputs":[{"name":"self"}],"output":{"name":"sockflag"}}],[11,"from_iter","","",78,{"inputs":[{"name":"t"}],"output":{"name":"sockflag"}}],[11,"new","","Create a CmsgSpace<T>. The structure is used only for space, so the fields are uninitialized.",79,{"inputs":[],"output":{"name":"self"}}],[11,"cmsgs","","Iterate over the valid control messages pointed to by this msghdr.",41,{"inputs":[{"name":"self"}],"output":{"name":"cmsgiterator"}}],[11,"next","","",80,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stat","nix::sys","",null,null],[6,"dev_t","nix::sys::stat","",null,null],[3,"FileStat","","",null,null],[12,"st_dev","","",82,null],[12,"st_ino","","",82,null],[12,"st_nlink","","",82,null],[12,"st_mode","","",82,null],[12,"st_uid","","",82,null],[12,"st_gid","","",82,null],[12,"st_rdev","","",82,null],[12,"st_size","","",82,null],[12,"st_blksize","","",82,null],[12,"st_blocks","","",82,null],[12,"st_atime","","",82,null],[12,"st_atime_nsec","","",82,null],[12,"st_mtime","","",82,null],[12,"st_mtime_nsec","","",82,null],[12,"st_ctime","","",82,null],[12,"st_ctime_nsec","","",82,null],[3,"SFlag","","",null,null],[3,"Mode","","",null,null],[5,"mknod","","",null,{"inputs":[{"name":"p"},{"name":"sflag"},{"name":"mode"},{"name":"dev_t"}],"output":{"name":"result"}}],[5,"mkdev","","",null,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"dev_t"}}],[5,"umask","","",null,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[5,"stat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"lstat","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fstat","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[17,"S_IFREG","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IROTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"ordering"}}],[11,"hash","","",83,null],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"sflag"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"sflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",83,{"inputs":[{"name":"mode_t"}],"output":{"name":"sflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",83,{"inputs":[{"name":"self"},{"name":"sflag"}],"output":{"name":"sflag"}}],[11,"not","","Returns the complement of this set of flags.",83,{"inputs":[{"name":"self"}],"output":{"name":"sflag"}}],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"sflag"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"option"}}],[11,"lt","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",84,null],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"mode_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"mode_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",84,{"inputs":[{"name":"mode_t"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub","","Returns the set difference of the two sets of flags.",84,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"not","","Returns the complement of this set of flags.",84,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[0,"syscall","nix::sys","Indirect system call",null,null],[5,"syscall","nix::sys::syscall","",null,null],[6,"Syscall","","",null,null],[7,"SYSPIVOTROOT","","",null,null],[7,"MEMFD_CREATE","","",null,null],[0,"termios","nix::sys","",null,null],[3,"Termios","nix::sys::termios","",null,null],[12,"c_iflag","","",85,null],[12,"c_oflag","","",85,null],[12,"c_cflag","","",85,null],[12,"c_lflag","","",85,null],[12,"c_line","","",85,null],[12,"c_cc","","",85,null],[12,"c_ispeed","","",85,null],[12,"c_ospeed","","",85,null],[3,"InputFlags","","",null,null],[3,"OutputFlags","","",null,null],[3,"ControlFlags","","",null,null],[3,"LocalFlags","","",null,null],[4,"SetArg","","",null,null],[13,"TCSANOW","","",86,null],[13,"TCSADRAIN","","",86,null],[13,"TCSAFLUSH","","",86,null],[4,"FlushArg","","",null,null],[13,"TCIFLUSH","","",87,null],[13,"TCOFLUSH","","",87,null],[13,"TCIOFLUSH","","",87,null],[4,"FlowArg","","",null,null],[13,"TCOOFF","","",88,null],[13,"TCOON","","",88,null],[13,"TCIOFF","","",88,null],[13,"TCION","","",88,null],[5,"cfgetispeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfgetospeed","","",null,{"inputs":[{"name":"termios"}],"output":{"name":"speed_t"}}],[5,"cfsetispeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"cfsetospeed","","",null,{"inputs":[{"name":"termios"},{"name":"speed_t"}],"output":{"name":"result"}}],[5,"tcgetattr","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcsetattr","","",null,{"inputs":[{"name":"rawfd"},{"name":"setarg"},{"name":"termios"}],"output":{"name":"result"}}],[5,"tcdrain","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"tcflow","","",null,{"inputs":[{"name":"rawfd"},{"name":"flowarg"}],"output":{"name":"result"}}],[5,"tcflush","","",null,{"inputs":[{"name":"rawfd"},{"name":"flusharg"}],"output":{"name":"result"}}],[5,"tcsendbreak","","",null,{"inputs":[{"name":"rawfd"},{"name":"c_int"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"partial_cmp","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"option"}}],[11,"lt","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"le","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"gt","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"ge","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",89,null],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"inputflags"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"inputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",89,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"inputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",89,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",89,{"inputs":[{"name":"self"},{"name":"inputflags"}],"output":{"name":"inputflags"}}],[11,"not","","Returns the complement of this set of flags.",89,{"inputs":[{"name":"self"}],"output":{"name":"inputflags"}}],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"inputflags"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"outputflags"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"outputflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"outputflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"outputflags"}],"output":{"name":"outputflags"}}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"self"}],"output":{"name":"outputflags"}}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"outputflags"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"ordering"}}],[11,"hash","","",91,null],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"controlflags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"controlflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",91,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"controlflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",91,{"inputs":[{"name":"self"},{"name":"controlflags"}],"output":{"name":"controlflags"}}],[11,"not","","Returns the complement of this set of flags.",91,{"inputs":[{"name":"self"}],"output":{"name":"controlflags"}}],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"controlflags"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"option"}}],[11,"lt","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"le","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"gt","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"ge","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"cmp","","",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"ordering"}}],[11,"hash","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"localflags"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"localflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"tcflag_t"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",92,{"inputs":[{"name":"tcflag_t"}],"output":{"name":"localflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",92,{"inputs":[{"name":"self"},{"name":"localflags"}],"output":{"name":"localflags"}}],[11,"not","","Returns the complement of this set of flags.",92,{"inputs":[{"name":"self"}],"output":{"name":"localflags"}}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"localflags"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"setarg"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"flusharg"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"flowarg"}}],[6,"tcflag_t","","",null,null],[6,"cc_t","","",null,null],[6,"speed_t","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"NCCS","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[0,"utsname","nix::sys","",null,null],[3,"UtsName","nix::sys::utsname","",null,null],[5,"uname","","",null,{"inputs":[],"output":{"name":"utsname"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"sysname","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"nodename","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"release","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"version","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"machine","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"wait","nix::sys","",null,null],[3,"WaitPidFlag","nix::sys::wait","",null,null],[4,"WaitStatus","","",null,null],[13,"Exited","","",94,null],[13,"Signaled","","",94,null],[13,"Stopped","","",94,null],[13,"Continued","","",94,null],[13,"StillAlive","","",94,null],[5,"waitpid","","",null,{"inputs":[{"name":"pid_t"},{"name":"option"}],"output":{"name":"result"}}],[5,"wait","","",null,{"inputs":[],"output":{"name":"result"}}],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"waitpidflag"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"inputs":[{"name":"c_int"}],"output":{"name":"waitpidflag"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"waitpidflag"}],"output":{"name":"waitpidflag"}}],[11,"not","","Returns the complement of this set of flags.",95,{"inputs":[{"name":"self"}],"output":{"name":"waitpidflag"}}],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"waitpidflag"}}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"waitstatus"}],"output":{"name":"bool"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"waitstatus"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mman","nix::sys","",null,null],[3,"MapFlags","nix::sys::mman","",null,null],[3,"MsFlags","","",null,null],[3,"ProtFlags","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mmap","","Calls to mmap are inherently unsafe, so they must be made in an unsafe block. Typically a higher-level abstraction will hide the unsafe interactions with the mmap'd region.",null,null],[5,"munmap","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"shm_open","","",null,{"inputs":[{"name":"p"},{"name":"oflag"},{"name":"mode"}],"output":{"name":"result"}}],[5,"shm_unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"ordering"}}],[11,"hash","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",96,{"inputs":[],"output":{"name":"mapflags"}}],[11,"all","","Returns the set containing all flags.",96,{"inputs":[],"output":{"name":"mapflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",96,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",96,{"inputs":[{"name":"c_int"}],"output":{"name":"mapflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",96,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",96,{"inputs":[{"name":"self"},{"name":"mapflags"}],"output":{"name":"mapflags"}}],[11,"not","","Returns the complement of this set of flags.",96,{"inputs":[{"name":"self"}],"output":{"name":"mapflags"}}],[11,"from_iter","","",96,{"inputs":[{"name":"t"}],"output":{"name":"mapflags"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"partial_cmp","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"option"}}],[11,"lt","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"le","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"gt","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"ge","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"cmp","","",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"ordering"}}],[11,"hash","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",97,{"inputs":[],"output":{"name":"msflags"}}],[11,"all","","Returns the set containing all flags.",97,{"inputs":[],"output":{"name":"msflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",97,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",97,{"inputs":[{"name":"c_int"}],"output":{"name":"msflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",97,{"inputs":[{"name":"self"},{"name":"msflags"}],"output":{"name":"msflags"}}],[11,"not","","Returns the complement of this set of flags.",97,{"inputs":[{"name":"self"}],"output":{"name":"msflags"}}],[11,"from_iter","","",97,{"inputs":[{"name":"t"}],"output":{"name":"msflags"}}],[6,"MmapAdvise","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"partial_cmp","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"option"}}],[11,"lt","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"le","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"gt","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"ge","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"cmp","","",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"ordering"}}],[11,"hash","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",98,{"inputs":[],"output":{"name":"protflags"}}],[11,"all","","Returns the set containing all flags.",98,{"inputs":[],"output":{"name":"protflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",98,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",98,{"inputs":[{"name":"c_int"}],"output":{"name":"protflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",98,{"inputs":[{"name":"self"},{"name":"protflags"}],"output":{"name":"protflags"}}],[11,"not","","Returns the complement of this set of flags.",98,{"inputs":[{"name":"self"}],"output":{"name":"protflags"}}],[11,"from_iter","","",98,{"inputs":[{"name":"t"}],"output":{"name":"protflags"}}],[0,"uio","nix::sys","",null,null],[3,"IoVec","nix::sys::uio","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"pwrite","","",null,null],[5,"pread","","",null,null],[11,"as_slice","","",99,null],[11,"from_slice","","",99,null],[11,"from_mut_slice","","",99,null],[0,"time","nix::sys","",null,null],[3,"TimeVal","nix::sys::time","",null,null],[12,"tv_sec","","",100,null],[12,"tv_usec","","",100,null],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"option"}}],[11,"lt","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"le","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"gt","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"ge","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"ordering"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zero","","",100,{"inputs":[],"output":{"name":"timeval"}}],[11,"hours","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"minutes","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"seconds","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"milliseconds","","",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"microseconds","","Makes a new `TimeVal` with given number of microseconds.",100,{"inputs":[{"name":"i64"}],"output":{"name":"timeval"}}],[11,"num_hours","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","",100,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"neg","","",100,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"add","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"sub","","",100,{"inputs":[{"name":"self"},{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"mul","","",100,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"div","","",100,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"timeval"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ptrace","nix::sys","",null,null],[5,"ptrace","nix::sys::ptrace","",null,null],[5,"ptrace_setoptions","","Set options, as with ptrace(PTRACE_SETOPTIONS,...).",null,{"inputs":[{"name":"pid_t"},{"name":"ptraceoptions"}],"output":{"name":"result"}}],[0,"ptrace","","",null,null],[6,"PtraceRequest","nix::sys::ptrace::ptrace","",null,null],[6,"PtraceEvent","","",null,null],[6,"PtraceOptions","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"PTRACE_EVENT_STOP","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[0,"select","nix::sys","",null,null],[3,"FdSet","nix::sys::select","",null,null],[5,"select","","",null,{"inputs":[{"name":"c_int"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[17,"FD_SETSIZE","","",null,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"fdset"}}],[11,"new","","",101,{"inputs":[],"output":{"name":"fdset"}}],[11,"insert","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"remove","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":null}],[11,"contains","","",101,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"bool"}}],[11,"clear","","",101,{"inputs":[{"name":"self"}],"output":null}],[0,"quota","nix::sys","",null,null],[5,"quotactl_on","nix::sys::quota","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"quotafmt"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_off","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"}],"output":{"name":"result"}}],[5,"quotactl_sync","","",null,{"inputs":[{"name":"quotatype"},{"name":"option"}],"output":{"name":"result"}}],[5,"quotactl_get","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[5,"quotactl_set","","",null,{"inputs":[{"name":"quotatype"},{"name":"p"},{"name":"c_int"},{"name":"dqblk"}],"output":{"name":"result"}}],[0,"quota","","",null,null],[3,"QuotaCmd","nix::sys::quota::quota","",null,null],[12,"0","","",102,null],[12,"1","","",102,null],[3,"QuotaValidFlags","","",null,null],[3,"Dqblk","","",null,null],[12,"bhardlimit","","",103,null],[12,"bsoftlimit","","",103,null],[12,"curspace","","",103,null],[12,"ihardlimit","","",103,null],[12,"isoftlimit","","",103,null],[12,"curinodes","","",103,null],[12,"btime","","",103,null],[12,"itime","","",103,null],[12,"valid","","",103,null],[6,"QuotaSubCmd","","",null,null],[6,"QuotaType","","",null,null],[6,"QuotaFmt","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[11,"as_int","","",102,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"option"}}],[11,"lt","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"le","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"gt","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"ge","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"ordering"}}],[11,"hash","","",104,null],[11,"default","","",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"all","","Returns the set containing all flags.",104,{"inputs":[],"output":{"name":"quotavalidflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",104,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",104,{"inputs":[{"name":"u32"}],"output":{"name":"quotavalidflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",104,{"inputs":[{"name":"self"},{"name":"quotavalidflags"}],"output":{"name":"quotavalidflags"}}],[11,"not","","Returns the complement of this set of flags.",104,{"inputs":[{"name":"self"}],"output":{"name":"quotavalidflags"}}],[11,"from_iter","","",104,{"inputs":[{"name":"t"}],"output":{"name":"quotavalidflags"}}],[11,"default","","",103,{"inputs":[],"output":{"name":"dqblk"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[0,"statfs","nix::sys","",null,null],[5,"statfs","nix::sys::statfs","",null,{"inputs":[{"name":"p"},{"name":"statfs"}],"output":{"name":"result"}}],[5,"fstatfs","","",null,{"inputs":[{"name":"t"},{"name":"statfs"}],"output":{"name":"result"}}],[0,"vfs","","",null,null],[3,"Statfs","nix::sys::statfs::vfs","",null,null],[12,"f_type","","",105,null],[12,"f_bsize","","",105,null],[12,"f_blocks","","",105,null],[12,"f_bfree","","",105,null],[12,"f_bavail","","",105,null],[12,"f_files","","",105,null],[12,"f_ffree","","",105,null],[12,"f_fsid","","",105,null],[12,"f_namelen","","",105,null],[12,"f_frsize","","",105,null],[12,"f_spare","","",105,null],[0,"hwdep","","",null,null],[6,"FsType","nix::sys::statfs::vfs::hwdep","",null,null],[6,"BlockSize","","",null,null],[6,"NameLen","","",null,null],[6,"FragmentSize","","",null,null],[6,"SwordType","","",null,null],[17,"ADFS_SUPER_MAGIC","nix::sys::statfs::vfs","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"BEFS_SUPER_MAGIC","","",null,null],[17,"BFS_MAGIC","","",null,null],[17,"CIFS_MAGIC_NUMBER","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"COH_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"DEVFS_SUPER_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT_SUPER_MAGIC","","",null,null],[17,"EXT2_OLD_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HFS_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"JFS_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"NTFS_SB_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"ROMFS_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"SYSV2_SUPER_MAGIC","","",null,null],[17,"SYSV4_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"UDF_SUPER_MAGIC","","",null,null],[17,"UFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VXFS_SUPER_MAGIC","","",null,null],[17,"XENIX_SUPER_MAGIC","","",null,null],[17,"XFS_SUPER_MAGIC","","",null,null],[17,"_XIAFS_SUPER_MAGIC","","",null,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[0,"statvfs","nix::sys","FFI for statvfs functions",null,null],[5,"statvfs","nix::sys::statvfs","Fill an existing `Statvfs` object with information about the `path`",null,{"inputs":[{"name":"p"},{"name":"statvfs"}],"output":{"name":"result"}}],[5,"fstatvfs","","Fill an existing `Statvfs` object with information about `fd`",null,{"inputs":[{"name":"t"},{"name":"statvfs"}],"output":{"name":"result"}}],[0,"vfs","","Structs related to the `statvfs` and `fstatvfs` functions",null,null],[3,"FsFlags","nix::sys::statvfs::vfs","Mount Flags",null,null],[3,"Statvfs","","The posix statvfs struct",null,null],[12,"f_bsize","","Filesystem block size. This is the value that will lead to most efficient use of the filesystem",106,null],[12,"f_frsize","","Fragment Size -- actual minimum unit of allocation on this filesystem",106,null],[12,"f_blocks","","Total number of blocks on the filesystem",106,null],[12,"f_bfree","","Number of unused blocks on the filesystem, including those reserved for root",106,null],[12,"f_bavail","","Number of blocks available to non-root users",106,null],[12,"f_files","","Total number of inodes available on the filesystem",106,null],[12,"f_ffree","","Number of inodes available on the filesystem",106,null],[12,"f_favail","","Number of inodes available to non-root users",106,null],[12,"f_fsid","","File System ID",106,null],[12,"f_flag","","Mount Flags",106,null],[12,"f_namemax","","Maximum filename length",106,null],[17,"RDONLY","","Read Only",null,null],[17,"NOSUID","","Do not allow the set-uid bits to have an effect",null,null],[17,"NODEV","","Do not interpret character or block-special devices",null,null],[17,"NOEXEC","","Do not allow execution of binaries on the filesystem",null,null],[17,"SYNCHRONOUS","","All IO should be done synchronously",null,null],[17,"MANDLOCK","","Allow mandatory locks on the filesystem",null,null],[17,"WRITE","","",null,null],[17,"APPEND","","",null,null],[17,"IMMUTABLE","","",null,null],[17,"NOATIME","","Do not update access times on files",null,null],[17,"NODIRATIME","","Do not update access times on files",null,null],[17,"RELATIME","","Update access time relative to modify/change time",null,null],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"cmp","","",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"ordering"}}],[11,"hash","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"all","","Returns the set containing all flags.",107,{"inputs":[],"output":{"name":"fsflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"c_ulong"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",107,{"inputs":[{"name":"c_ulong"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",107,{"inputs":[{"name":"c_ulong"}],"output":{"name":"fsflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",107,{"inputs":[{"name":"self"},{"name":"fsflags"}],"output":{"name":"fsflags"}}],[11,"not","","Returns the complement of this set of flags.",107,{"inputs":[{"name":"self"}],"output":{"name":"fsflags"}}],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"fsflags"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"for_path","","Create a new `Statvfs` object and fill it with information about the mount that contains `path`",106,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"update_with_path","","Replace information in this struct with information about `path`",106,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"for_fd","","Create a new `Statvfs` object and fill it with information from fd",106,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"update_with_fd","","Replace information in this struct with information about `fd`",106,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"default","","Create a statvfs object initialized to all zeros",106,{"inputs":[],"output":{"name":"self"}}],[0,"unistd","nix","Standard symbolic constants and types",null,null],[4,"Fork","nix::unistd","",null,null],[13,"Parent","","",108,null],[13,"Child","","",108,null],[5,"pivot_root","","",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":{"name":"result"}}],[5,"fork","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"getpid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"getppid","","",null,{"inputs":[],"output":{"name":"pid_t"}}],[5,"setpgid","","",null,{"inputs":[{"name":"pid_t"},{"name":"pid_t"}],"output":{"name":"result"}}],[5,"dup","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup2","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"}],"output":{"name":"result"}}],[5,"dup3","","",null,{"inputs":[{"name":"rawfd"},{"name":"rawfd"},{"name":"oflag"}],"output":{"name":"result"}}],[5,"chdir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chown","","",null,{"inputs":[{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"daemon","","",null,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"sethostname","","",null,null],[5,"gethostname","","",null,null],[5,"close","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"read","","",null,null],[5,"write","","",null,null],[5,"pipe","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"pipe2","","",null,{"inputs":[{"name":"oflag"}],"output":{"name":"result"}}],[5,"ftruncate","","",null,{"inputs":[{"name":"rawfd"},{"name":"off_t"}],"output":{"name":"result"}}],[5,"isatty","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"unlink","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"chroot","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"fsync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"fdatasync","","",null,{"inputs":[{"name":"rawfd"}],"output":{"name":"result"}}],[5,"getuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"geteuid","","",null,{"inputs":[],"output":{"name":"uid_t"}}],[5,"getgid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"getegid","","",null,{"inputs":[],"output":{"name":"gid_t"}}],[5,"setuid","","",null,{"inputs":[{"name":"uid_t"}],"output":{"name":"result"}}],[5,"setgid","","",null,{"inputs":[{"name":"gid_t"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"fork"}}],[11,"is_child","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_parent","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[6,"Result","nix","",null,null],[8,"NixPath","","",null,null],[10,"len","","",109,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"with_nix_path","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_errno","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"last","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_argument","","",1,{"inputs":[],"output":{"name":"error"}}],[11,"errno","","",1,{"inputs":[{"name":"self"}],"output":{"name":"errno"}}],[11,"from","","",1,{"inputs":[{"name":"errno"}],"output":{"name":"error"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"ioc","","Encode an ioctl command.",null,null],[14,"io","","Encode an ioctl command that has no associated data.",null,null],[14,"ior","","Encode an ioctl command that reads.",null,null],[14,"iow","","Encode an ioctl command that writes.",null,null],[14,"iorw","","Encode an ioctl command that both reads and writes.",null,null],[14,"convert_ioctl_res","","Convert raw ioctl return value to a Nix result",null,null],[14,"ioctl","","Declare a wrapper function around an ioctl.",null,null],[11,"clone","nix::sys::socket","",28,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","nix::sys::stat","",82,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}]],"paths":[[4,"Errno"],[4,"Error"],[8,"ErrnoSentinel"],[3,"flock"],[4,"FcntlArg"],[4,"FlockArg"],[3,"SpliceFFlags"],[3,"OFlag"],[3,"FdFlag"],[3,"SealFlag"],[3,"MsFlags"],[3,"MntFlags"],[3,"MqAttr"],[3,"MQ_OFlag"],[3,"FdFlag"],[3,"PollFd"],[3,"EventFlags"],[3,"CloneFlags"],[3,"CpuSet"],[3,"EpollEvent"],[4,"EpollOp"],[3,"EpollEventKind"],[3,"MemFdCreateFlag"],[4,"SigHandler"],[3,"SaFlag"],[3,"SigFlag"],[3,"SigSet"],[3,"SigAction"],[3,"in_addr"],[3,"in6_addr"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"UnixAddr"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[3,"NetlinkAddr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"RecvMsg"],[3,"linger"],[4,"AddressFamily"],[4,"SockAddr"],[4,"InetAddr"],[4,"IpAddr"],[4,"SockType"],[4,"ControlMessage"],[4,"SockLevel"],[4,"Shutdown"],[3,"MsgFlags"],[3,"ReuseAddr"],[3,"ReusePort"],[3,"TcpNoDelay"],[3,"Linger"],[3,"IpAddMembership"],[3,"IpDropMembership"],[3,"Ipv6AddMembership"],[3,"Ipv6DropMembership"],[3,"IpMulticastTtl"],[3,"IpMulticastLoop"],[3,"ReceiveTimeout"],[3,"SendTimeout"],[3,"Broadcast"],[3,"OobInline"],[3,"SocketError"],[3,"KeepAlive"],[3,"PeerCredentials"],[3,"TcpKeepIdle"],[3,"RcvBuf"],[3,"SndBuf"],[3,"RcvBufForce"],[3,"SndBufForce"],[3,"SockType"],[3,"AcceptConn"],[8,"GetSockOpt"],[8,"SetSockOpt"],[3,"SockFlag"],[3,"CmsgSpace"],[3,"CmsgIterator"],[3,"ucred"],[3,"FileStat"],[3,"SFlag"],[3,"Mode"],[3,"Termios"],[4,"SetArg"],[4,"FlushArg"],[4,"FlowArg"],[3,"InputFlags"],[3,"OutputFlags"],[3,"ControlFlags"],[3,"LocalFlags"],[3,"UtsName"],[4,"WaitStatus"],[3,"WaitPidFlag"],[3,"MapFlags"],[3,"MsFlags"],[3,"ProtFlags"],[3,"IoVec"],[3,"TimeVal"],[3,"FdSet"],[3,"QuotaCmd"],[3,"Dqblk"],[3,"QuotaValidFlags"],[3,"Statfs"],[3,"Statvfs"],[3,"FsFlags"],[4,"Fork"],[8,"NixPath"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",11,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["owning_ref"] = {"doc":"An owning reference.","items":[[3,"OwningRef","owning_ref","An owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent _object_.",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",null,null],[8,"StableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` gets moved.",null,null],[8,"CloneStableAddress","","Marker trait for expressing that the memory address of the value reachable via a dereference remains identical even if `self` is a clone.",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,null],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"new_assert_stable_address","","Like `new`, but dosen’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"try_map","","Variant of `map()` that may fail.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"owningref"}}],[11,"map_owner_box","","Converts `self` into a new owning reference where the onwer is wrapped in an additional `Box<O>`.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",1,{"inputs":[{"name":"self"}],"output":{"name":"owningref"}}],[11,"owner","","A getter for the underlying owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"into_inner","","Discards the reference and retrieves the owner.",1,{"inputs":[{"name":"self"}],"output":{"name":"o"}}],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"self"}}],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",2,{"inputs":[{"name":"o"},{"name":"f"}],"output":{"name":"result"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"o"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}]],"paths":[[8,"IntoErased"],[3,"OwningRef"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"] = {"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library.","items":[[3,"Once","parking_lot","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",null,null],[3,"OnceState","","State yielded to the `call_once_force` method which can be used to query whether the `Once` was previously poisoned or not.",null,null],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"waittimeoutresult"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",1,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"notify_all","","Wakes up all blocked threads on this condvar.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"}],"output":null}],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"instant"}],"output":{"name":"waittimeoutresult"}}],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",1,{"inputs":[{"name":"self"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"waittimeoutresult"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"condvar"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",2,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",2,{"inputs":[{"name":"self"}],"output":{"name":"mutexguard"}}],[11,"try_lock","","Attempts to acquire this lock.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",2,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",2,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock","","Releases the mutex.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_fair","","Releases the mutex using a fair unlock protocol.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_lock","","Acquires a mutex, blocking the current thread until it is able to do so.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_lock","","Attempts to acquire this lock.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",4,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_read_for","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_read_until","","Attempts to acquire this rwlock with shared read access until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",4,{"inputs":[{"name":"self"}],"output":{"name":"rwlockwriteguard"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_write_for","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"try_write_until","","Attempts to acquire this rwlock with exclusive write access until a timeout is reached.",4,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"raw_unlock_read","","Releases shared read access of the rwlock.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write","","Releases exclusive write access of the rwlock.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_read_fair","","Releases shared read access of the rwlock using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_unlock_write_fair","","Releases exclusive write access of the rwlock using a fair unlock protocol.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_read","","Locks this rwlock with shared read access, blocking the current thread until it can be acquired.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_read","","Attempts to acquire this rwlock with shared read access.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"raw_write","","Locks this rwlock with exclusive write access, blocking the current thread until it can be acquired.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"raw_try_write","","Attempts to lock this rwlock with exclusive write access.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"rwlock"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",6,{"inputs":[{"name":"self"}],"output":{"name":"rwlockreadguard"}}],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Once` value.",8,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will *not* be invoked.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"default","","",8,{"inputs":[],"output":{"name":"once"}}],[6,"MutexGuardRef","","Typedef of an owning reference that uses a `MutexGuard` as the owner.",null,null],[6,"RwLockReadGuardRef","","Typedef of an owning reference that uses a `RwLockReadGuard` as the owner.",null,null],[6,"RwLockWriteGuardRef","","Typedef of an owning reference that uses a `RwLockWriteGuard` as the owner.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null]],"paths":[[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Mutex"],[3,"MutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"OnceState"],[3,"Once"]]};
searchIndex["parking_lot_core"] = {"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"UnparkResult","parking_lot_core","Result of an unpark operation.",null,null],[12,"unparked_threads","","The number of threads that were unparked.",0,null],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",0,null],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",0,null],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",null,null],[12,"0","","",1,null],[3,"ParkToken","","A value associated with a parked thread which can be used by `unpark_filter`.",null,null],[12,"0","","",2,null],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",null,null],[4,"ParkResult","","Result of a park operation.",null,null],[13,"Unparked","","We were unparked by another thread with the given token.",3,null],[13,"Invalid","","The validation callback returned false.",3,null],[13,"TimedOut","","The timeout expired.",3,null],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",null,null],[13,"Abort","","Abort the operation without doing anything.",4,null],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",4,null],[13,"RequeueAll","","Requeue all threads onto the target queue.",4,null],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",null,null],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",5,null],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",5,null],[5,"park","","Parks the current thread in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"v"},{"name":"b"},{"name":"t"},{"name":"parktoken"},{"name":"option"}],"output":{"name":"parkresult"}}],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",null,{"inputs":[{"name":"usize"},{"name":"unparktoken"}],"output":{"name":"usize"}}],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",null,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"v"},{"name":"c"}],"output":{"name":"unparkresult"}}],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",null,{"inputs":[{"name":"usize"},{"name":"f"},{"name":"c"}],"output":{"name":"unparkresult"}}],[11,"new","","Creates a new `SpinWait`.",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"reset","","Resets a `SpinWait` to its initial state.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"spin","","Spins until the sleep threshold has been reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",6,{"inputs":[],"output":{"name":"spinwait"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"parkresult"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"parkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_unparked","","Returns true if we were unparked by another thread.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unparkresult"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unparkresult"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"requeueop"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"requeueop"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unparktoken"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unparktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parktoken"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parktoken"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",null,null],[17,"DEFAULT_PARK_TOKEN","","A default park token to use.",null,null]],"paths":[[3,"UnparkResult"],[3,"UnparkToken"],[3,"ParkToken"],[4,"ParkResult"],[4,"RequeueOp"],[4,"FilterOp"],[3,"SpinWait"]]};
searchIndex["protobuf"] = {"doc":"","items":[[3,"UnknownFields","protobuf","",null,null],[12,"fields","","",0,null],[3,"UnknownFieldsIter","","",null,null],[3,"UnknownValues","","",null,null],[12,"fixed32","","",1,null],[12,"fixed64","","",1,null],[12,"varint","","",1,null],[12,"length_delimited","","",1,null],[3,"UnknownValuesIter","","",null,null],[3,"CachedSize","","Cached size field used in generated code. It is always equal to itself to simplify generated code. (Generated code can use `#[derive(Eq)]`).",null,null],[4,"UnknownValue","","",null,null],[13,"Fixed32","","",2,null],[13,"Fixed64","","",2,null],[13,"Varint","","",2,null],[13,"LengthDelimited","","",2,null],[4,"UnknownValueRef","","",null,null],[13,"Fixed32","","",3,null],[13,"Fixed64","","",3,null],[13,"Varint","","",3,null],[13,"LengthDelimited","","",3,null],[0,"descriptor","","",null,null],[3,"FileDescriptorSet","protobuf::descriptor","",null,null],[3,"FileDescriptorProto","","",null,null],[3,"DescriptorProto","","",null,null],[3,"DescriptorProto_ExtensionRange","","",null,null],[3,"DescriptorProto_ReservedRange","","",null,null],[3,"FieldDescriptorProto","","",null,null],[3,"OneofDescriptorProto","","",null,null],[3,"EnumDescriptorProto","","",null,null],[3,"EnumValueDescriptorProto","","",null,null],[3,"ServiceDescriptorProto","","",null,null],[3,"MethodDescriptorProto","","",null,null],[3,"FileOptions","","",null,null],[3,"MessageOptions","","",null,null],[3,"FieldOptions","","",null,null],[3,"OneofOptions","","",null,null],[3,"EnumOptions","","",null,null],[3,"EnumValueOptions","","",null,null],[3,"ServiceOptions","","",null,null],[3,"MethodOptions","","",null,null],[3,"UninterpretedOption","","",null,null],[3,"UninterpretedOption_NamePart","","",null,null],[3,"SourceCodeInfo","","",null,null],[3,"SourceCodeInfo_Location","","",null,null],[3,"GeneratedCodeInfo","","",null,null],[3,"GeneratedCodeInfo_Annotation","","",null,null],[4,"FieldDescriptorProto_Type","","",null,null],[13,"TYPE_DOUBLE","","",4,null],[13,"TYPE_FLOAT","","",4,null],[13,"TYPE_INT64","","",4,null],[13,"TYPE_UINT64","","",4,null],[13,"TYPE_INT32","","",4,null],[13,"TYPE_FIXED64","","",4,null],[13,"TYPE_FIXED32","","",4,null],[13,"TYPE_BOOL","","",4,null],[13,"TYPE_STRING","","",4,null],[13,"TYPE_GROUP","","",4,null],[13,"TYPE_MESSAGE","","",4,null],[13,"TYPE_BYTES","","",4,null],[13,"TYPE_UINT32","","",4,null],[13,"TYPE_ENUM","","",4,null],[13,"TYPE_SFIXED32","","",4,null],[13,"TYPE_SFIXED64","","",4,null],[13,"TYPE_SINT32","","",4,null],[13,"TYPE_SINT64","","",4,null],[4,"FieldDescriptorProto_Label","","",null,null],[13,"LABEL_OPTIONAL","","",5,null],[13,"LABEL_REQUIRED","","",5,null],[13,"LABEL_REPEATED","","",5,null],[4,"FileOptions_OptimizeMode","","",null,null],[13,"SPEED","","",6,null],[13,"CODE_SIZE","","",6,null],[13,"LITE_RUNTIME","","",6,null],[4,"FieldOptions_CType","","",null,null],[13,"STRING","","",7,null],[13,"CORD","","",7,null],[13,"STRING_PIECE","","",7,null],[4,"FieldOptions_JSType","","",null,null],[13,"JS_NORMAL","","",8,null],[13,"JS_STRING","","",8,null],[13,"JS_NUMBER","","",8,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"filedescriptorset"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorset"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"default_instance","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"clear_file","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",9,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",9,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",9,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_file","","",9,null],[11,"is_initialized","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",9,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",9,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",9,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",9,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",9,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",9,{"inputs":[],"output":{"name":"filedescriptorset"}}],[11,"descriptor_static","","",9,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"filedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"default","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"default_instance","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"clear_name","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_package","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_package","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_package","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_dependency","","",10,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_dependency","","",10,null],[11,"clear_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_public_dependency","","",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_public_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_public_dependency","","",10,null],[11,"clear_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_weak_dependency","","",10,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_weak_dependency","","",10,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_weak_dependency","","",10,null],[11,"clear_message_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_message_type","","",10,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_message_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_message_type","","",10,null],[11,"clear_enum_type","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",10,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_enum_type","","",10,null],[11,"clear_service","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_service","","",10,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_service","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_service","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_service","","",10,null],[11,"clear_extension","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",10,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",10,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_extension","","",10,null],[11,"clear_options","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",10,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":null}],[11,"mut_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"take_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"get_options","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"clear_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_code_info","","",10,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":null}],[11,"mut_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"take_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"get_source_code_info","","",10,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"clear_syntax","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"has_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_syntax","","",10,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_syntax","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",10,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",10,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",10,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"descriptor_static","","",10,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"descriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"default_instance","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"clear_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",11,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_field","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_field","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_field","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_field","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_field","","",11,null],[11,"clear_extension","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_extension","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_extension","","",11,null],[11,"clear_nested_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_nested_type","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_nested_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_nested_type","","",11,null],[11,"clear_enum_type","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_enum_type","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_enum_type","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_enum_type","","",11,null],[11,"clear_extension_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_extension_range","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_extension_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_extension_range","","",11,null],[11,"clear_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_oneof_decl","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_oneof_decl","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_oneof_decl","","",11,null],[11,"clear_options","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",11,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":null}],[11,"mut_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"take_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"get_options","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"clear_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_range","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_range","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_reserved_range","","",11,null],[11,"clear_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"set_reserved_name","","",11,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_reserved_name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_reserved_name","","",11,null],[11,"is_initialized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",11,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",11,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",11,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"descriptorproto"}}],[11,"descriptor_static","","",11,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"descriptorproto_extensionrange"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"default_instance","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"clear_start","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",12,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",12,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",12,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",12,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",12,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",12,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"descriptorproto_extensionrange"}}],[11,"descriptor_static","","",12,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"descriptorproto_reservedrange"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"default_instance","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"clear_start","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_start","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_start","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",13,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",13,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",13,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",13,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",13,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",13,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",13,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"descriptorproto_reservedrange"}}],[11,"descriptor_static","","",13,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"default","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"default_instance","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"clear_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_label","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_label","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":null}],[11,"get_label","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"clear_field_type","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_field_type","","",14,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":null}],[11,"get_field_type","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"clear_type_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_type_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_type_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_extendee","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_extendee","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_extendee","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_default_value","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_default_value","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_default_value","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_oneof_index","","",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_oneof_index","","",14,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_json_name","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_json_name","","",14,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_json_name","","",14,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",14,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":null}],[11,"mut_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"take_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"get_options","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"is_initialized","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",14,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",14,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",14,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",14,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",14,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",14,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",14,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"fielddescriptorproto"}}],[11,"descriptor_static","","",14,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_type"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_type"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"value","","",4,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",4,null],[11,"enum_descriptor_static","","",4,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto_label"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"fielddescriptorproto_label"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"value","","",5,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",5,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",5,null],[11,"enum_descriptor_static","","",5,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"oneofdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofdescriptorproto"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"default_instance","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"clear_name","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",15,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",15,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",15,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":null}],[11,"mut_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"take_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"get_options","","",15,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"is_initialized","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",15,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",15,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",15,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",15,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",15,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",15,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",15,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",15,{"inputs":[],"output":{"name":"oneofdescriptorproto"}}],[11,"descriptor_static","","",15,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"enumdescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptorproto"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"default_instance","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"clear_name","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",16,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",16,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_value","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"set_value","","",16,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_value","","",16,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_value","","",16,null],[11,"clear_options","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",16,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":null}],[11,"mut_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"take_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"get_options","","",16,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"is_initialized","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",16,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",16,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",16,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",16,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",16,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"enumdescriptorproto"}}],[11,"descriptor_static","","",16,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"enumvaluedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"default_instance","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"clear_name","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",17,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",17,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_number","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_number","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_number","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_options","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",17,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":null}],[11,"mut_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"take_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"get_options","","",17,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"is_initialized","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",17,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",17,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",17,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",17,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",17,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",17,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",17,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",17,{"inputs":[],"output":{"name":"enumvaluedescriptorproto"}}],[11,"descriptor_static","","",17,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"servicedescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servicedescriptorproto"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"default_instance","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"clear_name","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",18,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_method","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"set_method","","",18,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_method","","",18,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_method","","",18,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_method","","",18,null],[11,"clear_options","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",18,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":null}],[11,"mut_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"take_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"get_options","","",18,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"is_initialized","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",18,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",18,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",18,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",18,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",18,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"servicedescriptorproto"}}],[11,"descriptor_static","","",18,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"methoddescriptorproto"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methoddescriptorproto"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"default_instance","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"clear_name","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_input_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_input_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_input_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_output_type","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_output_type","","",19,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_output_type","","",19,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_options","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_options","","",19,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":null}],[11,"mut_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"take_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"get_options","","",19,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"clear_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_client_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_client_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"has_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_server_streaming","","",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_server_streaming","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",19,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",19,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",19,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",19,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",19,{"inputs":[],"output":{"name":"methoddescriptorproto"}}],[11,"descriptor_static","","",19,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"default_instance","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"clear_java_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_outer_classname","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_java_outer_classname","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_multiple_files","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_multiple_files","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generate_equals_and_hash","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_string_check_utf8","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_string_check_utf8","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_optimize_for","","",20,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":null}],[11,"get_optimize_for","","",20,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"clear_go_package","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_go_package","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_go_package","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_java_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_java_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_py_generic_services","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_py_generic_services","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_cc_enable_arenas","","",20,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_cc_enable_arenas","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_objc_class_prefix","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_objc_class_prefix","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"has_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_csharp_namespace","","",20,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_csharp_namespace","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",20,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",20,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",20,null],[11,"is_initialized","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",20,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",20,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",20,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",20,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",20,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",20,{"inputs":[],"output":{"name":"fileoptions"}}],[11,"descriptor_static","","",20,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fileoptions_optimizemode"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fileoptions_optimizemode"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"value","","",6,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",6,null],[11,"enum_descriptor_static","","",6,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"messageoptions"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messageoptions"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"default_instance","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"clear_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_message_set_wire_format","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_message_set_wire_format","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_no_standard_descriptor_accessor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_map_entry","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"has_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_map_entry","","",21,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_map_entry","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",21,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",21,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",21,null],[11,"is_initialized","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",21,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",21,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",21,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",21,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",21,{"inputs":[],"output":{"name":"messageoptions"}}],[11,"descriptor_static","","",21,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"default_instance","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"clear_ctype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_ctype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":null}],[11,"get_ctype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"clear_packed","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_packed","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_packed","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_jstype","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_jstype","","",22,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":null}],[11,"get_jstype","","",22,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"clear_lazy","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_lazy","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_lazy","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_weak","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"has_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_weak","","",22,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_weak","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",22,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",22,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",22,null],[11,"is_initialized","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",22,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",22,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",22,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",22,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",22,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",22,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",22,{"inputs":[],"output":{"name":"fieldoptions"}}],[11,"descriptor_static","","",22,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_ctype"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"fieldoptions_ctype"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"value","","",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",7,null],[11,"enum_descriptor_static","","",7,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"fieldoptions_jstype"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"fieldoptions_jstype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"value","","",8,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_i32","","",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",8,null],[11,"enum_descriptor_static","","",8,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[11,"as_ref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"oneofoptions"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"oneofoptions"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"default_instance","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"clear_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",23,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",23,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",23,null],[11,"is_initialized","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",23,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",23,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",23,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",23,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",23,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",23,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",23,{"inputs":[],"output":{"name":"oneofoptions"}}],[11,"descriptor_static","","",23,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"enumoptions"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"enumoptions"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"default_instance","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"clear_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_allow_alias","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_allow_alias","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_deprecated","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",24,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",24,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",24,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",24,null],[11,"is_initialized","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",24,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",24,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",24,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",24,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",24,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",24,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",24,{"inputs":[],"output":{"name":"enumoptions"}}],[11,"descriptor_static","","",24,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"enumvalueoptions"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"enumvalueoptions"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"default_instance","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"clear_deprecated","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",25,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",25,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",25,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",25,null],[11,"is_initialized","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",25,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",25,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",25,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",25,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",25,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",25,{"inputs":[],"output":{"name":"enumvalueoptions"}}],[11,"descriptor_static","","",25,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"serviceoptions"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"serviceoptions"}}],[11,"default","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"default_instance","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"clear_deprecated","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",26,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",26,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",26,null],[11,"is_initialized","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",26,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",26,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",26,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",26,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",26,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",26,{"inputs":[],"output":{"name":"serviceoptions"}}],[11,"descriptor_static","","",26,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"methodoptions"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"methodoptions"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"default_instance","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"clear_deprecated","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"has_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_deprecated","","",27,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_deprecated","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"set_uninterpreted_option","","",27,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_uninterpreted_option","","",27,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_uninterpreted_option","","",27,null],[11,"is_initialized","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",27,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",27,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",27,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",27,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",27,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",27,{"inputs":[],"output":{"name":"methodoptions"}}],[11,"descriptor_static","","",27,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"uninterpretedoption"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption"}}],[11,"default","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"default_instance","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"clear_name","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"set_name","","",28,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_name","","",28,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_name","","",28,null],[11,"clear_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_identifier_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_identifier_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_positive_int_value","","",28,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"get_positive_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"clear_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_negative_int_value","","",28,{"inputs":[{"name":"self"},{"name":"i64"}],"output":null}],[11,"get_negative_int_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"clear_double_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_double_value","","",28,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"get_double_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clear_string_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_string_value","","",28,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_string_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_string_value","","",28,null],[11,"clear_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"has_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_aggregate_value","","",28,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_aggregate_value","","",28,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",28,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",28,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",28,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",28,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",28,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",28,{"inputs":[],"output":{"name":"uninterpretedoption"}}],[11,"descriptor_static","","",28,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"uninterpretedoption_namepart"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"default_instance","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"clear_name_part","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name_part","","",29,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name_part","","",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_is_extension","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"has_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_is_extension","","",29,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"get_is_extension","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_initialized","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",29,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",29,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",29,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",29,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",29,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",29,{"inputs":[],"output":{"name":"uninterpretedoption_namepart"}}],[11,"descriptor_static","","",29,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo"}}],[11,"default","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"default_instance","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"clear_location","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"set_location","","",30,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_location","","",30,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_location","","",30,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_location","","",30,null],[11,"is_initialized","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",30,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",30,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",30,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",30,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",30,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",30,{"inputs":[],"output":{"name":"sourcecodeinfo"}}],[11,"descriptor_static","","",30,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"sourcecodeinfo_location"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"sourcecodeinfo_location"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"default_instance","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"clear_path","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",31,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_path","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_path","","",31,null],[11,"clear_span","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_span","","",31,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_span","","",31,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_span","","",31,null],[11,"clear_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_leading_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_leading_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"has_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_trailing_comments","","",31,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_trailing_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"set_leading_detached_comments","","",31,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_leading_detached_comments","","",31,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_leading_detached_comments","","",31,null],[11,"is_initialized","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",31,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",31,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",31,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",31,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",31,{"inputs":[],"output":{"name":"sourcecodeinfo_location"}}],[11,"descriptor_static","","",31,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo"}}],[11,"default","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"default_instance","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"clear_annotation","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"set_annotation","","",32,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_annotation","","",32,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_annotation","","",32,null],[11,"is_initialized","","",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",32,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",32,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",32,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",32,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",32,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",32,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"generatedcodeinfo"}}],[11,"descriptor_static","","",32,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"generatedcodeinfo_annotation"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"default_instance","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"clear_path","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"set_path","","",33,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"mut_path","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"take_path","","",33,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_path","","",33,null],[11,"clear_source_file","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_source_file","","",33,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_source_file","","",33,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_begin","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_begin","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_begin","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"clear_end","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"has_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_end","","",33,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"get_end","","",33,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"is_initialized","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",33,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",33,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",33,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",33,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",33,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"generatedcodeinfo_annotation"}}],[11,"descriptor_static","","",33,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"plugin","protobuf","",null,null],[3,"CodeGeneratorRequest","protobuf::plugin","",null,null],[3,"CodeGeneratorResponse","","",null,null],[3,"CodeGeneratorResponse_File","","",null,null],[5,"file_descriptor_proto","","",null,{"inputs":[],"output":{"name":"filedescriptorproto"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"codegeneratorrequest"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorrequest"}}],[11,"default","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"default_instance","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"clear_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file_to_generate","","",34,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file_to_generate","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_file_to_generate","","",34,null],[11,"clear_parameter","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"has_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_parameter","","",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_parameter","","",34,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_proto_file","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"set_proto_file","","",34,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_proto_file","","",34,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_proto_file","","",34,null],[11,"is_initialized","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",34,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",34,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",34,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",34,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",34,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",34,{"inputs":[],"output":{"name":"codegeneratorrequest"}}],[11,"descriptor_static","","",34,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse"}}],[11,"default","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"default_instance","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"clear_error","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"has_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_error","","",35,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_error","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_file","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"set_file","","",35,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":null}],[11,"mut_file","","",35,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"take_file","","",35,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"get_file","","",35,null],[11,"is_initialized","","",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",35,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",35,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",35,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",35,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",35,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",35,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",35,{"inputs":[],"output":{"name":"codegeneratorresponse"}}],[11,"descriptor_static","","",35,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"codegeneratorresponse_file"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"codegeneratorresponse_file"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"default_instance","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"clear_name","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_name","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_name","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_insertion_point","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_insertion_point","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clear_content","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"has_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_content","","",36,{"inputs":[{"name":"self"},{"name":"string"}],"output":null}],[11,"mut_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"take_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get_content","","",36,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_initialized","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"merge_from","","",36,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to_with_cached_sizes","","",36,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"get_cached_size","","",36,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"mut_unknown_fields","","",36,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"as_any","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",36,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",36,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"descriptor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"codegeneratorresponse_file"}}],[11,"descriptor_static","","",36,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[11,"clear","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[0,"core","protobuf","",null,null],[5,"message_down_cast","protobuf::core","",null,{"inputs":[{"name":"message"}],"output":{"name":"m"}}],[5,"parse_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_from_bytes","","",null,null],[5,"parse_length_delimited_from","","",null,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_reader","","",null,{"inputs":[{"name":"read"}],"output":{"name":"protobufresult"}}],[5,"parse_length_delimited_from_bytes","","",null,null],[8,"Message","","",null,null],[10,"descriptor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"messagedescriptor"}}],[10,"is_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"merge_from","","",37,{"inputs":[{"name":"self"},{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"write_to_with_cached_sizes","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"get_cached_size","","",37,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write_to","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to","","",37,{"inputs":[{"name":"self"},{"name":"write"}],"output":{"name":"protobufresult"}}],[11,"merge_from_bytes","","",37,null],[11,"check_initialized","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"write_length_delimited_to_bytes","","",37,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[10,"get_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[10,"mut_unknown_fields","","",37,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"type_id","","",37,{"inputs":[{"name":"self"}],"output":{"name":"typeid"}}],[10,"as_any","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"as_any_mut","","",37,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"into_any","","",37,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[8,"MessageStatic","","",null,null],[10,"new","","",38,{"inputs":[],"output":{"name":"self"}}],[11,"descriptor_static","","",38,{"inputs":[{"name":"option"}],"output":{"name":"messagedescriptor"}}],[8,"ProtobufEnum","","",null,null],[10,"value","","",39,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"from_i32","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"values","","",39,null],[11,"descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"enum_descriptor","","",39,{"inputs":[{"name":"self"}],"output":{"name":"enumdescriptor"}}],[11,"enum_descriptor_static","","",39,{"inputs":[{"name":"option"}],"output":{"name":"enumdescriptor"}}],[0,"rt","protobuf","",null,null],[5,"compute_raw_varint64_size","protobuf::rt","",null,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[5,"compute_raw_varint32_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"vec_packed_varint_data_size","","",null,null],[5,"vec_packed_varint_zigzag_data_size","","",null,null],[5,"vec_packed_enum_data_size","","",null,null],[5,"vec_packed_varint_size","","",null,null],[5,"vec_packed_varint_zigzag_size","","",null,null],[5,"vec_packed_enum_size","","",null,null],[5,"tag_size","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"value_size_no_tag","","",null,{"inputs":[{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_size","","",null,{"inputs":[{"name":"u32"},{"name":"t"},{"name":"wiretype"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size_no_tag","","Length of value when encoded with zigzag encoding",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"value_varint_zigzag_size","","Length of value when encoding with zigzag encoding with tag",null,{"inputs":[{"name":"u32"},{"name":"t"}],"output":{"name":"u32"}}],[5,"enum_size","","",null,{"inputs":[{"name":"u32"},{"name":"e"}],"output":{"name":"u32"}}],[5,"bytes_size_no_tag","","",null,null],[5,"bytes_size","","",null,null],[5,"string_size_no_tag","","",null,{"inputs":[{"name":"str"}],"output":{"name":"u32"}}],[5,"string_size","","",null,{"inputs":[{"name":"u32"},{"name":"str"}],"output":{"name":"u32"}}],[5,"unknown_fields_size","","",null,{"inputs":[{"name":"unknownfields"}],"output":{"name":"u32"}}],[5,"read_repeated_int32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_int64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_uint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sint64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_fixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed32_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_sfixed64_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_double_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_float_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bool_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_enum_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_string_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"string"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_proto3_bytes_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[5,"read_repeated_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"repeatedfield"}],"output":{"name":"protobufresult"}}],[5,"read_singular_message_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"singularptrfield"}],"output":{"name":"protobufresult"}}],[5,"read_unknown_or_skip_group","","",null,{"inputs":[{"name":"u32"},{"name":"wiretype"},{"name":"codedinputstream"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[5,"unexpected_wire_type","","Create an error for unexpected wire type.",null,{"inputs":[{"name":"wiretype"}],"output":{"name":"protobuferror"}}],[5,"compute_map_size","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"}],"output":{"name":"u32"}}],[5,"write_map_with_cached_sizes","","",null,{"inputs":[{"name":"u32"},{"name":"hashmap"},{"name":"w"}],"output":{"name":"protobufresult"}}],[5,"read_map_into","","",null,{"inputs":[{"name":"wiretype"},{"name":"codedinputstream"},{"name":"hashmap"}],"output":{"name":"protobufresult"}}],[8,"ProtobufVarint","","",null,null],[10,"len_varint","","",40,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"ProtobufVarintZigzag","","",null,null],[10,"len_varint_zigzag","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[0,"lazy","protobuf","",null,null],[3,"Lazy","protobuf::lazy","",null,null],[12,"lock","","",42,null],[12,"ptr","","",42,null],[17,"ONCE_INIT","","",null,null],[11,"get","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[0,"code_writer","protobuf","",null,null],[3,"CodeWriter","protobuf::code_writer","",null,null],[11,"new","","",43,{"inputs":[{"name":"write"}],"output":{"name":"codewriter"}}],[11,"write_line","","",43,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"write_generated","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"todo","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"indented","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"commented","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"lazy_static","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"lazy_static_decl_get","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"lazy_static_decl_get_simple","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":null}],[11,"block","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"expr_block","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"stmt_block","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"unsafe_expr","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"impl_self_block","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"impl_for_block","","",43,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"unsafe_impl","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_struct","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"def_struct","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"pub_enum","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_trait","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"field_entry","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"field_decl","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"pub_field_decl","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":null}],[11,"derive","","",43,null],[11,"allow","","",43,null],[11,"comment","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_def","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"fn_block","","",43,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"str"},{"name":"f"}],"output":null}],[11,"pub_fn","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"def_fn","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":null}],[11,"while_block","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_stmt","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_else_stmt","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"if_let_stmt","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"if_let_else_stmt","","",43,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":null}],[11,"for_stmt","","",43,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"},{"name":"f"}],"output":null}],[11,"match_block","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"match_expr","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_block","","",43,{"inputs":[{"name":"self"},{"name":"s"},{"name":"f"}],"output":null}],[11,"case_expr","","",43,{"inputs":[{"name":"self"},{"name":"s1"},{"name":"s2"}],"output":null}],[11,"error_unexpected_wire_type","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"assert_wire_type","","",43,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":null}],[0,"codegen","protobuf","",null,null],[5,"gen","protobuf::codegen","",null,null],[5,"protoc_gen_rust_main","","",null,{"inputs":[],"output":null}],[0,"compiler_plugin","protobuf","",null,null],[3,"GenResult","protobuf::compiler_plugin","",null,null],[12,"name","","",44,null],[12,"content","","",44,null],[5,"plugin_main","","",null,null],[0,"repeated","protobuf","",null,null],[3,"RepeatedField","protobuf::repeated","",null,null],[11,"len","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clear","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",45,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"new","","",45,{"inputs":[],"output":{"name":"repeatedfield"}}],[11,"from_vec","","",45,{"inputs":[{"name":"vec"}],"output":{"name":"repeatedfield"}}],[11,"into_vec","","",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"capacity","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"as_mut_slice","","",45,null],[11,"slice","","",45,null],[11,"slice_mut","","",45,null],[11,"slice_from","","",45,null],[11,"slice_from_mut","","",45,null],[11,"slice_to","","",45,null],[11,"slice_to_mut","","",45,null],[11,"split_at","","",45,null],[11,"split_at_mut","","",45,null],[11,"tail","","",45,null],[11,"last","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"last_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"init","","",45,null],[11,"push","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","",45,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","",45,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"t"}],"output":null}],[11,"remove","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"truncate","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reverse","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"iter","","",45,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"sort_by","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"as_ptr","","",45,null],[11,"as_mut_ptr","","",45,null],[11,"push_default","","",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_slice","","",45,null],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"repeatedfield"}}],[11,"from_iter","","",45,{"inputs":[{"name":"i"}],"output":{"name":"repeatedfield"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"repeatedfield"}],"output":{"name":"bool"}}],[11,"contains","","",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"hash","","",45,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"as_ref","","",45,null],[11,"borrow","","",45,null],[11,"deref","","",45,null],[11,"deref_mut","","",45,null],[11,"index","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",45,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"singular","protobuf","",null,null],[3,"SingularField","protobuf::singular","",null,null],[3,"SingularPtrField","","",null,null],[11,"some","","",46,{"inputs":[{"name":"t"}],"output":{"name":"singularfield"}}],[11,"is_some","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clear","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"none","","",46,{"inputs":[],"output":{"name":"singularfield"}}],[11,"from_option","","",46,{"inputs":[{"name":"option"}],"output":{"name":"singularfield"}}],[11,"take","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"some","","",47,{"inputs":[{"name":"t"}],"output":{"name":"singularptrfield"}}],[11,"none","","",47,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"from_option","","",47,{"inputs":[{"name":"option"}],"output":{"name":"singularptrfield"}}],[11,"is_some","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_option","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut_ref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"singularptrfield"}}],[11,"iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"mut_iter","","",47,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"take","","",47,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clear","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"unwrap_or_default","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_default","","",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"singularfield"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"singularptrfield"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"singularfield"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"singularptrfield"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"singularfield"}],"output":{"name":"bool"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"singularptrfield"}],"output":{"name":"bool"}}],[11,"hash","","",46,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"hash","","",47,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[0,"clear","protobuf","",null,null],[8,"Clear","protobuf::clear","anything that can be cleared",null,null],[10,"clear","","",48,{"inputs":[{"name":"self"}],"output":null}],[0,"reflect","protobuf","",null,null],[3,"FieldDescriptor","protobuf::reflect","",null,null],[3,"MessageDescriptor","","",null,null],[3,"EnumValueDescriptor","","",null,null],[3,"EnumDescriptor","","",null,null],[4,"ProtobufValueRef","","",null,null],[13,"U32","","",49,null],[13,"U64","","",49,null],[13,"I32","","",49,null],[13,"I64","","",49,null],[13,"F32","","",49,null],[13,"F64","","",49,null],[13,"Bool","","",49,null],[13,"String","","",49,null],[13,"Bytes","","",49,null],[13,"Enum","","",49,null],[13,"Message","","",49,null],[4,"ReflectFieldRef","","",null,null],[13,"Repeated","","",50,null],[13,"RepeatedOld","","",50,null],[13,"Map","","",50,null],[13,"Optional","","",50,null],[0,"accessor","","",null,null],[5,"make_singular_u32_accessor","protobuf::reflect::accessor","",null,null],[5,"make_singular_i32_accessor","","",null,null],[5,"make_singular_u64_accessor","","",null,null],[5,"make_singular_i64_accessor","","",null,null],[5,"make_singular_f32_accessor","","",null,null],[5,"make_singular_f64_accessor","","",null,null],[5,"make_singular_bool_accessor","","",null,null],[5,"make_singular_enum_accessor","","",null,null],[5,"make_singular_string_accessor","","",null,null],[5,"make_singular_bytes_accessor","","",null,null],[5,"make_singular_message_accessor","","",null,null],[5,"make_repeated_u32_accessor","","",null,null],[5,"make_repeated_i32_accessor","","",null,null],[5,"make_repeated_u64_accessor","","",null,null],[5,"make_repeated_i64_accessor","","",null,null],[5,"make_repeated_f32_accessor","","",null,null],[5,"make_repeated_f64_accessor","","",null,null],[5,"make_repeated_bool_accessor","","",null,null],[5,"make_repeated_string_accessor","","",null,null],[5,"make_repeated_bytes_accessor","","",null,null],[5,"make_repeated_enum_accessor","","",null,null],[5,"make_repeated_message_accessor","","",null,null],[5,"make_vec_accessor","","",null,null],[5,"make_repeated_field_accessor","","",null,null],[5,"make_option_accessor","","",null,null],[5,"make_has_get_set_clear_accessor","","",null,null],[5,"make_has_get_mut_clear_accessor","","",null,null],[5,"make_singular_field_accessor","","",null,null],[5,"make_singular_ptr_field_accessor","","",null,null],[5,"make_simple_field_accessor","","",null,null],[5,"make_map_accessor","","",null,null],[8,"FieldAccessor","","this trait should not be used directly, use `FieldDescriptor` instead",null,null],[10,"name_generic","","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"has_field_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"len_field_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[10,"get_message_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[10,"get_rep_message_item_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[10,"get_enum_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_rep_enum_item_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[10,"get_str_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[10,"get_rep_str_generic","","",51,null],[10,"get_bytes_generic","","",51,null],[10,"get_rep_bytes_generic","","",51,null],[10,"get_u32_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[10,"get_rep_u32_generic","","",51,null],[10,"get_u64_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[10,"get_rep_u64_generic","","",51,null],[10,"get_i32_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[10,"get_rep_i32_generic","","",51,null],[10,"get_i64_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[10,"get_rep_i64_generic","","",51,null],[10,"get_bool_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[10,"get_rep_bool_generic","","",51,null],[10,"get_f32_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[10,"get_rep_f32_generic","","",51,null],[10,"get_f64_generic","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[10,"get_rep_f64_generic","","",51,null],[10,"get_reflect","","",51,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"is_non_zero","protobuf::reflect","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ProtobufValue","","",null,null],[10,"as_ref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"as_any","","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",52,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}],[11,"proto","","",53,{"inputs":[{"name":"self"}],"output":{"name":"fielddescriptorproto"}}],[11,"name","","",53,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"is_repeated","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_field","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"len_field","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"usize"}}],[11,"get_message","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"message"}}],[11,"get_rep_message_item","","",53,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"message"}}],[11,"get_enum","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_rep_enum_item","","",53,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"enumvaluedescriptor"}}],[11,"get_str","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"str"}}],[11,"get_rep_str","","",53,null],[11,"get_rep_str_item","","",53,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"str"}}],[11,"get_bytes","","",53,null],[11,"get_rep_bytes","","",53,null],[11,"get_rep_bytes_item","","",53,null],[11,"get_u32","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u32"}}],[11,"get_rep_u32","","",53,null],[11,"get_u64","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"u64"}}],[11,"get_rep_u64","","",53,null],[11,"get_i32","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i32"}}],[11,"get_rep_i32","","",53,null],[11,"get_i64","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"i64"}}],[11,"get_rep_i64","","",53,null],[11,"get_bool","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"bool"}}],[11,"get_rep_bool","","",53,null],[11,"get_f32","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f32"}}],[11,"get_rep_f32","","",53,null],[11,"get_f64","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"f64"}}],[11,"get_rep_f64","","",53,null],[11,"get_reflect","","",53,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"reflectfieldref"}}],[11,"get_rep_item","","",53,{"inputs":[{"name":"self"},{"name":"message"},{"name":"usize"}],"output":{"name":"protobufvalueref"}}],[11,"for_type","","",54,{"inputs":[],"output":{"name":"messagedescriptor"}}],[11,"new","","",54,{"inputs":[{"name":"str"},{"name":"vec"},{"name":"filedescriptorproto"}],"output":{"name":"messagedescriptor"}}],[11,"new_instance","","",54,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"full_name","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fields","","",54,null],[11,"field_by_name","","",54,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"fielddescriptor"}}],[11,"field_by_number","","",54,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"fielddescriptor"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"enumvaluedescriptor"}}],[11,"name","","",55,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"value","","",55,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"name","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"for_type","","",56,{"inputs":[],"output":{"name":"enumdescriptor"}}],[11,"new","","",56,{"inputs":[{"name":"str"},{"name":"filedescriptorproto"}],"output":{"name":"enumdescriptor"}}],[11,"value_by_name","","",56,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptor"}}],[11,"value_by_number","","",56,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"enumvaluedescriptor"}}],[0,"text_format","protobuf","",null,null],[5,"print_to","protobuf::text_format","",null,{"inputs":[{"name":"message"},{"name":"string"}],"output":null}],[5,"print_to_string","","",null,{"inputs":[{"name":"message"}],"output":{"name":"string"}}],[5,"fmt","","",null,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"stream","protobuf","",null,null],[3,"CodedInputStream","protobuf::stream","",null,null],[0,"wire_format","","",null,null],[3,"Tag","protobuf::stream::wire_format","",null,null],[4,"WireType","","",null,null],[13,"WireTypeVarint","","",57,null],[13,"WireTypeFixed64","","",57,null],[13,"WireTypeLengthDelimited","","",57,null],[13,"WireTypeStartGroup","","",57,null],[13,"WireTypeEndGroup","","",57,null],[13,"WireTypeFixed32","","",57,null],[17,"TAG_TYPE_BITS","","",null,null],[17,"TAG_TYPE_MASK","","",null,null],[17,"FIELD_NUMBER_MAX","","",null,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",57,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"tag"}}],[11,"value","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",58,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"make","","",58,{"inputs":[{"name":"u32"},{"name":"wiretype"}],"output":{"name":"tag"}}],[11,"unpack","","",58,null],[11,"field_number","","",58,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"WithCodedInputStream","protobuf::stream","",null,null],[10,"with_coded_input_stream","","",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"protobufresult"}}],[8,"CodedOutputStream","","",null,null],[10,"write_raw_byte","","",60,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"protobufresult"}}],[10,"write_raw_bytes","","",60,null],[11,"write_tag","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint32","","",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_varint64","","",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian32","","",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_raw_little_endian64","","",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_float_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_float","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f32"}],"output":{"name":"protobufresult"}}],[11,"write_double","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"f64"}],"output":{"name":"protobufresult"}}],[11,"write_uint64_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_uint64","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_uint32","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_int64","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_int32","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_sint64","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sint32","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_fixed64","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"write_fixed32","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed64","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i64"}],"output":{"name":"protobufresult"}}],[11,"write_sfixed32","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_bool","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"bool"}],"output":{"name":"protobufresult"}}],[11,"write_enum","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"i32"}],"output":{"name":"protobufresult"}}],[11,"write_enum_obj","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"e"}],"output":{"name":"protobufresult"}}],[11,"write_unknown","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalueref"}],"output":{"name":"protobufresult"}}],[11,"write_unknown_fields","","",60,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"protobufresult"}}],[11,"write_bytes_no_tag","","",60,null],[11,"write_string_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message_no_tag","","",60,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"write_bytes","","",60,null],[11,"write_string","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"str"}],"output":{"name":"protobufresult"}}],[11,"write_message","","",60,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"m"}],"output":{"name":"protobufresult"}}],[11,"new","","",61,{"inputs":[{"name":"read"}],"output":{"name":"codedinputstream"}}],[11,"from_buffered_reader","","",61,{"inputs":[{"name":"bufread"}],"output":{"name":"codedinputstream"}}],[11,"from_bytes","","",61,null],[11,"pos","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"bytes_until_limit","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"read","","",61,null],[11,"read_raw_byte","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"push_limit","","",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"protobufresult"}}],[11,"pop_limit","","",61,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"eof","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"check_eof","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_varint64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_varint32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_little_endian32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_raw_little_endian64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_tag","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_tag_unpack","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_double","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_float","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_int64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_int32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_uint64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_uint32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_sint64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_sint32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_fixed64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_fixed32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_sfixed64","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_sfixed32","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_bool","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_enum","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_double_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_float_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int64_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_int32_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint64_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_uint32_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint64_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sint32_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed64_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_fixed32_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed64_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_sfixed32_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_bool_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_repeated_packed_enum_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_unknown","","",61,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"skip_field","","",61,{"inputs":[{"name":"self"},{"name":"wiretype"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes_into","","Read raw bytes into the supplied vector.  The vector will be resized as needed and overwritten.",61,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_raw_bytes","","Read exact number of bytes",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"skip_raw_bytes","","",61,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"protobufresult"}}],[11,"read_bytes","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_bytes_into","","",61,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"protobufresult"}}],[11,"read_string","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[11,"read_string_into","","",61,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"protobufresult"}}],[11,"merge_message","","",61,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"protobufresult"}}],[11,"read_message","","",61,{"inputs":[{"name":"self"}],"output":{"name":"protobufresult"}}],[0,"error","protobuf","",null,null],[4,"ProtobufError","protobuf::error","",null,null],[13,"IoError","","",62,null],[13,"WireError","","",62,null],[13,"MessageNotInitialized","","",62,null],[12,"message","protobuf::error::ProtobufError","",62,null],[6,"ProtobufResult","protobuf::error","",null,null],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"message_not_initialized","","",62,{"inputs":[{"name":"str"}],"output":{"name":"protobuferror"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",62,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",62,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",62,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[0,"types","protobuf","",null,null],[3,"ProtobufTypeFloat","protobuf::types","",null,null],[3,"ProtobufTypeDouble","","",null,null],[3,"ProtobufTypeInt32","","",null,null],[3,"ProtobufTypeInt64","","",null,null],[3,"ProtobufTypeUint32","","",null,null],[3,"ProtobufTypeUint64","","",null,null],[3,"ProtobufTypeSint32","","",null,null],[3,"ProtobufTypeSint64","","",null,null],[3,"ProtobufTypeFixed32","","",null,null],[3,"ProtobufTypeFixed64","","",null,null],[3,"ProtobufTypeSfixed32","","",null,null],[3,"ProtobufTypeSfixed64","","",null,null],[3,"ProtobufTypeBool","","",null,null],[3,"ProtobufTypeString","","",null,null],[3,"ProtobufTypeBytes","","",null,null],[3,"ProtobufTypeEnum","","",null,null],[3,"ProtobufTypeMessage","","",null,null],[8,"ProtobufType","","",null,null],[16,"Value","","",63,null],[10,"wire_type","","",63,{"inputs":[],"output":{"name":"wiretype"}}],[10,"read","","",63,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[10,"compute_size","","",63,null],[11,"compute_size_with_length_delimiter","","Compute size adding length prefix if wire type is length delimited (i. e. string, bytes, message)",63,null],[11,"get_cached_size","","Get previously computed size",63,null],[11,"get_cached_size_with_length_delimiter","","Get previously cached size with length prefix",63,null],[10,"write_with_cached_size","","",63,null],[11,"wire_type","","",64,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",64,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",64,{"inputs":[{"name":"f32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",64,{"inputs":[{"name":"u32"},{"name":"f32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",65,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",65,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",65,{"inputs":[{"name":"f64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",65,{"inputs":[{"name":"u32"},{"name":"f64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",66,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",66,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",66,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",66,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",67,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",67,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",67,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",67,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",68,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",68,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",68,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",68,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",69,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",69,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",69,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",69,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",70,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",70,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",70,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",70,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",71,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",71,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",71,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",71,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",72,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",72,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",72,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",72,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",73,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",73,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",73,{"inputs":[{"name":"u64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",73,{"inputs":[{"name":"u32"},{"name":"u64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",74,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",74,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",74,{"inputs":[{"name":"i32"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",74,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",75,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",75,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",75,{"inputs":[{"name":"i64"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",75,{"inputs":[{"name":"u32"},{"name":"i64"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",76,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",76,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",76,{"inputs":[{"name":"bool"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",76,{"inputs":[{"name":"u32"},{"name":"bool"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",77,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",77,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",77,{"inputs":[{"name":"string"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",77,{"inputs":[{"name":"u32"},{"name":"string"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",78,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",78,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",78,{"inputs":[{"name":"vec"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",78,{"inputs":[{"name":"u32"},{"name":"vec"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",79,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",79,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",79,{"inputs":[{"name":"e"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",79,{"inputs":[{"name":"u32"},{"name":"e"},{"name":"w"}],"output":{"name":"protobufresult"}}],[11,"wire_type","","",80,{"inputs":[],"output":{"name":"wiretype"}}],[11,"read","","",80,{"inputs":[{"name":"codedinputstream"}],"output":{"name":"protobufresult"}}],[11,"compute_size","","",80,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"get_cached_size","","",80,{"inputs":[{"name":"m"}],"output":{"name":"u32"}}],[11,"write_with_cached_size","","",80,null],[0,"hex","protobuf","",null,null],[5,"decode_hex","protobuf::hex","",null,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[5,"encode_hex","","",null,null],[0,"descriptorx","protobuf","",null,null],[3,"RootScope","protobuf::descriptorx","",null,null],[12,"file_descriptors","","",81,null],[3,"FileScope","","",null,null],[12,"file_descriptor","","",82,null],[3,"Scope","","",null,null],[12,"file_scope","","",83,null],[12,"path","","",83,null],[3,"MessageWithScope","","",null,null],[12,"scope","","",84,null],[12,"message","","",84,null],[3,"EnumWithScope","","",null,null],[12,"scope","","",85,null],[12,"en","","",85,null],[3,"FieldWithContext","","",null,null],[12,"field","","",86,null],[12,"message","","",86,null],[3,"OneofVariantWithContext","","",null,null],[12,"oneof","","",87,null],[12,"field","","",87,null],[3,"OneofWithContext","","",null,null],[12,"oneof","","",88,null],[12,"index","","",88,null],[12,"message","","",88,null],[4,"Syntax","","",null,null],[13,"PROTO2","","",89,null],[13,"PROTO3","","",89,null],[4,"MessageOrEnumWithScope","","",null,null],[13,"Message","","",90,null],[13,"Enum","","",90,null],[5,"proto_path_to_rust_mod","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"find_message_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[5,"find_enum_by_rust_name","","",null,{"inputs":[{"name":"filedescriptorproto"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[8,"WithScope","","",null,null],[10,"get_scope","","",91,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[10,"get_name","","",91,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"name_to_package","","",91,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_name","","",91,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_fq_name","","",91,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"find_enum","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumwithscope"}}],[11,"find_message","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messagewithscope"}}],[11,"find_message_or_enum","","",81,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"messageorenumwithscope"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"syntax"}],"output":{"name":"bool"}}],[11,"parse","","",89,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"filescope"}}],[11,"syntax","","",82,{"inputs":[{"name":"self"}],"output":{"name":"syntax"}}],[11,"to_scope","","",82,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"find_enums","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"find_messages","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"find_messages_and_enums","","",82,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_file_descriptor","","",83,{"inputs":[{"name":"self"}],"output":{"name":"filedescriptorproto"}}],[11,"get_messages","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_enums","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"get_messages_and_enums","","",83,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"prefix","","",83,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"rust_prefix","","",83,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"messagewithscope"}}],[11,"get_scope","","",84,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_name","","",84,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_scope","","",84,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"to_scope","","",84,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"fields","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"oneofs","","",84,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"oneof_by_index","","",84,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"oneofwithcontext"}}],[11,"map_entry","","Pair of (key, value) if this message is map entry",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"enumwithscope"}}],[11,"values","","",85,null],[11,"value_by_name","","",85,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"enumvaluedescriptorproto"}}],[11,"get_scope","","",85,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_name","","",85,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_scope","","",90,{"inputs":[{"name":"self"}],"output":{"name":"scope"}}],[11,"get_name","","",90,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"oneof","","",86,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"rust_name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"oneofvariantwithcontext"}}],[11,"field_name","","",87,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"oneofwithcontext"}}],[11,"name","","",88,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"rust_name","","",88,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"variants","","",88,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"fmt","protobuf","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"wire_type","","",2,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"get_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalueref"}}],[11,"wire_type","","",3,{"inputs":[{"name":"self"}],"output":{"name":"wiretype"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvalues"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalues"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"unknownvalues"}}],[11,"add_value","","",1,{"inputs":[{"name":"self"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"unknownvaluesiter"}}],[11,"next","","",92,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfields"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"unknownfields"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"unknownfields"}}],[11,"add_fixed32","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"add_fixed64","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_varint","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u64"}],"output":null}],[11,"add_length_delimited","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"vec"}],"output":null}],[11,"add_value","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"unknownvalue"}],"output":null}],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"unknownfieldsiter"}}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",93,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",94,{"inputs":[],"output":{"name":"cachedsize"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"cachedsize"}}],[11,"get","","",94,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set","","",94,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"cachedsize"}],"output":{"name":"bool"}}],[11,"as_any","protobuf::reflect","",52,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[11,"is_non_zero","","",52,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref_copy","","",52,{"inputs":[{"name":"self"}],"output":{"name":"protobufvalueref"}}]],"paths":[[3,"UnknownFields"],[3,"UnknownValues"],[4,"UnknownValue"],[4,"UnknownValueRef"],[4,"FieldDescriptorProto_Type"],[4,"FieldDescriptorProto_Label"],[4,"FileOptions_OptimizeMode"],[4,"FieldOptions_CType"],[4,"FieldOptions_JSType"],[3,"FileDescriptorSet"],[3,"FileDescriptorProto"],[3,"DescriptorProto"],[3,"DescriptorProto_ExtensionRange"],[3,"DescriptorProto_ReservedRange"],[3,"FieldDescriptorProto"],[3,"OneofDescriptorProto"],[3,"EnumDescriptorProto"],[3,"EnumValueDescriptorProto"],[3,"ServiceDescriptorProto"],[3,"MethodDescriptorProto"],[3,"FileOptions"],[3,"MessageOptions"],[3,"FieldOptions"],[3,"OneofOptions"],[3,"EnumOptions"],[3,"EnumValueOptions"],[3,"ServiceOptions"],[3,"MethodOptions"],[3,"UninterpretedOption"],[3,"UninterpretedOption_NamePart"],[3,"SourceCodeInfo"],[3,"SourceCodeInfo_Location"],[3,"GeneratedCodeInfo"],[3,"GeneratedCodeInfo_Annotation"],[3,"CodeGeneratorRequest"],[3,"CodeGeneratorResponse"],[3,"CodeGeneratorResponse_File"],[8,"Message"],[8,"MessageStatic"],[8,"ProtobufEnum"],[8,"ProtobufVarint"],[8,"ProtobufVarintZigzag"],[3,"Lazy"],[3,"CodeWriter"],[3,"GenResult"],[3,"RepeatedField"],[3,"SingularField"],[3,"SingularPtrField"],[8,"Clear"],[4,"ProtobufValueRef"],[4,"ReflectFieldRef"],[8,"FieldAccessor"],[8,"ProtobufValue"],[3,"FieldDescriptor"],[3,"MessageDescriptor"],[3,"EnumValueDescriptor"],[3,"EnumDescriptor"],[4,"WireType"],[3,"Tag"],[8,"WithCodedInputStream"],[8,"CodedOutputStream"],[3,"CodedInputStream"],[4,"ProtobufError"],[8,"ProtobufType"],[3,"ProtobufTypeFloat"],[3,"ProtobufTypeDouble"],[3,"ProtobufTypeInt32"],[3,"ProtobufTypeInt64"],[3,"ProtobufTypeUint32"],[3,"ProtobufTypeUint64"],[3,"ProtobufTypeSint32"],[3,"ProtobufTypeSint64"],[3,"ProtobufTypeFixed32"],[3,"ProtobufTypeFixed64"],[3,"ProtobufTypeSfixed32"],[3,"ProtobufTypeSfixed64"],[3,"ProtobufTypeBool"],[3,"ProtobufTypeString"],[3,"ProtobufTypeBytes"],[3,"ProtobufTypeEnum"],[3,"ProtobufTypeMessage"],[3,"RootScope"],[3,"FileScope"],[3,"Scope"],[3,"MessageWithScope"],[3,"EnumWithScope"],[3,"FieldWithContext"],[3,"OneofVariantWithContext"],[3,"OneofWithContext"],[4,"Syntax"],[4,"MessageOrEnumWithScope"],[8,"WithScope"],[3,"UnknownValuesIter"],[3,"UnknownFieldsIter"],[3,"CachedSize"]]};
searchIndex["quickcheck"] = {"doc":"This crate is a port of Haskell's QuickCheck.","items":[[8,"Rng","quickcheck","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",0,null],[11,"gen","","Return a random value of a `Rand` type.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",0,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",0,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",0,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",0,null],[11,"shuffle","","Shuffle a mutable slice in place.",0,null],[3,"StdGen","","StdGen is the default implementation of `Gen`.",null,null],[3,"QuickCheck","","The main QuickCheck type for setting configuration and running QuickCheck.",null,null],[3,"TestResult","","Describes the status of a single instance of a test.",null,null],[5,"empty_shrinker","","Creates a shrinker with zero elements.",null,{"inputs":[],"output":{"name":"box"}}],[5,"single_shrinker","","Creates a shrinker with a single element.",null,{"inputs":[{"name":"a"}],"output":{"name":"box"}}],[5,"quickcheck","","Convenience function for running QuickCheck.",null,{"inputs":[{"name":"a"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"r"},{"name":"usize"}],"output":{"name":"stdgen"}}],[11,"next_u32","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",1,null],[11,"size","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Creates a new QuickCheck value.",2,{"inputs":[],"output":{"name":"quickcheck"}}],[11,"tests","","Set the number of tests to run.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"quickcheck"}}],[11,"max_tests","","Set the maximum number of tests to run.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"quickcheck"}}],[11,"gen","","Set the random number generator to be used by QuickCheck.",2,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"quickcheck"}}],[11,"quicktest","","Tests a property and returns the result.",2,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"quickcheck","","Tests a property and calls `panic!` on failure.",2,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"testresult"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"passed","","Produces a test result that indicates the current test has passed.",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"failed","","Produces a test result that indicates the current test has failed.",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"error","","Produces a test result that indicates failure from a runtime error.",3,{"inputs":[{"name":"s"}],"output":{"name":"testresult"}}],[11,"discard","","Produces a test result that instructs `quickcheck` to ignore it. This is useful for restricting the domain of your properties. When a test is discarded, `quickcheck` will replace it with a fresh one (up to a certain limit).",3,{"inputs":[],"output":{"name":"testresult"}}],[11,"from_bool","","Converts a `bool` to a `TestResult`. A `true` value indicates that the test has passed and a `false` value indicates that the test has failed.",3,{"inputs":[{"name":"bool"}],"output":{"name":"testresult"}}],[11,"must_fail","","Tests if a \"procedure\" fails when executed. The test passes only if `f` generates a task failure during its execution.",3,{"inputs":[{"name":"f"}],"output":{"name":"testresult"}}],[11,"is_failure","","Returns `true` if and only if this test result describes a failing test.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_error","","Returns `true` if and only if this test result describes a failing test as a result of a run time error.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"result","","",3,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"testresult"}}],[8,"Arbitrary","","`Arbitrary` describes types whose values can be randomly generated and shrunk.",null,null],[10,"arbitrary","","",4,{"inputs":[{"name":"g"}],"output":{"name":"self"}}],[11,"shrink","","",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[8,"Gen","","`Gen` wraps a `rand::Rng` with parameters to control the distribution of random values.",null,null],[10,"size","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"Testable","","`Testable` describes types (e.g., a function) whose values can be tested.",null,null],[10,"result","","",6,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"name":"testresult"}}],[14,"quickcheck","","A macro for writing quickcheck tests.",null,null],[11,"shrink","","",4,{"inputs":[{"name":"self"}],"output":{"name":"box"}}]],"paths":[[8,"Rng"],[3,"StdGen"],[3,"QuickCheck"],[3,"TestResult"],[8,"Arbitrary"],[8,"Gen"],[8,"Testable"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","regex","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"regexbuilder"}}],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"regexbuilder"}}],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",6,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are *always* byte indices with respect to the original byte string matched.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"replace_append","","",2,{"inputs":[{"name":"self"},{"name":"captures"},{"name":"vec"}],"output":null}],[11,"no_expansion","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","regex","",16,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"setmatches"}}],[11,"len","","Returns the total number of regular expressions in this set.",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",17,null],[11,"next","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex::bytes","",20,{"inputs":[{"name":"self"}],"output":{"name":"regexset"}}],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatches"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matched_any","","Whether this set contains any matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matched","","Whether the regex at the given index matched.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"len","","The total number of regexes in the set that created these matches.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"into_iter","","",21,null],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"setmatchesiter"}}],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","regex","",24,{"inputs":[{"name":"self"}],"output":{"name":"regex"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Shows the original regular expression.",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"regex"}],"output":{"name":"bool"}}],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findmatches"}}],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"findcaptures"}}],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"regexsplits"}}],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that *isn't* matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"regexsplitsn"}}],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"r"}],"output":{"name":"string"}}],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"r"}],"output":{"name":"string"}}],[11,"shortest_match","","Returns the end location of a match in the text given.",24,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"as_str","","Returns the original string of this regex.",24,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"capture_names","","Returns an iterator over the capture names.",24,{"inputs":[{"name":"self"}],"output":{"name":"capturenames"}}],[11,"captures_len","","Returns the number of captures.",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are *always* byte indices with respect to the original string matched.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcaptures"}}],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturespos"}}],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,{"inputs":[{"name":"self"}],"output":{"name":"subcapturesnamed"}}],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"len","","Returns the number of captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"str"}}],[11,"index","","",28,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"str"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,{"inputs":[{"name":"self"},{"name":"captures"}],"output":{"name":"cow"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for regular expressions. The abstract syntax is defined by the `Expr` type. The concrete syntax is enumerated in the `regex` crate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word character on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word characters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes or grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the least).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings. e.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once. e.g., `(?P<a>.)(?P<a>.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P<>a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence. e.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P<0a>b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the range is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not allowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal sequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be repeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P<a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., ``.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes. This never returned if the parser is permitted to allow expressions that match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty. e.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"min_len","","Returns the length of the smallest literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",5,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"self"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was \"cut.\"",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"expr"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"repeater"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"classrange"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"byterange"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"exprbuilder"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"self"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the end of the text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable sub-expression that must match the beginning of text.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions that can match arbitrary bytes.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",7,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",7,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",7,{"inputs":[{"name":"self"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",8,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",8,{"inputs":[{"name":"self"}],"output":{"name":"byteclass"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",10,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["slab"] = {"doc":"","items":[[3,"Slab","slab","A preallocated chunk of memory for storing objects of the same type.",null,null],[3,"Entry","","A handle to an occupied slot in the `Slab`",null,null],[3,"VacantEntry","","A handle to a vacant slot in the `Slab`",null,null],[3,"Iter","","An iterator over the values stored in the `Slab`",null,null],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",null,null],[11,"with_capacity","","Returns an empty `Slab` with the requested capacity",0,{"inputs":[{"name":"usize"}],"output":{"name":"slab"}}],[11,"len","","Returns the number of values stored by the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Returns the total capacity of the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Slab` is storing no values",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"available","","Returns the number of available slots remaining in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"has_available","","Returns true if the `Slab` has available slots",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"contains","","Returns true if the `Slab` contains a value for the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"get","","Get a reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the value associated with the given token",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"insert","","Insert a value into the slab, returning the associated token",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"entry","","Returns a handle to an entry.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"vacant_entry","","Returns a handle to a vacant entry.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"remove","","Releases the given slot",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"retain","","Retain only the elements specified by the predicate.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"iter","","An iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","A mutable iterator for visiting all elements stored in the `Slab`",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Empty the slab, by freeing all entries",0,{"inputs":[{"name":"self"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Slab`. Does nothing if the capacity is already sufficient.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"replace","","Replace the value stored in the entry",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace_with","","Apply the function to the current value, replacing it with the result of the function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"remove","","Remove and return the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get","","Get a reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the value stored in the entry",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_mut","","Convert the entry handle to a mutable reference",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"index","","Return the entry index",1,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"insert","","Insert a value into the entry",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"entry"}}],[11,"index","","Returns the entry index",2,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Slab"],[3,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline and fall back to the heap for larger allocations.","items":[[3,"SmallVecMoveIterator","smallvec","",null,null],[3,"SmallVec","","",null,null],[6,"SmallVec1","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec2","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec4","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec8","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec16","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec24","","Deprecated alias to ease transition from an earlier version.",null,null],[6,"SmallVec32","","Deprecated alias to ease transition from an earlier version.",null,null],[8,"VecLike","","",null,null],[10,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"Array","","",null,null],[16,"Item","","",1,null],[10,"size","","",1,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","",1,null],[10,"ptr_mut","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_iter","","NB: For efficiency reasons (avoiding making a second copy of the inline elements), this actually clears out the original array instead of moving it. FIXME: Rename this to `drain`? It’s more like `Vec::drain` than `Vec::into_iter`.",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvecmoveiterator"}}],[11,"push","","",3,null],[11,"push_all_move","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":null}],[11,"pop","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"swap_remove","","",3,null],[11,"clear","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","",3,null],[11,"insert","","",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}]],"paths":[[8,"VecLike"],[8,"Array"],[3,"SmallVecMoveIterator"],[3,"SmallVec"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,{"inputs":[{"name":"self"}],"output":{"name":"cacheditermut"}}],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cachedintoiter"}}],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utf8sequence"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"utf8sequence"}],"output":{"name":"bool"}}],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"utf8range"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"utf8range"}],"output":{"name":"bool"}}],[11,"matches","","Returns true if and only if the given byte is in this range.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["uuid"] = {"doc":"Generate and parse UUIDs","items":[[3,"Uuid","uuid","A Universally Unique Identifier (UUID).",null,null],[3,"Simple","","An adaptor for formatting a `Uuid` as a simple string.",null,null],[3,"Hyphenated","","An adaptor for formatting a `Uuid` as a hyphenated string.",null,null],[3,"Urn","","An adaptor for formatting a `Uuid` as a URN string.",null,null],[4,"UuidVersion","","The version of the UUID, denoting the generating algorithm.",null,null],[13,"Mac","","Version 1: MAC address",0,null],[13,"Dce","","Version 2: DCE Security",0,null],[13,"Md5","","Version 3: MD5 hash",0,null],[13,"Random","","Version 4: Random",0,null],[13,"Sha1","","Version 5: SHA-1 hash",0,null],[4,"UuidVariant","","The reserved variants of UUIDs.",null,null],[13,"NCS","","Reserved by the NCS for backward compatibility",1,null],[13,"RFC4122","","As described in the RFC4122 Specification (default)",1,null],[13,"Microsoft","","Reserved by Microsoft for backward compatibility",1,null],[13,"Future","","Reserved for future expansion",1,null],[4,"ParseError","","Error details for string parsing failures.",null,null],[13,"InvalidLength","","",2,null],[13,"InvalidCharacter","","",2,null],[13,"InvalidGroups","","",2,null],[13,"InvalidGroupLength","","",2,null],[6,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID.",null,null],[17,"NAMESPACE_DNS","","A UUID of the namespace of fully-qualified domain names",null,null],[17,"NAMESPACE_URL","","A UUID of the namespace of URLs",null,null],[17,"NAMESPACE_OID","","A UUID of the namespace of ISO OIDs",null,null],[17,"NAMESPACE_X500","","A UUID of the namespace of X.500 DNs (in DER or a text output format)",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"uuidversion"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"uuidversion"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"uuidvariant"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"uuidvariant"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"uuid"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"nil","","The 'nil UUID'.",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"new","","Creates a new `Uuid`.",3,{"inputs":[{"name":"uuidversion"}],"output":{"name":"option"}}],[11,"from_fields","","Creates a `Uuid` from four field values.",3,null],[11,"from_bytes","","Creates a `Uuid` using the supplied bytes.",3,null],[11,"get_variant","","Returns the variant of the `Uuid` structure.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_version_num","","Returns the version number of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_version","","Returns the version of the `Uuid`.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_bytes","","Return an array of 16 octets containing the UUID data",3,null],[11,"simple","","Returns a wrapper which when formatted via `fmt::Display` will format a string of 32 hexadecimal digits.",3,{"inputs":[{"name":"self"}],"output":{"name":"simple"}}],[11,"hyphenated","","Returns a wrapper which when formatted via `fmt::Display` will format a string of hexadecimal digits separated into gropus with a hyphen.",3,{"inputs":[{"name":"self"}],"output":{"name":"hyphenated"}}],[11,"urn","","Returns a wrapper which when formatted via `fmt::Display` will format a string of the UUID as a full URN string.",3,{"inputs":[{"name":"self"}],"output":{"name":"urn"}}],[11,"parse_str","","Parses a `Uuid` from a string of hexadecimal digits with optional hyphens.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"is_nil","","Tests if the UUID is nil",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","Returns the nil UUID, which is all zeroes",3,{"inputs":[],"output":{"name":"uuid"}}],[11,"from_str","","Parse a hex string and interpret as a `Uuid`.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"UuidVersion"],[4,"UuidVariant"],[4,"ParseError"],[3,"Uuid"],[3,"Simple"],[3,"Hyphenated"],[3,"Urn"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
initSearch(searchIndex);
