// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct ColumnDataPB {
    // message fields
    block: ::protobuf::SingularPtrField<super::fs::BlockIdPB>,
    column_id: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ColumnDataPB {}

impl ColumnDataPB {
    pub fn new() -> ColumnDataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ColumnDataPB {
        static mut instance: ::protobuf::lazy::Lazy<ColumnDataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ColumnDataPB,
        };
        unsafe {
            instance.get(|| {
                ColumnDataPB {
                    block: ::protobuf::SingularPtrField::none(),
                    column_id: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.BlockIdPB block = 2;

    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::fs::BlockIdPB) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::fs::BlockIdPB {
        if self.block.is_none() {
            self.block.set_default();
        };
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::fs::BlockIdPB {
        self.block.take().unwrap_or_else(|| super::fs::BlockIdPB::new())
    }

    pub fn get_block(&self) -> &super::fs::BlockIdPB {
        self.block.as_ref().unwrap_or_else(|| super::fs::BlockIdPB::default_instance())
    }

    // optional int32 column_id = 4;

    pub fn clear_column_id(&mut self) {
        self.column_id = ::std::option::Option::None;
    }

    pub fn has_column_id(&self) -> bool {
        self.column_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_column_id(&mut self, v: i32) {
        self.column_id = ::std::option::Option::Some(v);
    }

    pub fn get_column_id(&self) -> i32 {
        self.column_id.unwrap_or(0)
    }
}

impl ::protobuf::Message for ColumnDataPB {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int32());
                    self.column_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.block.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.column_id.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.block.as_ref() {
            try!(w.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.column_id {
            try!(w.write_int32(4, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ColumnDataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ColumnDataPB {
    fn new() -> ColumnDataPB {
        ColumnDataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ColumnDataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "block",
                    ColumnDataPB::has_block,
                    ColumnDataPB::get_block,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "column_id",
                    ColumnDataPB::has_column_id,
                    ColumnDataPB::get_column_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ColumnDataPB>(
                    "ColumnDataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ColumnDataPB {
    fn clear(&mut self) {
        self.clear_block();
        self.clear_column_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ColumnDataPB {
    fn eq(&self, other: &ColumnDataPB) -> bool {
        self.block == other.block &&
        self.column_id == other.column_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ColumnDataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct DeltaDataPB {
    // message fields
    block: ::protobuf::SingularPtrField<super::fs::BlockIdPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for DeltaDataPB {}

impl DeltaDataPB {
    pub fn new() -> DeltaDataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static DeltaDataPB {
        static mut instance: ::protobuf::lazy::Lazy<DeltaDataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeltaDataPB,
        };
        unsafe {
            instance.get(|| {
                DeltaDataPB {
                    block: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.BlockIdPB block = 2;

    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::fs::BlockIdPB) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::fs::BlockIdPB {
        if self.block.is_none() {
            self.block.set_default();
        };
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::fs::BlockIdPB {
        self.block.take().unwrap_or_else(|| super::fs::BlockIdPB::new())
    }

    pub fn get_block(&self) -> &super::fs::BlockIdPB {
        self.block.as_ref().unwrap_or_else(|| super::fs::BlockIdPB::default_instance())
    }
}

impl ::protobuf::Message for DeltaDataPB {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.block.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.block.as_ref() {
            try!(w.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<DeltaDataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for DeltaDataPB {
    fn new() -> DeltaDataPB {
        DeltaDataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<DeltaDataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "block",
                    DeltaDataPB::has_block,
                    DeltaDataPB::get_block,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeltaDataPB>(
                    "DeltaDataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for DeltaDataPB {
    fn clear(&mut self) {
        self.clear_block();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for DeltaDataPB {
    fn eq(&self, other: &DeltaDataPB) -> bool {
        self.block == other.block &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for DeltaDataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct RowSetDataPB {
    // message fields
    id: ::std::option::Option<u64>,
    last_durable_dms_id: ::std::option::Option<i64>,
    columns: ::protobuf::RepeatedField<ColumnDataPB>,
    redo_deltas: ::protobuf::RepeatedField<DeltaDataPB>,
    undo_deltas: ::protobuf::RepeatedField<DeltaDataPB>,
    bloom_block: ::protobuf::SingularPtrField<super::fs::BlockIdPB>,
    adhoc_index_block: ::protobuf::SingularPtrField<super::fs::BlockIdPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RowSetDataPB {}

impl RowSetDataPB {
    pub fn new() -> RowSetDataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RowSetDataPB {
        static mut instance: ::protobuf::lazy::Lazy<RowSetDataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RowSetDataPB,
        };
        unsafe {
            instance.get(|| {
                RowSetDataPB {
                    id: ::std::option::Option::None,
                    last_durable_dms_id: ::std::option::Option::None,
                    columns: ::protobuf::RepeatedField::new(),
                    redo_deltas: ::protobuf::RepeatedField::new(),
                    undo_deltas: ::protobuf::RepeatedField::new(),
                    bloom_block: ::protobuf::SingularPtrField::none(),
                    adhoc_index_block: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required uint64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u64 {
        self.id.unwrap_or(0)
    }

    // required int64 last_durable_dms_id = 2;

    pub fn clear_last_durable_dms_id(&mut self) {
        self.last_durable_dms_id = ::std::option::Option::None;
    }

    pub fn has_last_durable_dms_id(&self) -> bool {
        self.last_durable_dms_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_durable_dms_id(&mut self, v: i64) {
        self.last_durable_dms_id = ::std::option::Option::Some(v);
    }

    pub fn get_last_durable_dms_id(&self) -> i64 {
        self.last_durable_dms_id.unwrap_or(0)
    }

    // repeated .kudu.tablet.ColumnDataPB columns = 3;

    pub fn clear_columns(&mut self) {
        self.columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_columns(&mut self, v: ::protobuf::RepeatedField<ColumnDataPB>) {
        self.columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_columns(&mut self) -> &mut ::protobuf::RepeatedField<ColumnDataPB> {
        &mut self.columns
    }

    // Take field
    pub fn take_columns(&mut self) -> ::protobuf::RepeatedField<ColumnDataPB> {
        ::std::mem::replace(&mut self.columns, ::protobuf::RepeatedField::new())
    }

    pub fn get_columns(&self) -> &[ColumnDataPB] {
        &self.columns
    }

    // repeated .kudu.tablet.DeltaDataPB redo_deltas = 4;

    pub fn clear_redo_deltas(&mut self) {
        self.redo_deltas.clear();
    }

    // Param is passed by value, moved
    pub fn set_redo_deltas(&mut self, v: ::protobuf::RepeatedField<DeltaDataPB>) {
        self.redo_deltas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_redo_deltas(&mut self) -> &mut ::protobuf::RepeatedField<DeltaDataPB> {
        &mut self.redo_deltas
    }

    // Take field
    pub fn take_redo_deltas(&mut self) -> ::protobuf::RepeatedField<DeltaDataPB> {
        ::std::mem::replace(&mut self.redo_deltas, ::protobuf::RepeatedField::new())
    }

    pub fn get_redo_deltas(&self) -> &[DeltaDataPB] {
        &self.redo_deltas
    }

    // repeated .kudu.tablet.DeltaDataPB undo_deltas = 5;

    pub fn clear_undo_deltas(&mut self) {
        self.undo_deltas.clear();
    }

    // Param is passed by value, moved
    pub fn set_undo_deltas(&mut self, v: ::protobuf::RepeatedField<DeltaDataPB>) {
        self.undo_deltas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_undo_deltas(&mut self) -> &mut ::protobuf::RepeatedField<DeltaDataPB> {
        &mut self.undo_deltas
    }

    // Take field
    pub fn take_undo_deltas(&mut self) -> ::protobuf::RepeatedField<DeltaDataPB> {
        ::std::mem::replace(&mut self.undo_deltas, ::protobuf::RepeatedField::new())
    }

    pub fn get_undo_deltas(&self) -> &[DeltaDataPB] {
        &self.undo_deltas
    }

    // optional .kudu.BlockIdPB bloom_block = 6;

    pub fn clear_bloom_block(&mut self) {
        self.bloom_block.clear();
    }

    pub fn has_bloom_block(&self) -> bool {
        self.bloom_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bloom_block(&mut self, v: super::fs::BlockIdPB) {
        self.bloom_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bloom_block(&mut self) -> &mut super::fs::BlockIdPB {
        if self.bloom_block.is_none() {
            self.bloom_block.set_default();
        };
        self.bloom_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_bloom_block(&mut self) -> super::fs::BlockIdPB {
        self.bloom_block.take().unwrap_or_else(|| super::fs::BlockIdPB::new())
    }

    pub fn get_bloom_block(&self) -> &super::fs::BlockIdPB {
        self.bloom_block.as_ref().unwrap_or_else(|| super::fs::BlockIdPB::default_instance())
    }

    // optional .kudu.BlockIdPB adhoc_index_block = 7;

    pub fn clear_adhoc_index_block(&mut self) {
        self.adhoc_index_block.clear();
    }

    pub fn has_adhoc_index_block(&self) -> bool {
        self.adhoc_index_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_adhoc_index_block(&mut self, v: super::fs::BlockIdPB) {
        self.adhoc_index_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_adhoc_index_block(&mut self) -> &mut super::fs::BlockIdPB {
        if self.adhoc_index_block.is_none() {
            self.adhoc_index_block.set_default();
        };
        self.adhoc_index_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_adhoc_index_block(&mut self) -> super::fs::BlockIdPB {
        self.adhoc_index_block.take().unwrap_or_else(|| super::fs::BlockIdPB::new())
    }

    pub fn get_adhoc_index_block(&self) -> &super::fs::BlockIdPB {
        self.adhoc_index_block.as_ref().unwrap_or_else(|| super::fs::BlockIdPB::default_instance())
    }
}

impl ::protobuf::Message for RowSetDataPB {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        };
        if self.last_durable_dms_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.last_durable_dms_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.columns));
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.redo_deltas));
                },
                5 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.undo_deltas));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bloom_block));
                },
                7 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.adhoc_index_block));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.id.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.last_durable_dms_id.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.columns.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.redo_deltas.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.undo_deltas.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.bloom_block.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.adhoc_index_block.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            try!(w.write_uint64(1, v));
        };
        if let Some(v) = self.last_durable_dms_id {
            try!(w.write_int64(2, v));
        };
        for v in self.columns.iter() {
            try!(w.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        for v in self.redo_deltas.iter() {
            try!(w.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        for v in self.undo_deltas.iter() {
            try!(w.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.bloom_block.as_ref() {
            try!(w.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.adhoc_index_block.as_ref() {
            try!(w.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RowSetDataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RowSetDataPB {
    fn new() -> RowSetDataPB {
        RowSetDataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RowSetDataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "id",
                    RowSetDataPB::has_id,
                    RowSetDataPB::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "last_durable_dms_id",
                    RowSetDataPB::has_last_durable_dms_id,
                    RowSetDataPB::get_last_durable_dms_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "columns",
                    RowSetDataPB::get_columns,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "redo_deltas",
                    RowSetDataPB::get_redo_deltas,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "undo_deltas",
                    RowSetDataPB::get_undo_deltas,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "bloom_block",
                    RowSetDataPB::has_bloom_block,
                    RowSetDataPB::get_bloom_block,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "adhoc_index_block",
                    RowSetDataPB::has_adhoc_index_block,
                    RowSetDataPB::get_adhoc_index_block,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RowSetDataPB>(
                    "RowSetDataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RowSetDataPB {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_last_durable_dms_id();
        self.clear_columns();
        self.clear_redo_deltas();
        self.clear_undo_deltas();
        self.clear_bloom_block();
        self.clear_adhoc_index_block();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RowSetDataPB {
    fn eq(&self, other: &RowSetDataPB) -> bool {
        self.id == other.id &&
        self.last_durable_dms_id == other.last_durable_dms_id &&
        self.columns == other.columns &&
        self.redo_deltas == other.redo_deltas &&
        self.undo_deltas == other.undo_deltas &&
        self.bloom_block == other.bloom_block &&
        self.adhoc_index_block == other.adhoc_index_block &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RowSetDataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TabletSuperBlockPB {
    // message fields
    table_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    tablet_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    last_durable_mrs_id: ::std::option::Option<i64>,
    start_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    end_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    partition: ::protobuf::SingularPtrField<super::common::PartitionPB>,
    rowsets: ::protobuf::RepeatedField<RowSetDataPB>,
    table_name: ::protobuf::SingularField<::std::string::String>,
    schema: ::protobuf::SingularPtrField<super::common::SchemaPB>,
    schema_version: ::std::option::Option<u32>,
    partition_schema: ::protobuf::SingularPtrField<super::common::PartitionSchemaPB>,
    tablet_data_state: ::std::option::Option<TabletDataState>,
    orphaned_blocks: ::protobuf::RepeatedField<super::fs::BlockIdPB>,
    tombstone_last_logged_opid: ::protobuf::SingularPtrField<super::opid::OpId>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TabletSuperBlockPB {}

impl TabletSuperBlockPB {
    pub fn new() -> TabletSuperBlockPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TabletSuperBlockPB {
        static mut instance: ::protobuf::lazy::Lazy<TabletSuperBlockPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TabletSuperBlockPB,
        };
        unsafe {
            instance.get(|| {
                TabletSuperBlockPB {
                    table_id: ::protobuf::SingularField::none(),
                    tablet_id: ::protobuf::SingularField::none(),
                    last_durable_mrs_id: ::std::option::Option::None,
                    start_key: ::protobuf::SingularField::none(),
                    end_key: ::protobuf::SingularField::none(),
                    partition: ::protobuf::SingularPtrField::none(),
                    rowsets: ::protobuf::RepeatedField::new(),
                    table_name: ::protobuf::SingularField::none(),
                    schema: ::protobuf::SingularPtrField::none(),
                    schema_version: ::std::option::Option::None,
                    partition_schema: ::protobuf::SingularPtrField::none(),
                    tablet_data_state: ::std::option::Option::None,
                    orphaned_blocks: ::protobuf::RepeatedField::new(),
                    tombstone_last_logged_opid: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes table_id = 1;

    pub fn clear_table_id(&mut self) {
        self.table_id.clear();
    }

    pub fn has_table_id(&self) -> bool {
        self.table_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_table_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.table_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.table_id.is_none() {
            self.table_id.set_default();
        };
        self.table_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_table_id(&mut self) -> ::std::vec::Vec<u8> {
        self.table_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_table_id(&self) -> &[u8] {
        match self.table_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required bytes tablet_id = 2;

    pub fn clear_tablet_id(&mut self) {
        self.tablet_id.clear();
    }

    pub fn has_tablet_id(&self) -> bool {
        self.tablet_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.tablet_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tablet_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tablet_id.is_none() {
            self.tablet_id.set_default();
        };
        self.tablet_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_tablet_id(&mut self) -> ::std::vec::Vec<u8> {
        self.tablet_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_tablet_id(&self) -> &[u8] {
        match self.tablet_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required int64 last_durable_mrs_id = 3;

    pub fn clear_last_durable_mrs_id(&mut self) {
        self.last_durable_mrs_id = ::std::option::Option::None;
    }

    pub fn has_last_durable_mrs_id(&self) -> bool {
        self.last_durable_mrs_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_durable_mrs_id(&mut self, v: i64) {
        self.last_durable_mrs_id = ::std::option::Option::Some(v);
    }

    pub fn get_last_durable_mrs_id(&self) -> i64 {
        self.last_durable_mrs_id.unwrap_or(0)
    }

    // optional bytes start_key = 4;

    pub fn clear_start_key(&mut self) {
        self.start_key.clear();
    }

    pub fn has_start_key(&self) -> bool {
        self.start_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.start_key.is_none() {
            self.start_key.set_default();
        };
        self.start_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_key(&mut self) -> ::std::vec::Vec<u8> {
        self.start_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_start_key(&self) -> &[u8] {
        match self.start_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes end_key = 5;

    pub fn clear_end_key(&mut self) {
        self.end_key.clear();
    }

    pub fn has_end_key(&self) -> bool {
        self.end_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.end_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.end_key.is_none() {
            self.end_key.set_default();
        };
        self.end_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_key(&mut self) -> ::std::vec::Vec<u8> {
        self.end_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_end_key(&self) -> &[u8] {
        match self.end_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .kudu.PartitionPB partition = 13;

    pub fn clear_partition(&mut self) {
        self.partition.clear();
    }

    pub fn has_partition(&self) -> bool {
        self.partition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition(&mut self, v: super::common::PartitionPB) {
        self.partition = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition(&mut self) -> &mut super::common::PartitionPB {
        if self.partition.is_none() {
            self.partition.set_default();
        };
        self.partition.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition(&mut self) -> super::common::PartitionPB {
        self.partition.take().unwrap_or_else(|| super::common::PartitionPB::new())
    }

    pub fn get_partition(&self) -> &super::common::PartitionPB {
        self.partition.as_ref().unwrap_or_else(|| super::common::PartitionPB::default_instance())
    }

    // repeated .kudu.tablet.RowSetDataPB rowsets = 6;

    pub fn clear_rowsets(&mut self) {
        self.rowsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_rowsets(&mut self, v: ::protobuf::RepeatedField<RowSetDataPB>) {
        self.rowsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rowsets(&mut self) -> &mut ::protobuf::RepeatedField<RowSetDataPB> {
        &mut self.rowsets
    }

    // Take field
    pub fn take_rowsets(&mut self) -> ::protobuf::RepeatedField<RowSetDataPB> {
        ::std::mem::replace(&mut self.rowsets, ::protobuf::RepeatedField::new())
    }

    pub fn get_rowsets(&self) -> &[RowSetDataPB] {
        &self.rowsets
    }

    // required string table_name = 7;

    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    pub fn has_table_name(&self) -> bool {
        self.table_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        if self.table_name.is_none() {
            self.table_name.set_default();
        };
        self.table_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        self.table_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_table_name(&self) -> &str {
        match self.table_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required .kudu.SchemaPB schema = 8;

    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::common::SchemaPB) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::common::SchemaPB {
        if self.schema.is_none() {
            self.schema.set_default();
        };
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::common::SchemaPB {
        self.schema.take().unwrap_or_else(|| super::common::SchemaPB::new())
    }

    pub fn get_schema(&self) -> &super::common::SchemaPB {
        self.schema.as_ref().unwrap_or_else(|| super::common::SchemaPB::default_instance())
    }

    // required uint32 schema_version = 9;

    pub fn clear_schema_version(&mut self) {
        self.schema_version = ::std::option::Option::None;
    }

    pub fn has_schema_version(&self) -> bool {
        self.schema_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema_version(&mut self, v: u32) {
        self.schema_version = ::std::option::Option::Some(v);
    }

    pub fn get_schema_version(&self) -> u32 {
        self.schema_version.unwrap_or(0)
    }

    // optional .kudu.PartitionSchemaPB partition_schema = 14;

    pub fn clear_partition_schema(&mut self) {
        self.partition_schema.clear();
    }

    pub fn has_partition_schema(&self) -> bool {
        self.partition_schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_schema(&mut self, v: super::common::PartitionSchemaPB) {
        self.partition_schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_schema(&mut self) -> &mut super::common::PartitionSchemaPB {
        if self.partition_schema.is_none() {
            self.partition_schema.set_default();
        };
        self.partition_schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_schema(&mut self) -> super::common::PartitionSchemaPB {
        self.partition_schema.take().unwrap_or_else(|| super::common::PartitionSchemaPB::new())
    }

    pub fn get_partition_schema(&self) -> &super::common::PartitionSchemaPB {
        self.partition_schema.as_ref().unwrap_or_else(|| super::common::PartitionSchemaPB::default_instance())
    }

    // optional .kudu.tablet.TabletDataState tablet_data_state = 10;

    pub fn clear_tablet_data_state(&mut self) {
        self.tablet_data_state = ::std::option::Option::None;
    }

    pub fn has_tablet_data_state(&self) -> bool {
        self.tablet_data_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_data_state(&mut self, v: TabletDataState) {
        self.tablet_data_state = ::std::option::Option::Some(v);
    }

    pub fn get_tablet_data_state(&self) -> TabletDataState {
        self.tablet_data_state.unwrap_or(TabletDataState::TABLET_DATA_UNKNOWN)
    }

    // repeated .kudu.BlockIdPB orphaned_blocks = 11;

    pub fn clear_orphaned_blocks(&mut self) {
        self.orphaned_blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_orphaned_blocks(&mut self, v: ::protobuf::RepeatedField<super::fs::BlockIdPB>) {
        self.orphaned_blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_orphaned_blocks(&mut self) -> &mut ::protobuf::RepeatedField<super::fs::BlockIdPB> {
        &mut self.orphaned_blocks
    }

    // Take field
    pub fn take_orphaned_blocks(&mut self) -> ::protobuf::RepeatedField<super::fs::BlockIdPB> {
        ::std::mem::replace(&mut self.orphaned_blocks, ::protobuf::RepeatedField::new())
    }

    pub fn get_orphaned_blocks(&self) -> &[super::fs::BlockIdPB] {
        &self.orphaned_blocks
    }

    // optional .kudu.consensus.OpId tombstone_last_logged_opid = 12;

    pub fn clear_tombstone_last_logged_opid(&mut self) {
        self.tombstone_last_logged_opid.clear();
    }

    pub fn has_tombstone_last_logged_opid(&self) -> bool {
        self.tombstone_last_logged_opid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tombstone_last_logged_opid(&mut self, v: super::opid::OpId) {
        self.tombstone_last_logged_opid = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tombstone_last_logged_opid(&mut self) -> &mut super::opid::OpId {
        if self.tombstone_last_logged_opid.is_none() {
            self.tombstone_last_logged_opid.set_default();
        };
        self.tombstone_last_logged_opid.as_mut().unwrap()
    }

    // Take field
    pub fn take_tombstone_last_logged_opid(&mut self) -> super::opid::OpId {
        self.tombstone_last_logged_opid.take().unwrap_or_else(|| super::opid::OpId::new())
    }

    pub fn get_tombstone_last_logged_opid(&self) -> &super::opid::OpId {
        self.tombstone_last_logged_opid.as_ref().unwrap_or_else(|| super::opid::OpId::default_instance())
    }
}

impl ::protobuf::Message for TabletSuperBlockPB {
    fn is_initialized(&self) -> bool {
        if self.table_id.is_none() {
            return false;
        };
        if self.tablet_id.is_none() {
            return false;
        };
        if self.last_durable_mrs_id.is_none() {
            return false;
        };
        if self.table_name.is_none() {
            return false;
        };
        if self.schema.is_none() {
            return false;
        };
        if self.schema_version.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.table_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tablet_id));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.last_durable_mrs_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.start_key));
                },
                5 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.end_key));
                },
                13 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition));
                },
                6 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rowsets));
                },
                7 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.table_name));
                },
                8 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.schema_version = ::std::option::Option::Some(tmp);
                },
                14 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_schema));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.tablet_data_state = ::std::option::Option::Some(tmp);
                },
                11 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.orphaned_blocks));
                },
                12 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tombstone_last_logged_opid));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.table_id.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.tablet_id.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.last_durable_mrs_id.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.start_key.iter() {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in self.end_key.iter() {
            my_size += ::protobuf::rt::bytes_size(5, &value);
        };
        for value in self.partition.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.rowsets.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.table_name.iter() {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        for value in self.schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.schema_version.iter() {
            my_size += ::protobuf::rt::value_size(9, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.partition_schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.tablet_data_state.iter() {
            my_size += ::protobuf::rt::enum_size(10, *value);
        };
        for value in self.orphaned_blocks.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.tombstone_last_logged_opid.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.table_id.as_ref() {
            try!(w.write_bytes(1, &v));
        };
        if let Some(v) = self.tablet_id.as_ref() {
            try!(w.write_bytes(2, &v));
        };
        if let Some(v) = self.last_durable_mrs_id {
            try!(w.write_int64(3, v));
        };
        if let Some(v) = self.start_key.as_ref() {
            try!(w.write_bytes(4, &v));
        };
        if let Some(v) = self.end_key.as_ref() {
            try!(w.write_bytes(5, &v));
        };
        if let Some(v) = self.partition.as_ref() {
            try!(w.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        for v in self.rowsets.iter() {
            try!(w.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.table_name.as_ref() {
            try!(w.write_string(7, &v));
        };
        if let Some(v) = self.schema.as_ref() {
            try!(w.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.schema_version {
            try!(w.write_uint32(9, v));
        };
        if let Some(v) = self.partition_schema.as_ref() {
            try!(w.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.tablet_data_state {
            try!(w.write_enum(10, v.value()));
        };
        for v in self.orphaned_blocks.iter() {
            try!(w.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.tombstone_last_logged_opid.as_ref() {
            try!(w.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TabletSuperBlockPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TabletSuperBlockPB {
    fn new() -> TabletSuperBlockPB {
        TabletSuperBlockPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<TabletSuperBlockPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "table_id",
                    TabletSuperBlockPB::has_table_id,
                    TabletSuperBlockPB::get_table_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "tablet_id",
                    TabletSuperBlockPB::has_tablet_id,
                    TabletSuperBlockPB::get_tablet_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "last_durable_mrs_id",
                    TabletSuperBlockPB::has_last_durable_mrs_id,
                    TabletSuperBlockPB::get_last_durable_mrs_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "start_key",
                    TabletSuperBlockPB::has_start_key,
                    TabletSuperBlockPB::get_start_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "end_key",
                    TabletSuperBlockPB::has_end_key,
                    TabletSuperBlockPB::get_end_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "partition",
                    TabletSuperBlockPB::has_partition,
                    TabletSuperBlockPB::get_partition,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "rowsets",
                    TabletSuperBlockPB::get_rowsets,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "table_name",
                    TabletSuperBlockPB::has_table_name,
                    TabletSuperBlockPB::get_table_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "schema",
                    TabletSuperBlockPB::has_schema,
                    TabletSuperBlockPB::get_schema,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "schema_version",
                    TabletSuperBlockPB::has_schema_version,
                    TabletSuperBlockPB::get_schema_version,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "partition_schema",
                    TabletSuperBlockPB::has_partition_schema,
                    TabletSuperBlockPB::get_partition_schema,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "tablet_data_state",
                    TabletSuperBlockPB::has_tablet_data_state,
                    TabletSuperBlockPB::get_tablet_data_state,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "orphaned_blocks",
                    TabletSuperBlockPB::get_orphaned_blocks,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "tombstone_last_logged_opid",
                    TabletSuperBlockPB::has_tombstone_last_logged_opid,
                    TabletSuperBlockPB::get_tombstone_last_logged_opid,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TabletSuperBlockPB>(
                    "TabletSuperBlockPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TabletSuperBlockPB {
    fn clear(&mut self) {
        self.clear_table_id();
        self.clear_tablet_id();
        self.clear_last_durable_mrs_id();
        self.clear_start_key();
        self.clear_end_key();
        self.clear_partition();
        self.clear_rowsets();
        self.clear_table_name();
        self.clear_schema();
        self.clear_schema_version();
        self.clear_partition_schema();
        self.clear_tablet_data_state();
        self.clear_orphaned_blocks();
        self.clear_tombstone_last_logged_opid();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TabletSuperBlockPB {
    fn eq(&self, other: &TabletSuperBlockPB) -> bool {
        self.table_id == other.table_id &&
        self.tablet_id == other.tablet_id &&
        self.last_durable_mrs_id == other.last_durable_mrs_id &&
        self.start_key == other.start_key &&
        self.end_key == other.end_key &&
        self.partition == other.partition &&
        self.rowsets == other.rowsets &&
        self.table_name == other.table_name &&
        self.schema == other.schema &&
        self.schema_version == other.schema_version &&
        self.partition_schema == other.partition_schema &&
        self.tablet_data_state == other.tablet_data_state &&
        self.orphaned_blocks == other.orphaned_blocks &&
        self.tombstone_last_logged_opid == other.tombstone_last_logged_opid &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TabletSuperBlockPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TabletDataState {
    TABLET_DATA_UNKNOWN = 999,
    TABLET_DATA_COPYING = 0,
    TABLET_DATA_READY = 1,
    TABLET_DATA_DELETED = 2,
    TABLET_DATA_TOMBSTONED = 3,
}

impl ::protobuf::ProtobufEnum for TabletDataState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TabletDataState> {
        match value {
            999 => ::std::option::Option::Some(TabletDataState::TABLET_DATA_UNKNOWN),
            0 => ::std::option::Option::Some(TabletDataState::TABLET_DATA_COPYING),
            1 => ::std::option::Option::Some(TabletDataState::TABLET_DATA_READY),
            2 => ::std::option::Option::Some(TabletDataState::TABLET_DATA_DELETED),
            3 => ::std::option::Option::Some(TabletDataState::TABLET_DATA_TOMBSTONED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TabletDataState] = &[
            TabletDataState::TABLET_DATA_UNKNOWN,
            TabletDataState::TABLET_DATA_COPYING,
            TabletDataState::TABLET_DATA_READY,
            TabletDataState::TABLET_DATA_DELETED,
            TabletDataState::TABLET_DATA_TOMBSTONED,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<TabletDataState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TabletDataState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TabletDataState {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TabletStatePB {
    UNKNOWN = 999,
    NOT_STARTED = 5,
    BOOTSTRAPPING = 0,
    RUNNING = 1,
    FAILED = 2,
    QUIESCING = 3,
    SHUTDOWN = 4,
}

impl ::protobuf::ProtobufEnum for TabletStatePB {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TabletStatePB> {
        match value {
            999 => ::std::option::Option::Some(TabletStatePB::UNKNOWN),
            5 => ::std::option::Option::Some(TabletStatePB::NOT_STARTED),
            0 => ::std::option::Option::Some(TabletStatePB::BOOTSTRAPPING),
            1 => ::std::option::Option::Some(TabletStatePB::RUNNING),
            2 => ::std::option::Option::Some(TabletStatePB::FAILED),
            3 => ::std::option::Option::Some(TabletStatePB::QUIESCING),
            4 => ::std::option::Option::Some(TabletStatePB::SHUTDOWN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TabletStatePB] = &[
            TabletStatePB::UNKNOWN,
            TabletStatePB::NOT_STARTED,
            TabletStatePB::BOOTSTRAPPING,
            TabletStatePB::RUNNING,
            TabletStatePB::FAILED,
            TabletStatePB::QUIESCING,
            TabletStatePB::SHUTDOWN,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<TabletStatePB>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TabletStatePB", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TabletStatePB {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x1a, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6d, 0x65,
    0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0x18, 0x6b, 0x75, 0x64, 0x75, 0x2f,
    0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
    0x73, 0x75, 0x73, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10,
    0x6b, 0x75, 0x64, 0x75, 0x2f, 0x66, 0x73, 0x2f, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x22, 0x41, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42,
    0x12, 0x1e, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
    0x0f, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42,
    0x12, 0x11, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x05, 0x22, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
    0x50, 0x42, 0x12, 0x1e, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x02, 0x28,
    0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
    0x50, 0x42, 0x22, 0x93, 0x02, 0x0a, 0x0c, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x44, 0x61, 0x74,
    0x61, 0x50, 0x42, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x12,
    0x1b, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f,
    0x64, 0x6d, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x12, 0x2a, 0x0a, 0x07,
    0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
    0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x6f,
    0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x74,
    0x61, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x0b, 0x75, 0x6e, 0x64, 0x6f, 0x5f,
    0x64, 0x65, 0x6c, 0x74, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61,
    0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x5f,
    0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x11,
    0x61, 0x64, 0x68, 0x6f, 0x63, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
    0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x42,
    0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x22, 0xfd, 0x03, 0x0a, 0x12, 0x54, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x53, 0x75, 0x70, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12,
    0x10, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
    0x0c, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
    0x20, 0x02, 0x28, 0x0c, 0x12, 0x1b, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72,
    0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
    0x03, 0x12, 0x11, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
    0x20, 0x01, 0x28, 0x0c, 0x12, 0x0f, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
    0x05, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x24, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e,
    0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x07, 0x72,
    0x6f, 0x77, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x53, 0x65,
    0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x09, 0x12, 0x1e, 0x0a, 0x06, 0x73,
    0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x0e, 0x73,
    0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
    0x02, 0x28, 0x0d, 0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x4c, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
    0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e,
    0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
    0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x4b,
    0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64,
    0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x12, 0x38,
    0x0a, 0x1a, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
    0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
    0x73, 0x75, 0x73, 0x2e, 0x4f, 0x70, 0x49, 0x64, 0x2a, 0x90, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x13,
    0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
    0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54,
    0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
    0x15, 0x0a, 0x11, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52,
    0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54,
    0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
    0x1a, 0x0a, 0x16, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54,
    0x4f, 0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x0d, 0x54,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x0c, 0x0a, 0x07,
    0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
    0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x42,
    0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b,
    0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
    0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x49, 0x45, 0x53,
    0x43, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
    0x57, 0x4e, 0x10, 0x04, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
    0x68, 0x65, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4a, 0xd6,
    0x2c, 0x0a, 0x07, 0x12, 0x05, 0x10, 0x00, 0x97, 0x01, 0x01, 0x0a, 0x8c, 0x06, 0x0a, 0x01, 0x02,
    0x12, 0x03, 0x10, 0x08, 0x13, 0x1a, 0x81, 0x06, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
    0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20,
    0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x53, 0x46, 0x29, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
    0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e,
    0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
    0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x20, 0x53, 0x65,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x20, 0x66, 0x69, 0x6c,
    0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64,
    0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f, 0x77,
    0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x41, 0x53,
    0x46, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x75, 0x6e, 0x64,
    0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69,
    0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32,
    0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x22, 0x29, 0x3b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65,
    0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61,
    0x6e, 0x63, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69,
    0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20,
    0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a,
    0x0a, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a,
    0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c,
    0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x0a, 0x20, 0x73, 0x6f, 0x66,
    0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
    0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
    0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53,
    0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54,
    0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43,
    0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59,
    0x0a, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65,
    0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65,
    0x64, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x70, 0x65,
    0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67,
    0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
    0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03,
    0x12, 0x00, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x12, 0x00, 0x2f,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0d,
    0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0e, 0x0a,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x12, 0x16, 0x2e, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x00, 0x12, 0x03, 0x14, 0x07, 0x21, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x15, 0x07,
    0x22, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x16, 0x07, 0x19, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x1c, 0x00, 0x20, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x1c, 0x08, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1d, 0x02,
    0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x1d, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x1d, 0x0b, 0x14, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1d, 0x15, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x1d, 0x1d, 0x1e, 0x0a, 0x44, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x1f, 0x02, 0x1f, 0x1a, 0x37, 0x20, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
    0x3a, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
    0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x20, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45,
    0x54, 0x45, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x3d, 0x20, 0x33, 0x3b, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x1f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x1f, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1f, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x1f, 0x1d, 0x1e, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x22,
    0x00, 0x24, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x22, 0x08, 0x13, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x23, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x23, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x06, 0x12, 0x03, 0x23, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x23, 0x15, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x23, 0x1d, 0x1e, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x26, 0x00, 0x2e, 0x01,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x26, 0x08, 0x14, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x27, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x04, 0x12, 0x03, 0x27, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05,
    0x12, 0x03, 0x27, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x27, 0x12, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x27, 0x17,
    0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x28, 0x02, 0x29, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x28, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x01, 0x05, 0x12, 0x03, 0x28, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x28, 0x11, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x28, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03,
    0x29, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x29, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x29, 0x0b, 0x17, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x29, 0x18, 0x1f, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x29, 0x22, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x2a, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03,
    0x04, 0x12, 0x03, 0x2a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x06, 0x12,
    0x03, 0x2a, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2a,
    0x17, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x03, 0x12, 0x03, 0x2a, 0x25, 0x26,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x03, 0x2b, 0x02, 0x27, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x04, 0x04, 0x12, 0x03, 0x2b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x04, 0x06, 0x12, 0x03, 0x2b, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x04, 0x01, 0x12, 0x03, 0x2b, 0x17, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x04, 0x03,
    0x12, 0x03, 0x2b, 0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12, 0x03, 0x2c,
    0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x04, 0x12, 0x03, 0x2c, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x06, 0x12, 0x03, 0x2c, 0x0b, 0x14, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x01, 0x12, 0x03, 0x2c, 0x15, 0x20, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x05, 0x03, 0x12, 0x03, 0x2c, 0x23, 0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02,
    0x02, 0x06, 0x12, 0x03, 0x2d, 0x02, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x04,
    0x12, 0x03, 0x2d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x06, 0x12, 0x03,
    0x2d, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x01, 0x12, 0x03, 0x2d, 0x15,
    0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x03, 0x12, 0x03, 0x2d, 0x29, 0x2a, 0x0a,
    0xcd, 0x01, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x33, 0x00, 0x47, 0x01, 0x1a, 0xc0, 0x01, 0x20,
    0x53, 0x74, 0x61, 0x74, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x64, 0x69,
    0x63, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65,
    0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x72, 0x69,
    0x6e, 0x67, 0x20, 0x75, 0x70, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69,
    0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74,
    0x65, 0x64, 0x2c, 0x20, 0x6f, 0x72, 0x0a, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x61,
    0x20, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a,
    0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x33, 0x05, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x34, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x34, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x34, 0x18, 0x1b, 0x0a, 0xac, 0x02, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x3a,
    0x02, 0x1a, 0x1a, 0x9e, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x54, 0x41, 0x42, 0x4c, 0x45,
    0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x49, 0x4e, 0x47, 0x20, 0x73,
    0x74, 0x61, 0x74, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x72, 0x65, 0x6d, 0x6f,
    0x74, 0x65, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x20, 0x77, 0x68, 0x69,
    0x6c, 0x65, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
    0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x72, 0x65, 0x6d,
    0x6f, 0x74, 0x65, 0x20, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x74,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x63, 0x72,
    0x61, 0x73, 0x68, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x6d, 0x75,
    0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e,
    0x64, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x62, 0x6f,
    0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20,
    0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
    0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x3a, 0x02,
    0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x3a, 0x18, 0x19, 0x0a,
    0x6b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x3e, 0x02, 0x18, 0x1a, 0x5e, 0x20, 0x46,
    0x72, 0x65, 0x73, 0x68, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
    0x6c, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52,
    0x45, 0x41, 0x44, 0x59, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3e, 0x02, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x02, 0x02, 0x12, 0x03, 0x3e, 0x16, 0x17, 0x0a, 0xaa, 0x01, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x03, 0x12, 0x03, 0x43, 0x02, 0x1a, 0x1a, 0x9c, 0x01, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x74,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67,
    0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x22, 0x72, 0x6f, 0x6c, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
    0x64, 0x22, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x2c, 0x0a, 0x20, 0x72, 0x61,
    0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67,
    0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x43, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x43, 0x18,
    0x19, 0x0a, 0x53, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x04, 0x12, 0x03, 0x46, 0x02, 0x1d, 0x1a, 0x46,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20,
    0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x6e, 0x6f, 0x77, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x73, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x22, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74,
    0x6f, 0x6e, 0x65, 0x22, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x46, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x46,
    0x1b, 0x1c, 0x0a, 0x98, 0x02, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x4e, 0x00, 0x7c, 0x01, 0x1a,
    0x8b, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x2d, 0x62, 0x6c, 0x6f,
    0x63, 0x6b, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x73, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74,
    0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2e, 0x0a, 0x20, 0x41, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x65,
    0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x73,
    0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x0a,
    0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
    0x20, 0x28, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x63,
    0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x29, 0x2c, 0x20, 0x61, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66,
    0x20, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x0a, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x20,
    0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
    0x72, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x63,
    0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
    0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x2d, 0x6b, 0x65, 0x79, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x4e, 0x08, 0x1a, 0x0a, 0x3c, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x00, 0x12, 0x03, 0x50, 0x02, 0x1e, 0x1a, 0x2f, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x49,
    0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x20, 0x6f, 0x66, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04,
    0x12, 0x03, 0x50, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03,
    0x50, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x50, 0x11,
    0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x50, 0x1c, 0x1d, 0x0a,
    0x18, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x03, 0x53, 0x02, 0x1f, 0x1a, 0x0b, 0x20, 0x54,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x49, 0x64, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x53, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x05,
    0x12, 0x03, 0x53, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x53, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x53, 0x1d,
    0x1e, 0x0a, 0x2e, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12, 0x03, 0x56, 0x02, 0x29, 0x1a, 0x21,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x64, 0x75, 0x72, 0x61,
    0x62, 0x6c, 0x65, 0x20, 0x4d, 0x65, 0x6d, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x20, 0x69, 0x64,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x04, 0x12, 0x03, 0x56, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x05, 0x12, 0x03, 0x56, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x56, 0x11, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x02, 0x03, 0x12, 0x03, 0x56, 0x27, 0x28, 0x0a, 0x1a, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x03, 0x12, 0x03, 0x59, 0x02, 0x1f, 0x1a, 0x0d, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
    0x54, 0x45, 0x44, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x04, 0x12, 0x03,
    0x59, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x05, 0x12, 0x03, 0x59, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x01, 0x12, 0x03, 0x59, 0x11, 0x1a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x03, 0x12, 0x03, 0x59, 0x1d, 0x1e, 0x0a, 0x1a, 0x0a,
    0x04, 0x04, 0x03, 0x02, 0x04, 0x12, 0x03, 0x5c, 0x02, 0x1d, 0x1a, 0x0d, 0x20, 0x44, 0x45, 0x50,
    0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x04, 0x04, 0x12, 0x03, 0x5c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x05,
    0x12, 0x03, 0x5c, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x5c, 0x11, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x03, 0x12, 0x03, 0x5c, 0x1b,
    0x1c, 0x0a, 0x2a, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x05, 0x12, 0x03, 0x5f, 0x02, 0x26, 0x1a, 0x1d,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x05, 0x04, 0x12, 0x03, 0x5f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x05, 0x06, 0x12, 0x03, 0x5f, 0x0b, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x05, 0x01, 0x12, 0x03, 0x5f, 0x17, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x05, 0x03,
    0x12, 0x03, 0x5f, 0x23, 0x25, 0x0a, 0x1d, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x06, 0x12, 0x03, 0x62,
    0x02, 0x24, 0x1a, 0x10, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x52, 0x6f, 0x77, 0x53,
    0x65, 0x74, 0x73, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x06, 0x04, 0x12, 0x03, 0x62,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x06, 0x06, 0x12, 0x03, 0x62, 0x0b, 0x17,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x06, 0x01, 0x12, 0x03, 0x62, 0x18, 0x1f, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x12, 0x03, 0x62, 0x22, 0x23, 0x0a, 0xb0, 0x01, 0x0a,
    0x04, 0x04, 0x03, 0x02, 0x07, 0x12, 0x03, 0x67, 0x02, 0x21, 0x1a, 0xa2, 0x01, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x0a,
    0x20, 0x54, 0x4f, 0x44, 0x4f, 0x3a, 0x20, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x54, 0x61, 0x62, 0x6c,
    0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x3f, 0x20, 0x4e, 0x65, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x75, 0x74, 0x20,
    0x74, 0x68, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
    0x0a, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75,
    0x67, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x20,
    0x55, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
    0x72, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x07, 0x04, 0x12, 0x03, 0x67, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x07, 0x05, 0x12, 0x03, 0x67, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x07, 0x01, 0x12, 0x03, 0x67, 0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x07, 0x03, 0x12, 0x03, 0x67, 0x1f, 0x20, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x08, 0x12,
    0x03, 0x68, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x04, 0x12, 0x03, 0x68,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x06, 0x12, 0x03, 0x68, 0x0b, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x01, 0x12, 0x03, 0x68, 0x14, 0x1a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x08, 0x03, 0x12, 0x03, 0x68, 0x1d, 0x1e, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x09, 0x12, 0x03, 0x69, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x09, 0x04, 0x12, 0x03, 0x69, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x05,
    0x12, 0x03, 0x69, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x01, 0x12, 0x03,
    0x69, 0x12, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x09, 0x03, 0x12, 0x03, 0x69, 0x23,
    0x24, 0x0a, 0x31, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x0a, 0x12, 0x03, 0x6c, 0x02, 0x33, 0x1a, 0x24,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73,
    0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x04, 0x12, 0x03, 0x6c,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x06, 0x12, 0x03, 0x6c, 0x0b, 0x1c,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x6c, 0x1d, 0x2d, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x0a, 0x03, 0x12, 0x03, 0x6c, 0x30, 0x32, 0x0a, 0x36, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x0b, 0x12, 0x03, 0x6f, 0x02, 0x54, 0x1a, 0x29, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x66,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x27, 0x73, 0x20, 0x64, 0x61,
    0x74, 0x61, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0b, 0x04, 0x12, 0x03, 0x6f,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0b, 0x06, 0x12, 0x03, 0x6f, 0x0b, 0x1a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x6f, 0x1b, 0x2c, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x0b, 0x03, 0x12, 0x03, 0x6f, 0x2f, 0x31, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x0b, 0x08, 0x12, 0x03, 0x6f, 0x32, 0x53, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x0b, 0x07, 0x12, 0x03, 0x6f, 0x3e, 0x51, 0x0a, 0xe4, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x0c, 0x12, 0x03, 0x76, 0x02, 0x2a, 0x1a, 0xd6, 0x01, 0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x65, 0x63, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x72, 0x70,
    0x68, 0x61, 0x6e, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x66, 0x6c, 0x75, 0x73, 0x68,
    0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c,
    0x6f, 0x63, 0x6b, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x0a, 0x20, 0x77,
    0x6f, 0x72, 0x64, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x64, 0x69,
    0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x6e, 0x67,
    0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
    0x0a, 0x20, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x74, 0x27,
    0x73, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x73, 0x61, 0x66, 0x65, 0x20, 0x74, 0x6f,
    0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63,
    0x6b, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0c, 0x04, 0x12, 0x03, 0x76, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x0c, 0x06, 0x12, 0x03, 0x76, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x76, 0x15, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x0c, 0x03, 0x12, 0x03, 0x76, 0x27, 0x29, 0x0a, 0x99, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x0d,
    0x12, 0x03, 0x7b, 0x02, 0x3a, 0x1a, 0x8b, 0x01, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x62,
    0x65, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x64, 0x2c, 0x20,
    0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20,
    0x4f, 0x70, 0x49, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x0a, 0x20, 0x57, 0x41, 0x4c, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74,
    0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x20, 0x4f, 0x6e, 0x6c,
    0x79, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x54,
    0x4f, 0x4d, 0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
    0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0d, 0x04, 0x12, 0x03, 0x7b, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0d, 0x06, 0x12, 0x03, 0x7b, 0x0b, 0x19, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x7b, 0x1a, 0x34, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x0d, 0x03, 0x12, 0x03, 0x7b, 0x37, 0x39, 0x0a, 0x6b, 0x0a, 0x02, 0x05,
    0x01, 0x12, 0x06, 0x80, 0x01, 0x00, 0x97, 0x01, 0x01, 0x1a, 0x5d, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x65, 0x6e, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x73,
    0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x73,
    0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x69,
    0x6e, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x54, 0x61, 0x62, 0x6c,
    0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x05, 0x01, 0x01, 0x12,
    0x04, 0x80, 0x01, 0x05, 0x12, 0x0a, 0x0c, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12, 0x04, 0x81,
    0x01, 0x02, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x04, 0x81, 0x01,
    0x02, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x04, 0x81, 0x01, 0x0c,
    0x0f, 0x0a, 0x2b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x01, 0x12, 0x04, 0x84, 0x01, 0x02, 0x12, 0x1a,
    0x1d, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74,
    0x20, 0x79, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x01, 0x12, 0x04, 0x84, 0x01, 0x02, 0x0d, 0x0a, 0x0d, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x01, 0x02, 0x12, 0x04, 0x84, 0x01, 0x10, 0x11, 0x0a, 0x66, 0x0a, 0x04,
    0x05, 0x01, 0x02, 0x02, 0x12, 0x04, 0x88, 0x01, 0x02, 0x14, 0x1a, 0x58, 0x20, 0x49, 0x6e, 0x64,
    0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x20, 0x69, 0x73, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x70, 0x69,
    0x6e, 0x67, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x0a,
    0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x52,
    0x50, 0x43, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x01, 0x12, 0x04, 0x88,
    0x01, 0x02, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12, 0x04, 0x88, 0x01,
    0x12, 0x13, 0x0a, 0x84, 0x01, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x04, 0x8c, 0x01, 0x02,
    0x0e, 0x1a, 0x76, 0x20, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x68, 0x61, 0x73, 0x65,
    0x20, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x50, 0x65, 0x65, 0x72, 0x73, 0x20, 0x61,
    0x72, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x65, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x65, 0x20, 0x50, 0x65, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x76,
    0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65,
    0x6e, 0x74, 0x20, 0x52, 0x50, 0x43, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x03, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x09, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03,
    0x02, 0x12, 0x04, 0x8c, 0x01, 0x0c, 0x0d, 0x0a, 0x72, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x04, 0x12,
    0x04, 0x90, 0x01, 0x02, 0x0d, 0x1a, 0x64, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c,
    0x65, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x61,
    0x62, 0x6c, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x3a, 0x3a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x28,
    0x29, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x0a, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x05,
    0x01, 0x02, 0x04, 0x01, 0x12, 0x04, 0x90, 0x01, 0x02, 0x08, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01,
    0x02, 0x04, 0x02, 0x12, 0x04, 0x90, 0x01, 0x0b, 0x0c, 0x0a, 0x52, 0x0a, 0x04, 0x05, 0x01, 0x02,
    0x05, 0x12, 0x04, 0x93, 0x01, 0x02, 0x10, 0x1a, 0x44, 0x20, 0x54, 0x68, 0x65, 0x20, 0x54, 0x61,
    0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67,
    0x20, 0x64, 0x6f, 0x77, 0x6e, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x20, 0x66, 0x75, 0x72, 0x74, 0x68,
    0x65, 0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x05, 0x01, 0x12, 0x04, 0x93, 0x01, 0x02, 0x0b, 0x0a, 0x0d, 0x0a, 0x05,
    0x05, 0x01, 0x02, 0x05, 0x02, 0x12, 0x04, 0x93, 0x01, 0x0e, 0x0f, 0x0a, 0x2c, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x06, 0x12, 0x04, 0x96, 0x01, 0x02, 0x0f, 0x1a, 0x1e, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
    0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02,
    0x06, 0x01, 0x12, 0x04, 0x96, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06,
    0x02, 0x12, 0x04, 0x96, 0x01, 0x0d, 0x0e,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
