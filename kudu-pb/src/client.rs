// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use std::io::Write;

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ScanTokenPB {
    // message fields
    feature_flags: ::std::vec::Vec<ScanTokenPB_Feature>,
    table_name: ::protobuf::SingularField<::std::string::String>,
    projected_columns: ::protobuf::RepeatedField<super::common::ColumnSchemaPB>,
    column_predicates: ::protobuf::RepeatedField<super::common::ColumnPredicatePB>,
    lower_bound_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    upper_bound_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    lower_bound_partition_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    upper_bound_partition_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    limit: ::std::option::Option<u64>,
    read_mode: ::std::option::Option<super::common::ReadMode>,
    snap_timestamp: ::std::option::Option<u64>,
    propagated_timestamp: ::std::option::Option<u64>,
    cache_blocks: ::std::option::Option<bool>,
    fault_tolerant: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ScanTokenPB {}

impl ScanTokenPB {
    pub fn new() -> ScanTokenPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ScanTokenPB {
        static mut instance: ::protobuf::lazy::Lazy<ScanTokenPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScanTokenPB,
        };
        unsafe {
            instance.get(ScanTokenPB::new)
        }
    }

    // repeated .kudu.client.ScanTokenPB.Feature feature_flags = 1;

    pub fn clear_feature_flags(&mut self) {
        self.feature_flags.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature_flags(&mut self, v: ::std::vec::Vec<ScanTokenPB_Feature>) {
        self.feature_flags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feature_flags(&mut self) -> &mut ::std::vec::Vec<ScanTokenPB_Feature> {
        &mut self.feature_flags
    }

    // Take field
    pub fn take_feature_flags(&mut self) -> ::std::vec::Vec<ScanTokenPB_Feature> {
        ::std::mem::replace(&mut self.feature_flags, ::std::vec::Vec::new())
    }

    pub fn get_feature_flags(&self) -> &[ScanTokenPB_Feature] {
        &self.feature_flags
    }

    fn get_feature_flags_for_reflect(&self) -> &::std::vec::Vec<ScanTokenPB_Feature> {
        &self.feature_flags
    }

    fn mut_feature_flags_for_reflect(&mut self) -> &mut ::std::vec::Vec<ScanTokenPB_Feature> {
        &mut self.feature_flags
    }

    // optional string table_name = 2;

    pub fn clear_table_name(&mut self) {
        self.table_name.clear();
    }

    pub fn has_table_name(&self) -> bool {
        self.table_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_table_name(&mut self, v: ::std::string::String) {
        self.table_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_name(&mut self) -> &mut ::std::string::String {
        if self.table_name.is_none() {
            self.table_name.set_default();
        };
        self.table_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_table_name(&mut self) -> ::std::string::String {
        self.table_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_table_name(&self) -> &str {
        match self.table_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_table_name_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.table_name
    }

    fn mut_table_name_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.table_name
    }

    // repeated .kudu.ColumnSchemaPB projected_columns = 3;

    pub fn clear_projected_columns(&mut self) {
        self.projected_columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_projected_columns(&mut self, v: ::protobuf::RepeatedField<super::common::ColumnSchemaPB>) {
        self.projected_columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_projected_columns(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        &mut self.projected_columns
    }

    // Take field
    pub fn take_projected_columns(&mut self) -> ::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        ::std::mem::replace(&mut self.projected_columns, ::protobuf::RepeatedField::new())
    }

    pub fn get_projected_columns(&self) -> &[super::common::ColumnSchemaPB] {
        &self.projected_columns
    }

    fn get_projected_columns_for_reflect(&self) -> &::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        &self.projected_columns
    }

    fn mut_projected_columns_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        &mut self.projected_columns
    }

    // repeated .kudu.ColumnPredicatePB column_predicates = 4;

    pub fn clear_column_predicates(&mut self) {
        self.column_predicates.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_predicates(&mut self, v: ::protobuf::RepeatedField<super::common::ColumnPredicatePB>) {
        self.column_predicates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_predicates(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        &mut self.column_predicates
    }

    // Take field
    pub fn take_column_predicates(&mut self) -> ::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        ::std::mem::replace(&mut self.column_predicates, ::protobuf::RepeatedField::new())
    }

    pub fn get_column_predicates(&self) -> &[super::common::ColumnPredicatePB] {
        &self.column_predicates
    }

    fn get_column_predicates_for_reflect(&self) -> &::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        &self.column_predicates
    }

    fn mut_column_predicates_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        &mut self.column_predicates
    }

    // optional bytes lower_bound_primary_key = 5;

    pub fn clear_lower_bound_primary_key(&mut self) {
        self.lower_bound_primary_key.clear();
    }

    pub fn has_lower_bound_primary_key(&self) -> bool {
        self.lower_bound_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lower_bound_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.lower_bound_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lower_bound_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.lower_bound_primary_key.is_none() {
            self.lower_bound_primary_key.set_default();
        };
        self.lower_bound_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_lower_bound_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.lower_bound_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_lower_bound_primary_key(&self) -> &[u8] {
        match self.lower_bound_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_lower_bound_primary_key_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.lower_bound_primary_key
    }

    fn mut_lower_bound_primary_key_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.lower_bound_primary_key
    }

    // optional bytes upper_bound_primary_key = 6;

    pub fn clear_upper_bound_primary_key(&mut self) {
        self.upper_bound_primary_key.clear();
    }

    pub fn has_upper_bound_primary_key(&self) -> bool {
        self.upper_bound_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upper_bound_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.upper_bound_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upper_bound_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.upper_bound_primary_key.is_none() {
            self.upper_bound_primary_key.set_default();
        };
        self.upper_bound_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_upper_bound_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.upper_bound_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_upper_bound_primary_key(&self) -> &[u8] {
        match self.upper_bound_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_upper_bound_primary_key_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.upper_bound_primary_key
    }

    fn mut_upper_bound_primary_key_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.upper_bound_primary_key
    }

    // optional bytes lower_bound_partition_key = 7;

    pub fn clear_lower_bound_partition_key(&mut self) {
        self.lower_bound_partition_key.clear();
    }

    pub fn has_lower_bound_partition_key(&self) -> bool {
        self.lower_bound_partition_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lower_bound_partition_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.lower_bound_partition_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lower_bound_partition_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.lower_bound_partition_key.is_none() {
            self.lower_bound_partition_key.set_default();
        };
        self.lower_bound_partition_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_lower_bound_partition_key(&mut self) -> ::std::vec::Vec<u8> {
        self.lower_bound_partition_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_lower_bound_partition_key(&self) -> &[u8] {
        match self.lower_bound_partition_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_lower_bound_partition_key_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.lower_bound_partition_key
    }

    fn mut_lower_bound_partition_key_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.lower_bound_partition_key
    }

    // optional bytes upper_bound_partition_key = 8;

    pub fn clear_upper_bound_partition_key(&mut self) {
        self.upper_bound_partition_key.clear();
    }

    pub fn has_upper_bound_partition_key(&self) -> bool {
        self.upper_bound_partition_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upper_bound_partition_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.upper_bound_partition_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upper_bound_partition_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.upper_bound_partition_key.is_none() {
            self.upper_bound_partition_key.set_default();
        };
        self.upper_bound_partition_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_upper_bound_partition_key(&mut self) -> ::std::vec::Vec<u8> {
        self.upper_bound_partition_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_upper_bound_partition_key(&self) -> &[u8] {
        match self.upper_bound_partition_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_upper_bound_partition_key_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.upper_bound_partition_key
    }

    fn mut_upper_bound_partition_key_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.upper_bound_partition_key
    }

    // optional uint64 limit = 9;

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = ::std::option::Option::Some(v);
    }

    pub fn get_limit(&self) -> u64 {
        self.limit.unwrap_or(0)
    }

    fn get_limit_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.limit
    }

    fn mut_limit_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.limit
    }

    // optional .kudu.ReadMode read_mode = 10;

    pub fn clear_read_mode(&mut self) {
        self.read_mode = ::std::option::Option::None;
    }

    pub fn has_read_mode(&self) -> bool {
        self.read_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_mode(&mut self, v: super::common::ReadMode) {
        self.read_mode = ::std::option::Option::Some(v);
    }

    pub fn get_read_mode(&self) -> super::common::ReadMode {
        self.read_mode.unwrap_or(super::common::ReadMode::READ_LATEST)
    }

    fn get_read_mode_for_reflect(&self) -> &::std::option::Option<super::common::ReadMode> {
        &self.read_mode
    }

    fn mut_read_mode_for_reflect(&mut self) -> &mut ::std::option::Option<super::common::ReadMode> {
        &mut self.read_mode
    }

    // optional fixed64 snap_timestamp = 11;

    pub fn clear_snap_timestamp(&mut self) {
        self.snap_timestamp = ::std::option::Option::None;
    }

    pub fn has_snap_timestamp(&self) -> bool {
        self.snap_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_snap_timestamp(&mut self, v: u64) {
        self.snap_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_snap_timestamp(&self) -> u64 {
        self.snap_timestamp.unwrap_or(0)
    }

    fn get_snap_timestamp_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.snap_timestamp
    }

    fn mut_snap_timestamp_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.snap_timestamp
    }

    // optional fixed64 propagated_timestamp = 12;

    pub fn clear_propagated_timestamp(&mut self) {
        self.propagated_timestamp = ::std::option::Option::None;
    }

    pub fn has_propagated_timestamp(&self) -> bool {
        self.propagated_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propagated_timestamp(&mut self, v: u64) {
        self.propagated_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_propagated_timestamp(&self) -> u64 {
        self.propagated_timestamp.unwrap_or(0)
    }

    fn get_propagated_timestamp_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.propagated_timestamp
    }

    fn mut_propagated_timestamp_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.propagated_timestamp
    }

    // optional bool cache_blocks = 13;

    pub fn clear_cache_blocks(&mut self) {
        self.cache_blocks = ::std::option::Option::None;
    }

    pub fn has_cache_blocks(&self) -> bool {
        self.cache_blocks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_blocks(&mut self, v: bool) {
        self.cache_blocks = ::std::option::Option::Some(v);
    }

    pub fn get_cache_blocks(&self) -> bool {
        self.cache_blocks.unwrap_or(true)
    }

    fn get_cache_blocks_for_reflect(&self) -> &::std::option::Option<bool> {
        &self.cache_blocks
    }

    fn mut_cache_blocks_for_reflect(&mut self) -> &mut ::std::option::Option<bool> {
        &mut self.cache_blocks
    }

    // optional bool fault_tolerant = 14;

    pub fn clear_fault_tolerant(&mut self) {
        self.fault_tolerant = ::std::option::Option::None;
    }

    pub fn has_fault_tolerant(&self) -> bool {
        self.fault_tolerant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fault_tolerant(&mut self, v: bool) {
        self.fault_tolerant = ::std::option::Option::Some(v);
    }

    pub fn get_fault_tolerant(&self) -> bool {
        self.fault_tolerant.unwrap_or(false)
    }

    fn get_fault_tolerant_for_reflect(&self) -> &::std::option::Option<bool> {
        &self.fault_tolerant
    }

    fn mut_fault_tolerant_for_reflect(&mut self) -> &mut ::std::option::Option<bool> {
        &mut self.fault_tolerant
    }
}

impl ::protobuf::Message for ScanTokenPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_into(wire_type, is, &mut self.feature_flags)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.table_name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.projected_columns)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.column_predicates)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.lower_bound_primary_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.upper_bound_primary_key)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.lower_bound_partition_key)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.upper_bound_partition_key)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.limit = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.read_mode = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_fixed64()?;
                    self.snap_timestamp = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_fixed64()?;
                    self.propagated_timestamp = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.cache_blocks = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.fault_tolerant = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.feature_flags {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if let Some(v) = self.table_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        };
        for value in &self.projected_columns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.column_predicates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.lower_bound_primary_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        };
        if let Some(v) = self.upper_bound_primary_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        };
        if let Some(v) = self.lower_bound_partition_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        };
        if let Some(v) = self.upper_bound_partition_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        };
        if let Some(v) = self.limit {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.read_mode {
            my_size += ::protobuf::rt::enum_size(10, v);
        };
        if let Some(v) = self.snap_timestamp {
            my_size += 9;
        };
        if let Some(v) = self.propagated_timestamp {
            my_size += 9;
        };
        if let Some(v) = self.cache_blocks {
            my_size += 2;
        };
        if let Some(v) = self.fault_tolerant {
            my_size += 2;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        for v in &self.feature_flags {
            os.write_enum(1, v.value())?;
        };
        if let Some(v) = self.table_name.as_ref() {
            os.write_string(2, &v)?;
        };
        for v in &self.projected_columns {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.column_predicates {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.lower_bound_primary_key.as_ref() {
            os.write_bytes(5, &v)?;
        };
        if let Some(v) = self.upper_bound_primary_key.as_ref() {
            os.write_bytes(6, &v)?;
        };
        if let Some(v) = self.lower_bound_partition_key.as_ref() {
            os.write_bytes(7, &v)?;
        };
        if let Some(v) = self.upper_bound_partition_key.as_ref() {
            os.write_bytes(8, &v)?;
        };
        if let Some(v) = self.limit {
            os.write_uint64(9, v)?;
        };
        if let Some(v) = self.read_mode {
            os.write_enum(10, v.value())?;
        };
        if let Some(v) = self.snap_timestamp {
            os.write_fixed64(11, v)?;
        };
        if let Some(v) = self.propagated_timestamp {
            os.write_fixed64(12, v)?;
        };
        if let Some(v) = self.cache_blocks {
            os.write_bool(13, v)?;
        };
        if let Some(v) = self.fault_tolerant {
            os.write_bool(14, v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ScanTokenPB {
    fn new() -> ScanTokenPB {
        ScanTokenPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ScanTokenPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ScanTokenPB_Feature>>(
                    "feature_flags",
                    ScanTokenPB::get_feature_flags_for_reflect,
                    ScanTokenPB::mut_feature_flags_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "table_name",
                    ScanTokenPB::get_table_name_for_reflect,
                    ScanTokenPB::mut_table_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::ColumnSchemaPB>>(
                    "projected_columns",
                    ScanTokenPB::get_projected_columns_for_reflect,
                    ScanTokenPB::mut_projected_columns_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::ColumnPredicatePB>>(
                    "column_predicates",
                    ScanTokenPB::get_column_predicates_for_reflect,
                    ScanTokenPB::mut_column_predicates_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "lower_bound_primary_key",
                    ScanTokenPB::get_lower_bound_primary_key_for_reflect,
                    ScanTokenPB::mut_lower_bound_primary_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "upper_bound_primary_key",
                    ScanTokenPB::get_upper_bound_primary_key_for_reflect,
                    ScanTokenPB::mut_upper_bound_primary_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "lower_bound_partition_key",
                    ScanTokenPB::get_lower_bound_partition_key_for_reflect,
                    ScanTokenPB::mut_lower_bound_partition_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "upper_bound_partition_key",
                    ScanTokenPB::get_upper_bound_partition_key_for_reflect,
                    ScanTokenPB::mut_upper_bound_partition_key_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "limit",
                    ScanTokenPB::get_limit_for_reflect,
                    ScanTokenPB::mut_limit_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::common::ReadMode>>(
                    "read_mode",
                    ScanTokenPB::get_read_mode_for_reflect,
                    ScanTokenPB::mut_read_mode_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "snap_timestamp",
                    ScanTokenPB::get_snap_timestamp_for_reflect,
                    ScanTokenPB::mut_snap_timestamp_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "propagated_timestamp",
                    ScanTokenPB::get_propagated_timestamp_for_reflect,
                    ScanTokenPB::mut_propagated_timestamp_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "cache_blocks",
                    ScanTokenPB::get_cache_blocks_for_reflect,
                    ScanTokenPB::mut_cache_blocks_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fault_tolerant",
                    ScanTokenPB::get_fault_tolerant_for_reflect,
                    ScanTokenPB::mut_fault_tolerant_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScanTokenPB>(
                    "ScanTokenPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ScanTokenPB {
    fn clear(&mut self) {
        self.clear_feature_flags();
        self.clear_table_name();
        self.clear_projected_columns();
        self.clear_column_predicates();
        self.clear_lower_bound_primary_key();
        self.clear_upper_bound_primary_key();
        self.clear_lower_bound_partition_key();
        self.clear_upper_bound_partition_key();
        self.clear_limit();
        self.clear_read_mode();
        self.clear_snap_timestamp();
        self.clear_propagated_timestamp();
        self.clear_cache_blocks();
        self.clear_fault_tolerant();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScanTokenPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScanTokenPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ScanTokenPB_Feature {
    Unknown = 0,
}

impl ::protobuf::ProtobufEnum for ScanTokenPB_Feature {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ScanTokenPB_Feature> {
        match value {
            0 => ::std::option::Option::Some(ScanTokenPB_Feature::Unknown),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ScanTokenPB_Feature] = &[
            ScanTokenPB_Feature::Unknown,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ScanTokenPB_Feature>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ScanTokenPB_Feature", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ScanTokenPB_Feature {
}

impl ::protobuf::reflect::ProtobufValue for ScanTokenPB_Feature {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x18, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c,
    0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x75, 0x64, 0x75,
    0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x18, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6f,
    0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x1a, 0x17, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x70, 0x62, 0x5f,
    0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x04, 0x0a, 0x0b, 0x53,
    0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x0d, 0x66, 0x65,
    0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
    0x0e, 0x32, 0x20, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
    0x53, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x2e, 0x46, 0x65, 0x61, 0x74,
    0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
    0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65,
    0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
    0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
    0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75,
    0x6d, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
    0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
    0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x17,
    0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d,
    0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88,
    0xb5, 0x18, 0x01, 0x12, 0x25, 0x0a, 0x17, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75,
    0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06,
    0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x27, 0x0a, 0x19, 0x6c, 0x6f,
    0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88,
    0xb5, 0x18, 0x01, 0x12, 0x27, 0x0a, 0x19, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75,
    0x6e, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
    0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x12, 0x0d, 0x0a, 0x05,
    0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x12, 0x2e, 0x0a, 0x09, 0x72,
    0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
    0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x0b,
    0x52, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x12, 0x16, 0x0a, 0x0e, 0x73,
    0x6e, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20,
    0x01, 0x28, 0x06, 0x12, 0x1c, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
    0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
    0x06, 0x12, 0x1a, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
    0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x12, 0x1d, 0x0a,
    0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x18,
    0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x07,
    0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
    0x77, 0x6e, 0x10, 0x00, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63,
    0x68, 0x65, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0xe0,
    0x1c, 0x0a, 0x06, 0x12, 0x04, 0x13, 0x00, 0x5d, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03,
    0x13, 0x08, 0x13, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x15, 0x00, 0x2f, 0x0a, 0x0b, 0x0a,
    0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x15, 0x00, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07,
    0x12, 0x03, 0x15, 0x16, 0x2e, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x17, 0x07, 0x21,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x18, 0x07, 0x20, 0x0a, 0xd0, 0x02, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x1f, 0x00, 0x5d, 0x01, 0x1a, 0xc3, 0x02, 0x20, 0x53, 0x65, 0x72, 0x69,
    0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6e,
    0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x6f,
    0x6b, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
    0x7a, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x65,
    0x6e, 0x67, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x6c, 0x61, 0x6e, 0x20, 0x61,
    0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x69, 0x7a,
    0x61, 0x62, 0x6c, 0x65, 0x0a, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
    0x20, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20,
    0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61,
    0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
    0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61,
    0x72, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1f, 0x08, 0x13, 0x0a, 0x92, 0x02, 0x0a, 0x04, 0x04,
    0x00, 0x04, 0x00, 0x12, 0x04, 0x25, 0x02, 0x27, 0x03, 0x1a, 0x83, 0x02, 0x20, 0x46, 0x65, 0x61,
    0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x6d, 0x65, 0x73,
    0x73, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x45, 0x76, 0x65, 0x72, 0x79, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x75, 0x70, 0x64,
    0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20,
    0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x65, 0x61,
    0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x61,
    0x64, 0x64, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x75,
    0x6d, 0x2c, 0x20, 0x73, 0x6f, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65,
    0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6c, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65,
    0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
    0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x6b, 0x65,
    0x6e, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x75, 0x73, 0x65, 0x73, 0x20, 0x75, 0x6e, 0x6b,
    0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x25, 0x07, 0x0e, 0x0a, 0x0d, 0x0a,
    0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x26, 0x04, 0x10, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x26, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x26, 0x0e, 0x0f, 0x0a, 0x37, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x2a, 0x02, 0x25, 0x1a, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x6f,
    0x6b, 0x65, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x2a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x2a, 0x0b,
    0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2a, 0x13, 0x20, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x2a, 0x23, 0x24, 0x0a, 0x21, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x2d, 0x02, 0x21, 0x1a, 0x14, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x2d, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x2d, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2d, 0x12, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x2d, 0x1f, 0x20, 0x0a, 0xb7, 0x02, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x02, 0x12, 0x03, 0x34, 0x02, 0x30, 0x1a, 0xa9, 0x02, 0x20, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63,
    0x74, 0x2e, 0x0a, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61,
    0x6e, 0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x20, 0x6e, 0x6f,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
    0x52, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e,
    0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20,
    0x72, 0x6f, 0x77, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x20, 0x4e, 0x6f, 0x74,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63,
    0x61, 0x73, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x0a, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64,
    0x2d, 0x74, 0x72, 0x69, 0x70, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x61, 0x67, 0x67, 0x72,
    0x65, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x34, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x34, 0x0b, 0x19, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x34, 0x1a, 0x2b, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x34, 0x2e, 0x2f, 0x0a, 0x30, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x03, 0x12, 0x03, 0x37, 0x02, 0x33, 0x1a, 0x23, 0x20, 0x41, 0x6e, 0x79, 0x20, 0x63, 0x6f,
    0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20,
    0x74, 0x6f, 0x20, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x37, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x03, 0x06, 0x12, 0x03, 0x37, 0x0b, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x37, 0x1d, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12,
    0x03, 0x37, 0x31, 0x32, 0x0a, 0x44, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x3a, 0x02,
    0x44, 0x1a, 0x37, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6d,
    0x61, 0x72, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x28, 0x69, 0x6e,
    0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x04, 0x04, 0x12, 0x03, 0x3a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04,
    0x05, 0x12, 0x03, 0x3a, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x3a, 0x11, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x3a,
    0x2b, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x08, 0x12, 0x03, 0x3a, 0x2d, 0x43,
    0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x00, 0x02, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x3a, 0x2e,
    0x42, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03,
    0x3a, 0x2e, 0x3b, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x00, 0x02, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x3a, 0x2e, 0x3b, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x02, 0x04, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3a, 0x2f, 0x3a, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00,
    0x02, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x3a, 0x3e, 0x42, 0x0a, 0x43, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x3d, 0x02, 0x44, 0x1a, 0x36, 0x20, 0x45, 0x6e, 0x63, 0x6f,
    0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20,
    0x74, 0x6f, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
    0x20, 0x61, 0x74, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x29, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x3d, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03, 0x3d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x3d, 0x11, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x3d, 0x2b, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x05, 0x08, 0x12, 0x03, 0x3d, 0x2d, 0x43, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x00, 0x02, 0x05, 0x08,
    0xe7, 0x07, 0x00, 0x12, 0x03, 0x3d, 0x2e, 0x42, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x05,
    0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x3d, 0x2e, 0x3b, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x00,
    0x02, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x3d, 0x2e, 0x3b, 0x0a, 0x12, 0x0a,
    0x0b, 0x04, 0x00, 0x02, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3d, 0x2f,
    0x3a, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03,
    0x3d, 0x3e, 0x42, 0x0a, 0x46, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x40, 0x02, 0x46,
    0x1a, 0x39, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69,
    0x6e, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x28, 0x69,
    0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x06, 0x04, 0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x06, 0x05, 0x12, 0x03, 0x40, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x01,
    0x12, 0x03, 0x40, 0x11, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03, 0x12, 0x03,
    0x40, 0x2d, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x08, 0x12, 0x03, 0x40, 0x2f,
    0x45, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x00, 0x02, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x40,
    0x30, 0x44, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12,
    0x03, 0x40, 0x30, 0x3d, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x00, 0x02, 0x06, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x40, 0x30, 0x3d, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x02, 0x06, 0x08,
    0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x40, 0x31, 0x3c, 0x0a, 0x10, 0x0a, 0x09, 0x04,
    0x00, 0x02, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x40, 0x40, 0x44, 0x0a, 0x45, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x43, 0x02, 0x46, 0x1a, 0x38, 0x20, 0x45, 0x6e, 0x63,
    0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b,
    0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e,
    0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x28, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
    0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x03, 0x43,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x05, 0x12, 0x03, 0x43, 0x0b, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x43, 0x11, 0x2a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x03, 0x12, 0x03, 0x43, 0x2d, 0x2e, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x07, 0x08, 0x12, 0x03, 0x43, 0x2f, 0x45, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x00,
    0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x43, 0x30, 0x44, 0x0a, 0x10, 0x0a, 0x09, 0x04,
    0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x43, 0x30, 0x3d, 0x0a, 0x11, 0x0a,
    0x0a, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x43, 0x30, 0x3d,
    0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x43, 0x31, 0x3c, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x02, 0x07, 0x08, 0xe7, 0x07, 0x00,
    0x03, 0x12, 0x03, 0x43, 0x40, 0x44, 0x0a, 0xa6, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x08, 0x12,
    0x03, 0x48, 0x02, 0x1c, 0x1a, 0x98, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69,
    0x6d, 0x75, 0x6d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x6f,
    0x77, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x75,
    0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x70,
    0x20, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
    0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0a, 0x20, 0x69, 0x74, 0x73,
    0x65, 0x6c, 0x66, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69,
    0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
    0x66, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x04, 0x12, 0x03, 0x48, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x08, 0x05, 0x12, 0x03, 0x48, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x48, 0x12, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x08, 0x03, 0x12, 0x03, 0x48, 0x1a, 0x1b, 0x0a, 0x6f, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x09, 0x12,
    0x03, 0x4c, 0x02, 0x3b, 0x1a, 0x62, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20,
    0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63,
    0x61, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x65,
    0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x72, 0x65, 0x61, 0x64,
    0x20, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09,
    0x04, 0x12, 0x03, 0x4c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x06, 0x12,
    0x03, 0x4c, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x4c,
    0x14, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x03, 0x12, 0x03, 0x4c, 0x20, 0x22,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x08, 0x12, 0x03, 0x4c, 0x23, 0x3a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x07, 0x12, 0x03, 0x4c, 0x2e, 0x39, 0x0a, 0x72, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x0a, 0x12, 0x03, 0x50, 0x02, 0x27, 0x1a, 0x65, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
    0x6f, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x20, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x0a,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d,
    0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x52, 0x45,
    0x41, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x04, 0x12, 0x03, 0x50, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x05, 0x12, 0x03, 0x50, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x50, 0x13, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x0a, 0x03, 0x12, 0x03, 0x50, 0x24, 0x26, 0x0a, 0xda, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x0b, 0x12, 0x03, 0x55, 0x02, 0x2d, 0x1a, 0xcc, 0x01, 0x20, 0x53, 0x65, 0x6e, 0x74, 0x20, 0x62,
    0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
    0x74, 0x65, 0x64, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x41,
    0x47, 0x41, 0x54, 0x45, 0x44, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x0a, 0x20, 0x54,
    0x68, 0x69, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x73, 0x6f,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x73, 0x73,
    0x69, 0x67, 0x6e, 0x65, 0x64, 0x0a, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
    0x6d, 0x70, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x6f, 0x72,
    0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x70, 0x72, 0x65, 0x76, 0x69,
    0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x27, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x04, 0x12, 0x03,
    0x55, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x05, 0x12, 0x03, 0x55, 0x0b,
    0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x55, 0x13, 0x27, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x03, 0x12, 0x03, 0x55, 0x2a, 0x2c, 0x0a, 0x9e, 0x01,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x59, 0x02, 0x33, 0x1a, 0x90, 0x01, 0x20, 0x57,
    0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63,
    0x6b, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65,
    0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69,
    0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x75, 0x73,
    0x65, 0x2e, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20,
    0x63, 0x68, 0x75, 0x72, 0x6e, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64, 0x6f, 0x69, 0x6e, 0x67,
    0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x04, 0x12, 0x03, 0x59, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x0c, 0x05, 0x12, 0x03, 0x59, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x0c, 0x01, 0x12, 0x03, 0x59, 0x10, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c,
    0x03, 0x12, 0x03, 0x59, 0x1f, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x08, 0x12,
    0x03, 0x59, 0x22, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x07, 0x12, 0x03, 0x59,
    0x2d, 0x31, 0x0a, 0x39, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x5c, 0x02, 0x36, 0x1a,
    0x2c, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
    0x61, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x66, 0x61, 0x75,
    0x6c, 0x74, 0x20, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x0d, 0x04, 0x12, 0x03, 0x5c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x0d, 0x05, 0x12, 0x03, 0x5c, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x0d, 0x01, 0x12, 0x03, 0x5c, 0x10, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x03,
    0x12, 0x03, 0x5c, 0x21, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x08, 0x12, 0x03,
    0x5c, 0x24, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x07, 0x12, 0x03, 0x5c, 0x2f,
    0x34,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
