// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct AuthnTokenPB {
    // message fields
    username: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for AuthnTokenPB {}

impl AuthnTokenPB {
    pub fn new() -> AuthnTokenPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static AuthnTokenPB {
        static mut instance: ::protobuf::lazy::Lazy<AuthnTokenPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AuthnTokenPB,
        };
        unsafe {
            instance.get(|| {
                AuthnTokenPB {
                    username: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional string username = 1;

    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    pub fn has_username(&self) -> bool {
        self.username.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        if self.username.is_none() {
            self.username.set_default();
        };
        self.username.as_mut().unwrap()
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        self.username.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_username(&self) -> &str {
        match self.username.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for AuthnTokenPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.username));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.username.iter() {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.username.as_ref() {
            try!(w.write_string(1, &v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<AuthnTokenPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for AuthnTokenPB {
    fn new() -> AuthnTokenPB {
        AuthnTokenPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<AuthnTokenPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "username",
                    AuthnTokenPB::has_username,
                    AuthnTokenPB::get_username,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AuthnTokenPB>(
                    "AuthnTokenPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for AuthnTokenPB {
    fn clear(&mut self) {
        self.clear_username();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for AuthnTokenPB {
    fn eq(&self, other: &AuthnTokenPB) -> bool {
        self.username == other.username &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for AuthnTokenPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct AuthzTokenPB {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for AuthzTokenPB {}

impl AuthzTokenPB {
    pub fn new() -> AuthzTokenPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static AuthzTokenPB {
        static mut instance: ::protobuf::lazy::Lazy<AuthzTokenPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AuthzTokenPB,
        };
        unsafe {
            instance.get(|| {
                AuthzTokenPB {
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }
}

impl ::protobuf::Message for AuthzTokenPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<AuthzTokenPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for AuthzTokenPB {
    fn new() -> AuthzTokenPB {
        AuthzTokenPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<AuthzTokenPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<AuthzTokenPB>(
                    "AuthzTokenPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for AuthzTokenPB {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for AuthzTokenPB {
    fn eq(&self, other: &AuthzTokenPB) -> bool {
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for AuthzTokenPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TokenPB {
    // message fields
    expire_unix_epoch_seconds: ::std::option::Option<i64>,
    incompatible_features: ::std::vec::Vec<i32>,
    // message oneof groups
    token: ::std::option::Option<TokenPB_oneof_token>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TokenPB {}

#[derive(Clone,PartialEq)]
pub enum TokenPB_oneof_token {
    authn(AuthnTokenPB),
    authz(AuthzTokenPB),
}

impl TokenPB {
    pub fn new() -> TokenPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TokenPB {
        static mut instance: ::protobuf::lazy::Lazy<TokenPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenPB,
        };
        unsafe {
            instance.get(|| {
                TokenPB {
                    expire_unix_epoch_seconds: ::std::option::Option::None,
                    incompatible_features: ::std::vec::Vec::new(),
                    token: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 expire_unix_epoch_seconds = 1;

    pub fn clear_expire_unix_epoch_seconds(&mut self) {
        self.expire_unix_epoch_seconds = ::std::option::Option::None;
    }

    pub fn has_expire_unix_epoch_seconds(&self) -> bool {
        self.expire_unix_epoch_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expire_unix_epoch_seconds(&mut self, v: i64) {
        self.expire_unix_epoch_seconds = ::std::option::Option::Some(v);
    }

    pub fn get_expire_unix_epoch_seconds(&self) -> i64 {
        self.expire_unix_epoch_seconds.unwrap_or(0)
    }

    // repeated int32 incompatible_features = 2;

    pub fn clear_incompatible_features(&mut self) {
        self.incompatible_features.clear();
    }

    // Param is passed by value, moved
    pub fn set_incompatible_features(&mut self, v: ::std::vec::Vec<i32>) {
        self.incompatible_features = v;
    }

    // Mutable pointer to the field.
    pub fn mut_incompatible_features(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.incompatible_features
    }

    // Take field
    pub fn take_incompatible_features(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.incompatible_features, ::std::vec::Vec::new())
    }

    pub fn get_incompatible_features(&self) -> &[i32] {
        &self.incompatible_features
    }

    // optional .kudu.security.AuthnTokenPB authn = 3;

    pub fn clear_authn(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_authn(&self) -> bool {
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authn(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authn(&mut self, v: AuthnTokenPB) {
        self.token = ::std::option::Option::Some(TokenPB_oneof_token::authn(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authn(&mut self) -> &mut AuthnTokenPB {
        if let ::std::option::Option::Some(TokenPB_oneof_token::authn(_)) = self.token {
        } else {
            self.token = ::std::option::Option::Some(TokenPB_oneof_token::authn(AuthnTokenPB::new()));
        }
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authn(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authn(&mut self) -> AuthnTokenPB {
        if self.has_authn() {
            match self.token.take() {
                ::std::option::Option::Some(TokenPB_oneof_token::authn(v)) => v,
                _ => panic!(),
            }
        } else {
            AuthnTokenPB::new()
        }
    }

    pub fn get_authn(&self) -> &AuthnTokenPB {
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authn(ref v)) => v,
            _ => AuthnTokenPB::default_instance(),
        }
    }

    // optional .kudu.security.AuthzTokenPB authz = 4;

    pub fn clear_authz(&mut self) {
        self.token = ::std::option::Option::None;
    }

    pub fn has_authz(&self) -> bool {
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authz(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_authz(&mut self, v: AuthzTokenPB) {
        self.token = ::std::option::Option::Some(TokenPB_oneof_token::authz(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authz(&mut self) -> &mut AuthzTokenPB {
        if let ::std::option::Option::Some(TokenPB_oneof_token::authz(_)) = self.token {
        } else {
            self.token = ::std::option::Option::Some(TokenPB_oneof_token::authz(AuthzTokenPB::new()));
        }
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authz(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_authz(&mut self) -> AuthzTokenPB {
        if self.has_authz() {
            match self.token.take() {
                ::std::option::Option::Some(TokenPB_oneof_token::authz(v)) => v,
                _ => panic!(),
            }
        } else {
            AuthzTokenPB::new()
        }
    }

    pub fn get_authz(&self) -> &AuthzTokenPB {
        match self.token {
            ::std::option::Option::Some(TokenPB_oneof_token::authz(ref v)) => v,
            _ => AuthzTokenPB::default_instance(),
        }
    }
}

impl ::protobuf::Message for TokenPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.expire_unix_epoch_seconds = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.incompatible_features));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.token = ::std::option::Option::Some(TokenPB_oneof_token::authn(try!(is.read_message())));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.token = ::std::option::Option::Some(TokenPB_oneof_token::authz(try!(is.read_message())));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.expire_unix_epoch_seconds.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.incompatible_features.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let ::std::option::Option::Some(ref v) = self.token {
            match v {
                &TokenPB_oneof_token::authn(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TokenPB_oneof_token::authz(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.expire_unix_epoch_seconds {
            try!(w.write_int64(1, v));
        };
        for v in self.incompatible_features.iter() {
            try!(w.write_int32(2, *v));
        };
        if let ::std::option::Option::Some(ref v) = self.token {
            match v {
                &TokenPB_oneof_token::authn(ref v) => {
                    try!(w.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(w.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(w));
                },
                &TokenPB_oneof_token::authz(ref v) => {
                    try!(w.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(w.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(w));
                },
            };
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TokenPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TokenPB {
    fn new() -> TokenPB {
        TokenPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<TokenPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "expire_unix_epoch_seconds",
                    TokenPB::has_expire_unix_epoch_seconds,
                    TokenPB::get_expire_unix_epoch_seconds,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_i32_accessor(
                    "incompatible_features",
                    TokenPB::get_incompatible_features,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "authn",
                    TokenPB::has_authn,
                    TokenPB::get_authn,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "authz",
                    TokenPB::has_authz,
                    TokenPB::get_authz,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TokenPB>(
                    "TokenPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TokenPB {
    fn clear(&mut self) {
        self.clear_expire_unix_epoch_seconds();
        self.clear_incompatible_features();
        self.clear_authn();
        self.clear_authz();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TokenPB {
    fn eq(&self, other: &TokenPB) -> bool {
        self.expire_unix_epoch_seconds == other.expire_unix_epoch_seconds &&
        self.incompatible_features == other.incompatible_features &&
        self.token == other.token &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TokenPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TokenPB_Feature {
    UNUSED_PLACEHOLDER = 999,
}

impl ::protobuf::ProtobufEnum for TokenPB_Feature {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TokenPB_Feature> {
        match value {
            999 => ::std::option::Option::Some(TokenPB_Feature::UNUSED_PLACEHOLDER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TokenPB_Feature] = &[
            TokenPB_Feature::UNUSED_PLACEHOLDER,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<TokenPB_Feature>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TokenPB_Feature", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TokenPB_Feature {
}

#[derive(Clone,Default)]
pub struct SignedTokenPB {
    // message fields
    token_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    signing_key_seq_num: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for SignedTokenPB {}

impl SignedTokenPB {
    pub fn new() -> SignedTokenPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SignedTokenPB {
        static mut instance: ::protobuf::lazy::Lazy<SignedTokenPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTokenPB,
        };
        unsafe {
            instance.get(|| {
                SignedTokenPB {
                    token_data: ::protobuf::SingularField::none(),
                    signature: ::protobuf::SingularField::none(),
                    signing_key_seq_num: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes token_data = 1;

    pub fn clear_token_data(&mut self) {
        self.token_data.clear();
    }

    pub fn has_token_data(&self) -> bool {
        self.token_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.token_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.token_data.is_none() {
            self.token_data.set_default();
        };
        self.token_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_data(&mut self) -> ::std::vec::Vec<u8> {
        self.token_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_token_data(&self) -> &[u8] {
        match self.token_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes signature = 2;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        };
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional int64 signing_key_seq_num = 3;

    pub fn clear_signing_key_seq_num(&mut self) {
        self.signing_key_seq_num = ::std::option::Option::None;
    }

    pub fn has_signing_key_seq_num(&self) -> bool {
        self.signing_key_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signing_key_seq_num(&mut self, v: i64) {
        self.signing_key_seq_num = ::std::option::Option::Some(v);
    }

    pub fn get_signing_key_seq_num(&self) -> i64 {
        self.signing_key_seq_num.unwrap_or(0)
    }
}

impl ::protobuf::Message for SignedTokenPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.token_data));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.signing_key_seq_num = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.token_data.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.signature.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.signing_key_seq_num.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.token_data.as_ref() {
            try!(w.write_bytes(1, &v));
        };
        if let Some(v) = self.signature.as_ref() {
            try!(w.write_bytes(2, &v));
        };
        if let Some(v) = self.signing_key_seq_num {
            try!(w.write_int64(3, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<SignedTokenPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SignedTokenPB {
    fn new() -> SignedTokenPB {
        SignedTokenPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<SignedTokenPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "token_data",
                    SignedTokenPB::has_token_data,
                    SignedTokenPB::get_token_data,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "signature",
                    SignedTokenPB::has_signature,
                    SignedTokenPB::get_signature,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "signing_key_seq_num",
                    SignedTokenPB::has_signing_key_seq_num,
                    SignedTokenPB::get_signing_key_seq_num,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTokenPB>(
                    "SignedTokenPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SignedTokenPB {
    fn clear(&mut self) {
        self.clear_token_data();
        self.clear_signature();
        self.clear_signing_key_seq_num();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for SignedTokenPB {
    fn eq(&self, other: &SignedTokenPB) -> bool {
        self.token_data == other.token_data &&
        self.signature == other.signature &&
        self.signing_key_seq_num == other.signing_key_seq_num &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for SignedTokenPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TokenSigningPrivateKeyPB {
    // message fields
    key_seq_num: ::std::option::Option<i64>,
    rsa_key_der: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    expire_unix_epoch_seconds: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TokenSigningPrivateKeyPB {}

impl TokenSigningPrivateKeyPB {
    pub fn new() -> TokenSigningPrivateKeyPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TokenSigningPrivateKeyPB {
        static mut instance: ::protobuf::lazy::Lazy<TokenSigningPrivateKeyPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenSigningPrivateKeyPB,
        };
        unsafe {
            instance.get(|| {
                TokenSigningPrivateKeyPB {
                    key_seq_num: ::std::option::Option::None,
                    rsa_key_der: ::protobuf::SingularField::none(),
                    expire_unix_epoch_seconds: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 key_seq_num = 1;

    pub fn clear_key_seq_num(&mut self) {
        self.key_seq_num = ::std::option::Option::None;
    }

    pub fn has_key_seq_num(&self) -> bool {
        self.key_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_seq_num(&mut self, v: i64) {
        self.key_seq_num = ::std::option::Option::Some(v);
    }

    pub fn get_key_seq_num(&self) -> i64 {
        self.key_seq_num.unwrap_or(0)
    }

    // optional bytes rsa_key_der = 2;

    pub fn clear_rsa_key_der(&mut self) {
        self.rsa_key_der.clear();
    }

    pub fn has_rsa_key_der(&self) -> bool {
        self.rsa_key_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rsa_key_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.rsa_key_der = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rsa_key_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.rsa_key_der.is_none() {
            self.rsa_key_der.set_default();
        };
        self.rsa_key_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_rsa_key_der(&mut self) -> ::std::vec::Vec<u8> {
        self.rsa_key_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_rsa_key_der(&self) -> &[u8] {
        match self.rsa_key_der.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional int64 expire_unix_epoch_seconds = 3;

    pub fn clear_expire_unix_epoch_seconds(&mut self) {
        self.expire_unix_epoch_seconds = ::std::option::Option::None;
    }

    pub fn has_expire_unix_epoch_seconds(&self) -> bool {
        self.expire_unix_epoch_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expire_unix_epoch_seconds(&mut self, v: i64) {
        self.expire_unix_epoch_seconds = ::std::option::Option::Some(v);
    }

    pub fn get_expire_unix_epoch_seconds(&self) -> i64 {
        self.expire_unix_epoch_seconds.unwrap_or(0)
    }
}

impl ::protobuf::Message for TokenSigningPrivateKeyPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.key_seq_num = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.rsa_key_der));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.expire_unix_epoch_seconds = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.key_seq_num.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.rsa_key_der.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.expire_unix_epoch_seconds.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key_seq_num {
            try!(w.write_int64(1, v));
        };
        if let Some(v) = self.rsa_key_der.as_ref() {
            try!(w.write_bytes(2, &v));
        };
        if let Some(v) = self.expire_unix_epoch_seconds {
            try!(w.write_int64(3, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TokenSigningPrivateKeyPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TokenSigningPrivateKeyPB {
    fn new() -> TokenSigningPrivateKeyPB {
        TokenSigningPrivateKeyPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<TokenSigningPrivateKeyPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "key_seq_num",
                    TokenSigningPrivateKeyPB::has_key_seq_num,
                    TokenSigningPrivateKeyPB::get_key_seq_num,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "rsa_key_der",
                    TokenSigningPrivateKeyPB::has_rsa_key_der,
                    TokenSigningPrivateKeyPB::get_rsa_key_der,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "expire_unix_epoch_seconds",
                    TokenSigningPrivateKeyPB::has_expire_unix_epoch_seconds,
                    TokenSigningPrivateKeyPB::get_expire_unix_epoch_seconds,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TokenSigningPrivateKeyPB>(
                    "TokenSigningPrivateKeyPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TokenSigningPrivateKeyPB {
    fn clear(&mut self) {
        self.clear_key_seq_num();
        self.clear_rsa_key_der();
        self.clear_expire_unix_epoch_seconds();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TokenSigningPrivateKeyPB {
    fn eq(&self, other: &TokenSigningPrivateKeyPB) -> bool {
        self.key_seq_num == other.key_seq_num &&
        self.rsa_key_der == other.rsa_key_der &&
        self.expire_unix_epoch_seconds == other.expire_unix_epoch_seconds &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TokenSigningPrivateKeyPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct TokenSigningPublicKeyPB {
    // message fields
    key_seq_num: ::std::option::Option<i64>,
    rsa_key_der: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    expire_unix_epoch_seconds: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TokenSigningPublicKeyPB {}

impl TokenSigningPublicKeyPB {
    pub fn new() -> TokenSigningPublicKeyPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TokenSigningPublicKeyPB {
        static mut instance: ::protobuf::lazy::Lazy<TokenSigningPublicKeyPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenSigningPublicKeyPB,
        };
        unsafe {
            instance.get(|| {
                TokenSigningPublicKeyPB {
                    key_seq_num: ::std::option::Option::None,
                    rsa_key_der: ::protobuf::SingularField::none(),
                    expire_unix_epoch_seconds: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 key_seq_num = 1;

    pub fn clear_key_seq_num(&mut self) {
        self.key_seq_num = ::std::option::Option::None;
    }

    pub fn has_key_seq_num(&self) -> bool {
        self.key_seq_num.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_seq_num(&mut self, v: i64) {
        self.key_seq_num = ::std::option::Option::Some(v);
    }

    pub fn get_key_seq_num(&self) -> i64 {
        self.key_seq_num.unwrap_or(0)
    }

    // optional bytes rsa_key_der = 2;

    pub fn clear_rsa_key_der(&mut self) {
        self.rsa_key_der.clear();
    }

    pub fn has_rsa_key_der(&self) -> bool {
        self.rsa_key_der.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rsa_key_der(&mut self, v: ::std::vec::Vec<u8>) {
        self.rsa_key_der = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rsa_key_der(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.rsa_key_der.is_none() {
            self.rsa_key_der.set_default();
        };
        self.rsa_key_der.as_mut().unwrap()
    }

    // Take field
    pub fn take_rsa_key_der(&mut self) -> ::std::vec::Vec<u8> {
        self.rsa_key_der.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_rsa_key_der(&self) -> &[u8] {
        match self.rsa_key_der.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional int64 expire_unix_epoch_seconds = 3;

    pub fn clear_expire_unix_epoch_seconds(&mut self) {
        self.expire_unix_epoch_seconds = ::std::option::Option::None;
    }

    pub fn has_expire_unix_epoch_seconds(&self) -> bool {
        self.expire_unix_epoch_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expire_unix_epoch_seconds(&mut self, v: i64) {
        self.expire_unix_epoch_seconds = ::std::option::Option::Some(v);
    }

    pub fn get_expire_unix_epoch_seconds(&self) -> i64 {
        self.expire_unix_epoch_seconds.unwrap_or(0)
    }
}

impl ::protobuf::Message for TokenSigningPublicKeyPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.key_seq_num = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.rsa_key_der));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.expire_unix_epoch_seconds = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.key_seq_num.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.rsa_key_der.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.expire_unix_epoch_seconds.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.key_seq_num {
            try!(w.write_int64(1, v));
        };
        if let Some(v) = self.rsa_key_der.as_ref() {
            try!(w.write_bytes(2, &v));
        };
        if let Some(v) = self.expire_unix_epoch_seconds {
            try!(w.write_int64(3, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TokenSigningPublicKeyPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TokenSigningPublicKeyPB {
    fn new() -> TokenSigningPublicKeyPB {
        TokenSigningPublicKeyPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<TokenSigningPublicKeyPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "key_seq_num",
                    TokenSigningPublicKeyPB::has_key_seq_num,
                    TokenSigningPublicKeyPB::get_key_seq_num,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "rsa_key_der",
                    TokenSigningPublicKeyPB::has_rsa_key_der,
                    TokenSigningPublicKeyPB::get_rsa_key_der,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "expire_unix_epoch_seconds",
                    TokenSigningPublicKeyPB::has_expire_unix_epoch_seconds,
                    TokenSigningPublicKeyPB::get_expire_unix_epoch_seconds,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TokenSigningPublicKeyPB>(
                    "TokenSigningPublicKeyPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TokenSigningPublicKeyPB {
    fn clear(&mut self) {
        self.clear_key_seq_num();
        self.clear_rsa_key_der();
        self.clear_expire_unix_epoch_seconds();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TokenSigningPublicKeyPB {
    fn eq(&self, other: &TokenSigningPublicKeyPB) -> bool {
        self.key_seq_num == other.key_seq_num &&
        self.rsa_key_der == other.rsa_key_der &&
        self.expire_unix_epoch_seconds == other.expire_unix_epoch_seconds &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TokenSigningPublicKeyPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x19, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
    0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x17, 0x6b, 0x75, 0x64, 0x75,
    0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x70, 0x62, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
    0x6e, 0x50, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
    0x0e, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x7a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x22,
    0x90, 0x02, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x19, 0x65,
    0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
    0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16,
    0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53,
    0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
    0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
    0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
    0x62, 0x6c, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x61,
    0x75, 0x74, 0x68, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6e,
    0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05, 0x61, 0x75, 0x74, 0x68, 0x6e,
    0x12, 0x33, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x1b, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e,
    0x41, 0x75, 0x74, 0x68, 0x7a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x48, 0x00, 0x52, 0x05,
    0x61, 0x75, 0x74, 0x68, 0x7a, 0x22, 0x22, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
    0x12, 0x17, 0x0a, 0x12, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
    0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0xe7, 0x07, 0x42, 0x07, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
    0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x6b,
    0x65, 0x6e, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61,
    0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
    0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09, 0x73, 0x69,
    0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x69,
    0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03,
    0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
    0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0x9b, 0x01, 0x0a, 0x18, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
    0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
    0x79, 0x50, 0x42, 0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e,
    0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x71,
    0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64,
    0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x52, 0x09,
    0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x70,
    0x69, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73,
    0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x78,
    0x70, 0x69, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x63,
    0x6f, 0x6e, 0x64, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x69,
    0x67, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x50, 0x42,
    0x12, 0x1e, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d,
    0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x73, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x73, 0x61, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x72,
    0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f,
    0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
    0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x45,
    0x70, 0x6f, 0x63, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x6f,
    0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x73,
    0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x4a, 0x80, 0x1e, 0x0a, 0x06, 0x12, 0x04, 0x10, 0x00,
    0x60, 0x02, 0x0a, 0x8c, 0x06, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x10, 0x00, 0x12, 0x1a, 0x81, 0x06,
    0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
    0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x53, 0x46,
    0x29, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x20,
    0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
    0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x73, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f,
    0x54, 0x49, 0x43, 0x45, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x0a, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x79,
    0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
    0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x41, 0x53, 0x46, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x74, 0x6f,
    0x20, 0x79, 0x6f, 0x75, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56,
    0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b, 0x20, 0x79, 0x6f, 0x75,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e,
    0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x20,
    0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61,
    0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70,
    0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72,
    0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
    0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c,
    0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67,
    0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69,
    0x6e, 0x67, 0x2c, 0x0a, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69,
    0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64,
    0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e,
    0x0a, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c,
    0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54,
    0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e,
    0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x0a, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20,
    0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f,
    0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61,
    0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67,
    0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x75, 0x6e,
    0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e,
    0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x11, 0x08, 0x15, 0x0a, 0x08, 0x0a, 0x01, 0x08,
    0x12, 0x03, 0x13, 0x00, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x13,
    0x00, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x13, 0x07, 0x13,
    0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x13, 0x07, 0x13, 0x0a,
    0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x13, 0x07, 0x13, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x13, 0x16, 0x30, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x00, 0x12, 0x03, 0x15, 0x07, 0x20, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04,
    0x17, 0x00, 0x19, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x17, 0x08, 0x14,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x18, 0x02, 0x1f, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x18, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x18, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x18, 0x12, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x18, 0x1d, 0x1e, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x1b, 0x00, 0x1c,
    0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x1b, 0x08, 0x14, 0x0a, 0x0a, 0x0a,
    0x02, 0x04, 0x02, 0x12, 0x04, 0x1e, 0x00, 0x3b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01,
    0x12, 0x03, 0x1e, 0x08, 0x0f, 0x0a, 0x56, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x21,
    0x02, 0x2f, 0x1a, 0x49, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x74,
    0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65,
    0x6e, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x65,
    0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x75, 0x6e, 0x69, 0x78, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x21, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x21, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x21, 0x11, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x21, 0x2d, 0x2e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02, 0x04, 0x00, 0x12, 0x04, 0x23,
    0x02, 0x28, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x04, 0x00, 0x01, 0x12, 0x03, 0x23, 0x07,
    0x0e, 0x0a, 0xb5, 0x01, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x27, 0x04,
    0x1d, 0x1a, 0xa5, 0x01, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x20, 0x64, 0x6f,
    0x65, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x6c, 0x65, 0x74, 0x20, 0x75, 0x73, 0x20, 0x64, 0x65, 0x66,
    0x69, 0x6e, 0x65, 0x20, 0x61, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x6e, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2c, 0x0a, 0x20, 0x73, 0x6f, 0x20, 0x77,
    0x65, 0x27, 0x76, 0x65, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x6c,
    0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x77, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20,
    0x77, 0x65, 0x20, 0x61, 0x64, 0x64, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73,
    0x74, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66,
    0x6c, 0x61, 0x67, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f,
    0x76, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x27, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x27, 0x19, 0x1c, 0x0a, 0x84, 0x04, 0x0a, 0x04, 0x04, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x35, 0x02, 0x2b, 0x1a, 0xf6, 0x03, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x20,
    0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x20, 0x49, 0x66, 0x20,
    0x61, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x69,
    0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65,
    0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x76,
    0x65, 0x72, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
    0x7a, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x0a, 0x20,
    0x73, 0x65, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x20,
    0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6c, 0x69,
    0x73, 0x74, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x72, 0x65,
    0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x0a,
    0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x75, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x66, 0x65, 0x6c, 0x79, 0x20, 0x61, 0x64, 0x64, 0x20, 0x22,
    0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x20, 0x63, 0x6f, 0x6e,
    0x74, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x0a, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x22, 0x64, 0x65, 0x66, 0x61,
    0x75, 0x6c, 0x74, 0x20, 0x64, 0x65, 0x6e, 0x79, 0x22, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
    0x20, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
    0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74,
    0x61, 0x6e, 0x64, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x6d, 0x2e, 0x0a, 0x0a, 0x20, 0x57, 0x65, 0x20,
    0x75, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x68, 0x65, 0x72,
    0x65, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
    0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x27, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x27, 0x20, 0x65, 0x6e, 0x75,
    0x6d, 0x0a, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
    0x73, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x27, 0x73, 0x20, 0x6f, 0x64, 0x64, 0x20, 0x68, 0x61,
    0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
    0x6e, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x20, 0x28,
    0x73, 0x65, 0x65, 0x20, 0x4b, 0x55, 0x44, 0x55, 0x2d, 0x31, 0x38, 0x35, 0x30, 0x29, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x35, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x05, 0x12, 0x03, 0x35, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x35, 0x11, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x35, 0x29, 0x2a, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02, 0x08, 0x00,
    0x12, 0x04, 0x37, 0x02, 0x3a, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x08, 0x00, 0x01, 0x12,
    0x03, 0x37, 0x08, 0x0d, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x38, 0x04,
    0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06, 0x12, 0x03, 0x38, 0x04, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x38, 0x11, 0x16, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x38, 0x19, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x39, 0x04, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03,
    0x06, 0x12, 0x03, 0x39, 0x04, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x39, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x03, 0x12, 0x03, 0x39,
    0x19, 0x1a, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x3d, 0x00, 0x49, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x3d, 0x08, 0x15, 0x0a, 0xa6, 0x02, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x00, 0x12, 0x03, 0x42, 0x02, 0x20, 0x1a, 0x98, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x64, 0x61, 0x74,
    0x61, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72,
    0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x42, 0x20,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x20, 0x48, 0x6f, 0x77, 0x65, 0x76, 0x65,
    0x72, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x0a, 0x20, 0x27, 0x62, 0x79,
    0x74, 0x65, 0x73, 0x27, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63,
    0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e,
    0x27, 0x74, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x69, 0x66, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
    0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
    0x7a, 0x65, 0x0a, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2c, 0x20,
    0x74, 0x68, 0x65, 0x79, 0x27, 0x6c, 0x6c, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72,
    0x79, 0x20, 0x67, 0x65, 0x74, 0x20, 0x62, 0x79, 0x74, 0x65, 0x77, 0x69, 0x73, 0x65, 0x20, 0x69,
    0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
    0x2c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x6c, 0x79, 0x20, 0x69,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x20,
    0x6f, 0x66, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
    0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x42, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x42, 0x0b, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x42, 0x11, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x42, 0x1e, 0x1f, 0x0a, 0x3f, 0x0a, 0x04, 0x04,
    0x03, 0x02, 0x01, 0x12, 0x03, 0x45, 0x02, 0x38, 0x1a, 0x32, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63,
    0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x73, 0x69, 0x67,
    0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
    0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x27, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x03, 0x45, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x01, 0x05, 0x12, 0x03, 0x45, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x45, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12,
    0x03, 0x45, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x08, 0x12, 0x03, 0x45,
    0x1f, 0x37, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x03, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x45, 0x21, 0x35, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x03, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x12, 0x03, 0x45, 0x21, 0x2e, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x03, 0x02, 0x01, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x45, 0x21, 0x2e, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x03, 0x02, 0x01,
    0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x45, 0x22, 0x2d, 0x0a, 0x10, 0x0a, 0x09,
    0x04, 0x03, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x45, 0x31, 0x35, 0x0a, 0x49,
    0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12, 0x03, 0x48, 0x02, 0x29, 0x1a, 0x3c, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
    0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x20, 0x27, 0x73, 0x69, 0x67,
    0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x27, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x02, 0x04, 0x12, 0x03, 0x48, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x05,
    0x12, 0x03, 0x48, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x48, 0x11, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12, 0x03, 0x48, 0x27,
    0x28, 0x0a, 0x30, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x4c, 0x00, 0x54, 0x01, 0x1a, 0x24, 0x20,
    0x41, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x75, 0x73,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
    0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03, 0x4c, 0x08, 0x20, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x4d, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x4d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x00, 0x05, 0x12, 0x03, 0x4d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x4d, 0x11, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x4d, 0x1f, 0x20, 0x0a, 0x37, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x01, 0x12, 0x03, 0x50, 0x02,
    0x3a, 0x1a, 0x2a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
    0x6b, 0x65, 0x79, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2c, 0x20, 0x69, 0x6e,
    0x20, 0x44, 0x45, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x03, 0x50, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x01, 0x05, 0x12, 0x03, 0x50, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x50, 0x11, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03,
    0x12, 0x03, 0x50, 0x1f, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x08, 0x12, 0x03,
    0x50, 0x21, 0x39, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x04, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00, 0x12,
    0x03, 0x50, 0x23, 0x37, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x04, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00,
    0x02, 0x12, 0x03, 0x50, 0x23, 0x30, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x04, 0x02, 0x01, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x50, 0x23, 0x30, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x04, 0x02,
    0x01, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x50, 0x24, 0x2f, 0x0a, 0x10, 0x0a,
    0x09, 0x04, 0x04, 0x02, 0x01, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x50, 0x33, 0x37, 0x0a,
    0x57, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x02, 0x12, 0x03, 0x53, 0x02, 0x2f, 0x1a, 0x4a, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
    0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65,
    0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x73, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x65,
    0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02,
    0x04, 0x12, 0x03, 0x53, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12,
    0x03, 0x53, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x53,
    0x11, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x53, 0x2d, 0x2e,
    0x0a, 0x85, 0x01, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x04, 0x58, 0x00, 0x60, 0x01, 0x1a, 0x79, 0x20,
    0x41, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x63, 0x6f, 0x72,
    0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x75, 0x73,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
    0x73, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x0a, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61,
    0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12,
    0x03, 0x58, 0x08, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x00, 0x12, 0x03, 0x59, 0x02,
    0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x03, 0x59, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x03, 0x59, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x59, 0x11, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x00, 0x03, 0x12, 0x03, 0x59, 0x1f, 0x20, 0x0a, 0x36, 0x0a, 0x04, 0x04, 0x05, 0x02,
    0x01, 0x12, 0x03, 0x5c, 0x02, 0x21, 0x1a, 0x29, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62,
    0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
    0x2c, 0x20, 0x69, 0x6e, 0x20, 0x44, 0x45, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x04, 0x12, 0x03, 0x5c, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x05, 0x12, 0x03, 0x5c, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5c, 0x11, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x01, 0x03, 0x12, 0x03, 0x5c, 0x1f, 0x20, 0x0a, 0x57, 0x0a, 0x04, 0x04, 0x05, 0x02,
    0x02, 0x12, 0x03, 0x5f, 0x02, 0x2f, 0x1a, 0x4a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
    0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f,
    0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x04, 0x12, 0x03, 0x5f, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x05, 0x12, 0x03, 0x5f, 0x0b, 0x10, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x5f, 0x11, 0x2a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x03, 0x5f, 0x2d, 0x2e,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
