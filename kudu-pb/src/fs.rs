// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct InstanceMetadataPB {
    // message fields
    uuid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    format_stamp: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for InstanceMetadataPB {}

impl InstanceMetadataPB {
    pub fn new() -> InstanceMetadataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static InstanceMetadataPB {
        static mut instance: ::protobuf::lazy::Lazy<InstanceMetadataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstanceMetadataPB,
        };
        unsafe {
            instance.get(|| {
                InstanceMetadataPB {
                    uuid: ::protobuf::SingularField::none(),
                    format_stamp: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes uuid = 1;

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    pub fn has_uuid(&self) -> bool {
        self.uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.uuid.is_none() {
            self.uuid.set_default();
        };
        self.uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        self.uuid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_uuid(&self) -> &[u8] {
        match self.uuid.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required string format_stamp = 2;

    pub fn clear_format_stamp(&mut self) {
        self.format_stamp.clear();
    }

    pub fn has_format_stamp(&self) -> bool {
        self.format_stamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_format_stamp(&mut self, v: ::std::string::String) {
        self.format_stamp = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_format_stamp(&mut self) -> &mut ::std::string::String {
        if self.format_stamp.is_none() {
            self.format_stamp.set_default();
        };
        self.format_stamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_format_stamp(&mut self) -> ::std::string::String {
        self.format_stamp.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_format_stamp(&self) -> &str {
        match self.format_stamp.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for InstanceMetadataPB {
    fn is_initialized(&self) -> bool {
        if self.uuid.is_none() {
            return false;
        };
        if self.format_stamp.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.uuid));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.format_stamp));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.uuid.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.format_stamp.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.uuid.as_ref() {
            try!(w.write_bytes(1, &v));
        };
        if let Some(v) = self.format_stamp.as_ref() {
            try!(w.write_string(2, &v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<InstanceMetadataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for InstanceMetadataPB {
    fn new() -> InstanceMetadataPB {
        InstanceMetadataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<InstanceMetadataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "uuid",
                    InstanceMetadataPB::has_uuid,
                    InstanceMetadataPB::get_uuid,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "format_stamp",
                    InstanceMetadataPB::has_format_stamp,
                    InstanceMetadataPB::get_format_stamp,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstanceMetadataPB>(
                    "InstanceMetadataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for InstanceMetadataPB {
    fn clear(&mut self) {
        self.clear_uuid();
        self.clear_format_stamp();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for InstanceMetadataPB {
    fn eq(&self, other: &InstanceMetadataPB) -> bool {
        self.uuid == other.uuid &&
        self.format_stamp == other.format_stamp &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for InstanceMetadataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct PathSetPB {
    // message fields
    uuid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    all_uuids: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PathSetPB {}

impl PathSetPB {
    pub fn new() -> PathSetPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PathSetPB {
        static mut instance: ::protobuf::lazy::Lazy<PathSetPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PathSetPB,
        };
        unsafe {
            instance.get(|| {
                PathSetPB {
                    uuid: ::protobuf::SingularField::none(),
                    all_uuids: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes uuid = 1;

    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    pub fn has_uuid(&self) -> bool {
        self.uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.uuid.is_none() {
            self.uuid.set_default();
        };
        self.uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::vec::Vec<u8> {
        self.uuid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_uuid(&self) -> &[u8] {
        match self.uuid.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated bytes all_uuids = 2;

    pub fn clear_all_uuids(&mut self) {
        self.all_uuids.clear();
    }

    // Param is passed by value, moved
    pub fn set_all_uuids(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.all_uuids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_all_uuids(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.all_uuids
    }

    // Take field
    pub fn take_all_uuids(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.all_uuids, ::protobuf::RepeatedField::new())
    }

    pub fn get_all_uuids(&self) -> &[::std::vec::Vec<u8>] {
        &self.all_uuids
    }
}

impl ::protobuf::Message for PathSetPB {
    fn is_initialized(&self) -> bool {
        if self.uuid.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.uuid));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.all_uuids));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.uuid.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.all_uuids.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.uuid.as_ref() {
            try!(w.write_bytes(1, &v));
        };
        for v in self.all_uuids.iter() {
            try!(w.write_bytes(2, &v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<PathSetPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PathSetPB {
    fn new() -> PathSetPB {
        PathSetPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<PathSetPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "uuid",
                    PathSetPB::has_uuid,
                    PathSetPB::get_uuid,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_bytes_accessor(
                    "all_uuids",
                    PathSetPB::get_all_uuids,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PathSetPB>(
                    "PathSetPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PathSetPB {
    fn clear(&mut self) {
        self.clear_uuid();
        self.clear_all_uuids();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for PathSetPB {
    fn eq(&self, other: &PathSetPB) -> bool {
        self.uuid == other.uuid &&
        self.all_uuids == other.all_uuids &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for PathSetPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct PathInstanceMetadataPB {
    // message fields
    path_set: ::protobuf::SingularPtrField<PathSetPB>,
    block_manager_type: ::protobuf::SingularField<::std::string::String>,
    filesystem_block_size_bytes: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PathInstanceMetadataPB {}

impl PathInstanceMetadataPB {
    pub fn new() -> PathInstanceMetadataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PathInstanceMetadataPB {
        static mut instance: ::protobuf::lazy::Lazy<PathInstanceMetadataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PathInstanceMetadataPB,
        };
        unsafe {
            instance.get(|| {
                PathInstanceMetadataPB {
                    path_set: ::protobuf::SingularPtrField::none(),
                    block_manager_type: ::protobuf::SingularField::none(),
                    filesystem_block_size_bytes: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.PathSetPB path_set = 1;

    pub fn clear_path_set(&mut self) {
        self.path_set.clear();
    }

    pub fn has_path_set(&self) -> bool {
        self.path_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path_set(&mut self, v: PathSetPB) {
        self.path_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path_set(&mut self) -> &mut PathSetPB {
        if self.path_set.is_none() {
            self.path_set.set_default();
        };
        self.path_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_path_set(&mut self) -> PathSetPB {
        self.path_set.take().unwrap_or_else(|| PathSetPB::new())
    }

    pub fn get_path_set(&self) -> &PathSetPB {
        self.path_set.as_ref().unwrap_or_else(|| PathSetPB::default_instance())
    }

    // required string block_manager_type = 2;

    pub fn clear_block_manager_type(&mut self) {
        self.block_manager_type.clear();
    }

    pub fn has_block_manager_type(&self) -> bool {
        self.block_manager_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_manager_type(&mut self, v: ::std::string::String) {
        self.block_manager_type = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_manager_type(&mut self) -> &mut ::std::string::String {
        if self.block_manager_type.is_none() {
            self.block_manager_type.set_default();
        };
        self.block_manager_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_manager_type(&mut self) -> ::std::string::String {
        self.block_manager_type.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_block_manager_type(&self) -> &str {
        match self.block_manager_type.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required uint64 filesystem_block_size_bytes = 3;

    pub fn clear_filesystem_block_size_bytes(&mut self) {
        self.filesystem_block_size_bytes = ::std::option::Option::None;
    }

    pub fn has_filesystem_block_size_bytes(&self) -> bool {
        self.filesystem_block_size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filesystem_block_size_bytes(&mut self, v: u64) {
        self.filesystem_block_size_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_filesystem_block_size_bytes(&self) -> u64 {
        self.filesystem_block_size_bytes.unwrap_or(0)
    }
}

impl ::protobuf::Message for PathInstanceMetadataPB {
    fn is_initialized(&self) -> bool {
        if self.path_set.is_none() {
            return false;
        };
        if self.block_manager_type.is_none() {
            return false;
        };
        if self.filesystem_block_size_bytes.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.path_set));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.block_manager_type));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.filesystem_block_size_bytes = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.path_set.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.block_manager_type.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.filesystem_block_size_bytes.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.path_set.as_ref() {
            try!(w.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.block_manager_type.as_ref() {
            try!(w.write_string(2, &v));
        };
        if let Some(v) = self.filesystem_block_size_bytes {
            try!(w.write_uint64(3, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<PathInstanceMetadataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PathInstanceMetadataPB {
    fn new() -> PathInstanceMetadataPB {
        PathInstanceMetadataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<PathInstanceMetadataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "path_set",
                    PathInstanceMetadataPB::has_path_set,
                    PathInstanceMetadataPB::get_path_set,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "block_manager_type",
                    PathInstanceMetadataPB::has_block_manager_type,
                    PathInstanceMetadataPB::get_block_manager_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "filesystem_block_size_bytes",
                    PathInstanceMetadataPB::has_filesystem_block_size_bytes,
                    PathInstanceMetadataPB::get_filesystem_block_size_bytes,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PathInstanceMetadataPB>(
                    "PathInstanceMetadataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PathInstanceMetadataPB {
    fn clear(&mut self) {
        self.clear_path_set();
        self.clear_block_manager_type();
        self.clear_filesystem_block_size_bytes();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for PathInstanceMetadataPB {
    fn eq(&self, other: &PathInstanceMetadataPB) -> bool {
        self.path_set == other.path_set &&
        self.block_manager_type == other.block_manager_type &&
        self.filesystem_block_size_bytes == other.filesystem_block_size_bytes &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for PathInstanceMetadataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct BlockIdPB {
    // message fields
    id: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for BlockIdPB {}

impl BlockIdPB {
    pub fn new() -> BlockIdPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static BlockIdPB {
        static mut instance: ::protobuf::lazy::Lazy<BlockIdPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockIdPB,
        };
        unsafe {
            instance.get(|| {
                BlockIdPB {
                    id: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required fixed64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u64 {
        self.id.unwrap_or(0)
    }
}

impl ::protobuf::Message for BlockIdPB {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            try!(w.write_fixed64(1, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<BlockIdPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for BlockIdPB {
    fn new() -> BlockIdPB {
        BlockIdPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<BlockIdPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "id",
                    BlockIdPB::has_id,
                    BlockIdPB::get_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockIdPB>(
                    "BlockIdPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for BlockIdPB {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for BlockIdPB {
    fn eq(&self, other: &BlockIdPB) -> bool {
        self.id == other.id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for BlockIdPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct BlockRecordPB {
    // message fields
    block_id: ::protobuf::SingularPtrField<BlockIdPB>,
    op_type: ::std::option::Option<BlockRecordType>,
    timestamp_us: ::std::option::Option<u64>,
    offset: ::std::option::Option<i64>,
    length: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for BlockRecordPB {}

impl BlockRecordPB {
    pub fn new() -> BlockRecordPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static BlockRecordPB {
        static mut instance: ::protobuf::lazy::Lazy<BlockRecordPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockRecordPB,
        };
        unsafe {
            instance.get(|| {
                BlockRecordPB {
                    block_id: ::protobuf::SingularPtrField::none(),
                    op_type: ::std::option::Option::None,
                    timestamp_us: ::std::option::Option::None,
                    offset: ::std::option::Option::None,
                    length: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.BlockIdPB block_id = 1;

    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: BlockIdPB) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut BlockIdPB {
        if self.block_id.is_none() {
            self.block_id.set_default();
        };
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> BlockIdPB {
        self.block_id.take().unwrap_or_else(|| BlockIdPB::new())
    }

    pub fn get_block_id(&self) -> &BlockIdPB {
        self.block_id.as_ref().unwrap_or_else(|| BlockIdPB::default_instance())
    }

    // required .kudu.BlockRecordType op_type = 2;

    pub fn clear_op_type(&mut self) {
        self.op_type = ::std::option::Option::None;
    }

    pub fn has_op_type(&self) -> bool {
        self.op_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_op_type(&mut self, v: BlockRecordType) {
        self.op_type = ::std::option::Option::Some(v);
    }

    pub fn get_op_type(&self) -> BlockRecordType {
        self.op_type.unwrap_or(BlockRecordType::UNKNOWN)
    }

    // required uint64 timestamp_us = 3;

    pub fn clear_timestamp_us(&mut self) {
        self.timestamp_us = ::std::option::Option::None;
    }

    pub fn has_timestamp_us(&self) -> bool {
        self.timestamp_us.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp_us(&mut self, v: u64) {
        self.timestamp_us = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp_us(&self) -> u64 {
        self.timestamp_us.unwrap_or(0)
    }

    // optional int64 offset = 4;

    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = ::std::option::Option::Some(v);
    }

    pub fn get_offset(&self) -> i64 {
        self.offset.unwrap_or(0)
    }

    // optional int64 length = 5;

    pub fn clear_length(&mut self) {
        self.length = ::std::option::Option::None;
    }

    pub fn has_length(&self) -> bool {
        self.length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i64) {
        self.length = ::std::option::Option::Some(v);
    }

    pub fn get_length(&self) -> i64 {
        self.length.unwrap_or(0)
    }
}

impl ::protobuf::Message for BlockRecordPB {
    fn is_initialized(&self) -> bool {
        if self.block_id.is_none() {
            return false;
        };
        if self.op_type.is_none() {
            return false;
        };
        if self.timestamp_us.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.op_type = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.timestamp_us = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.offset = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.length = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.block_id.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.op_type.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.timestamp_us.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.offset.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.length.iter() {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.block_id.as_ref() {
            try!(w.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.op_type {
            try!(w.write_enum(2, v.value()));
        };
        if let Some(v) = self.timestamp_us {
            try!(w.write_uint64(3, v));
        };
        if let Some(v) = self.offset {
            try!(w.write_int64(4, v));
        };
        if let Some(v) = self.length {
            try!(w.write_int64(5, v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<BlockRecordPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for BlockRecordPB {
    fn new() -> BlockRecordPB {
        BlockRecordPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<BlockRecordPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "block_id",
                    BlockRecordPB::has_block_id,
                    BlockRecordPB::get_block_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "op_type",
                    BlockRecordPB::has_op_type,
                    BlockRecordPB::get_op_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "timestamp_us",
                    BlockRecordPB::has_timestamp_us,
                    BlockRecordPB::get_timestamp_us,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "offset",
                    BlockRecordPB::has_offset,
                    BlockRecordPB::get_offset,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "length",
                    BlockRecordPB::has_length,
                    BlockRecordPB::get_length,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockRecordPB>(
                    "BlockRecordPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for BlockRecordPB {
    fn clear(&mut self) {
        self.clear_block_id();
        self.clear_op_type();
        self.clear_timestamp_us();
        self.clear_offset();
        self.clear_length();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for BlockRecordPB {
    fn eq(&self, other: &BlockRecordPB) -> bool {
        self.block_id == other.block_id &&
        self.op_type == other.op_type &&
        self.timestamp_us == other.timestamp_us &&
        self.offset == other.offset &&
        self.length == other.length &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for BlockRecordPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BlockRecordType {
    UNKNOWN = 0,
    CREATE = 1,
    DELETE = 2,
}

impl ::protobuf::ProtobufEnum for BlockRecordType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BlockRecordType> {
        match value {
            0 => ::std::option::Option::Some(BlockRecordType::UNKNOWN),
            1 => ::std::option::Option::Some(BlockRecordType::CREATE),
            2 => ::std::option::Option::Some(BlockRecordType::DELETE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BlockRecordType] = &[
            BlockRecordType::UNKNOWN,
            BlockRecordType::CREATE,
            BlockRecordType::DELETE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<BlockRecordType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("BlockRecordType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for BlockRecordType {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x10, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x66, 0x73, 0x2f, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x12, 0x04, 0x6b, 0x75, 0x64, 0x75, 0x22, 0x38, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74,
    0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x0c,
    0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x14, 0x0a, 0x0c,
    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x02,
    0x28, 0x09, 0x22, 0x2c, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x50, 0x42, 0x12,
    0x0c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x11, 0x0a,
    0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c,
    0x22, 0x7c, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
    0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x61,
    0x74, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x50, 0x42, 0x12, 0x1a, 0x0a,
    0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x74,
    0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x12, 0x23, 0x0a, 0x1b, 0x66, 0x69, 0x6c,
    0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69,
    0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x22, 0x17,
    0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x12, 0x0a, 0x0a, 0x02, 0x69,
    0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x06, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63,
    0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
    0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x50, 0x42, 0x12, 0x26, 0x0a, 0x07,
    0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
    0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
    0x70, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x12, 0x0e, 0x0a, 0x06, 0x6f, 0x66,
    0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x12, 0x0e, 0x0a, 0x06, 0x6c, 0x65,
    0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x2a, 0x36, 0x0a, 0x0f, 0x42, 0x6c,
    0x6f, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
    0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52,
    0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
    0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x64, 0x62,
    0x4a, 0xb8, 0x21, 0x0a, 0x06, 0x12, 0x04, 0x10, 0x00, 0x6e, 0x01, 0x0a, 0x8c, 0x06, 0x0a, 0x01,
    0x02, 0x12, 0x03, 0x10, 0x08, 0x0c, 0x1a, 0x81, 0x06, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65,
    0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x53, 0x46, 0x29, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
    0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f,
    0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x20, 0x53,
    0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x20, 0x66, 0x69,
    0x6c, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e,
    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72,
    0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f,
    0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x41,
    0x53, 0x46, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x75, 0x6e,
    0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20,
    0x32, 0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x22, 0x29, 0x3b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
    0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
    0x61, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79,
    0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74,
    0x0a, 0x0a, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
    0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a,
    0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20,
    0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x0a, 0x20, 0x73, 0x6f,
    0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
    0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
    0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49,
    0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
    0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20,
    0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e,
    0x59, 0x0a, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
    0x65, 0x64, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x70,
    0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20,
    0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
    0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12,
    0x03, 0x12, 0x00, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x12, 0x00,
    0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a,
    0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0e,
    0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0c,
    0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x12, 0x16, 0x22, 0x0a, 0x9d, 0x01, 0x0a,
    0x02, 0x04, 0x00, 0x12, 0x04, 0x1a, 0x00, 0x25, 0x01, 0x1a, 0x90, 0x01, 0x20, 0x57, 0x68, 0x65,
    0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x69,
    0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x66,
    0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x28, 0x65, 0x67, 0x20, 0x61, 0x20,
    0x6e, 0x65, 0x77, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61,
    0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x63, 0x6c, 0x75, 0x73,
    0x74, 0x65, 0x72, 0x29, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
    0x61, 0x6e, 0x64, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x69, 0x74, 0x20, 0x70, 0x65,
    0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03,
    0x04, 0x00, 0x01, 0x12, 0x03, 0x1a, 0x08, 0x1a, 0x0a, 0x82, 0x01, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x1e, 0x02, 0x1a, 0x1a, 0x75, 0x20, 0x54, 0x68, 0x65, 0x20, 0x55, 0x55, 0x49,
    0x44, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67,
    0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73,
    0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x75,
    0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x0a, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
    0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x1e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x1e, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x1e, 0x11, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x1e, 0x18, 0x19, 0x0a, 0x5f, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x22,
    0x02, 0x23, 0x1a, 0x52, 0x20, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x61,
    0x62, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63,
    0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77,
    0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x77, 0x61,
    0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x0a, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
    0x69, 0x7a, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12,
    0x03, 0x22, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x22,
    0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x22, 0x12, 0x1e,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x22, 0x21, 0x22, 0x0a, 0xf7,
    0x02, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x2e, 0x00, 0x36, 0x01, 0x1a, 0xea, 0x02, 0x20, 0x44,
    0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
    0x74, 0x65, 0x6d, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
    0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65,
    0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
    0x79, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x28, 0x73, 0x65,
    0x65, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x29, 0x2c, 0x20, 0x61, 0x20, 0x70, 0x61, 0x74, 0x68,
    0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
    0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x69, 0x61,
    0x0a, 0x20, 0x69, 0x74, 0x73, 0x20, 0x55, 0x55, 0x49, 0x44, 0x27, 0x73, 0x20, 0x70, 0x6f, 0x73,
    0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x6c, 0x6c, 0x5f, 0x75, 0x75, 0x69,
    0x64, 0x73, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x69,
    0x61, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c,
    0x66, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x66,
    0x75, 0x6c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72,
    0x65, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x72, 0x65, 0x66, 0x65,
    0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x75, 0x63, 0x68, 0x20,
    0x73, 0x68, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12,
    0x03, 0x2e, 0x08, 0x11, 0x0a, 0x41, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x30, 0x02,
    0x1a, 0x1a, 0x34, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69,
    0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x73,
    0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04,
    0x12, 0x03, 0x30, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03,
    0x30, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x30, 0x11,
    0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x30, 0x18, 0x19, 0x0a,
    0xd7, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x35, 0x02, 0x1f, 0x1a, 0xc9, 0x01,
    0x20, 0x41, 0x6c, 0x6c, 0x20, 0x55, 0x55, 0x49, 0x44, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
    0x20, 0x73, 0x65, 0x74, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74,
    0x68, 0x79, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x0a, 0x20,
    0x31, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x20,
    0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x2d, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x50, 0x61, 0x74, 0x68, 0x49,
    0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50,
    0x42, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65,
    0x64, 0x20, 0x55, 0x55, 0x49, 0x44, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x32, 0x2e, 0x20,
    0x45, 0x76, 0x65, 0x72, 0x79, 0x20, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x74, 0x50, 0x42, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x65, 0x6e,
    0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6c,
    0x6c, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x35, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x05,
    0x12, 0x03, 0x35, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x35, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x35, 0x1d,
    0x1e, 0x0a, 0x9c, 0x01, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x3a, 0x00, 0x46, 0x01, 0x1a, 0x8f,
    0x01, 0x20, 0x41, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69,
    0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74,
    0x61, 0x69, 0x6e, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x74,
    0x68, 0x73, 0x2e, 0x20, 0x4f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,
    0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x0a, 0x20, 0x69, 0x73, 0x20,
    0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x61, 0x63,
    0x68, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
    0x6e, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x0a,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x3a, 0x08, 0x1e, 0x0a, 0x86, 0x01, 0x0a,
    0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x3d, 0x02, 0x22, 0x1a, 0x79, 0x20, 0x44, 0x65, 0x73,
    0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x74, 0x68,
    0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c,
    0x6c, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61,
    0x6e, 0x63, 0x65, 0x73, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2c, 0x20, 0x74, 0x61, 0x6b, 0x65,
    0x6e, 0x20, 0x74, 0x6f, 0x67, 0x65, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x62, 0x65, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20,
    0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x3d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12, 0x03, 0x3d, 0x0b,
    0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x3d, 0x15, 0x1d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x3d, 0x20, 0x21, 0x0a, 0x54, 0x0a,
    0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x40, 0x02, 0x29, 0x1a, 0x47, 0x20, 0x54, 0x65, 0x78,
    0x74, 0x75, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
    0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x6f,
    0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x74,
    0x68, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x40, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x05, 0x12, 0x03, 0x40, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x40, 0x12, 0x24, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x40, 0x27, 0x28, 0x0a, 0xc5, 0x01, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x45, 0x02, 0x32, 0x1a, 0xb7, 0x01, 0x20, 0x42, 0x6c, 0x6f,
    0x63, 0x6b, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
    0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x77, 0x61,
    0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x28, 0x61, 0x6e, 0x64,
    0x20, 0x69, 0x74, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65,
    0x76, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e,
    0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x0a, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d,
    0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x45, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x05, 0x12, 0x03, 0x45, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x45, 0x12, 0x2d, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x45, 0x30, 0x31, 0x0a, 0x0a, 0x0a, 0x02, 0x04,
    0x03, 0x12, 0x04, 0x48, 0x00, 0x4a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03,
    0x48, 0x08, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x49, 0x02, 0x1a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x49, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x49, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x49, 0x13, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x49, 0x18, 0x19, 0x0a, 0x21, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04,
    0x4d, 0x00, 0x51, 0x01, 0x1a, 0x15, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20,
    0x6f, 0x66, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05,
    0x00, 0x01, 0x12, 0x03, 0x4d, 0x05, 0x14, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x4e, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4e,
    0x02, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x4e, 0x0c, 0x0d,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x4f, 0x02, 0x0d, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4f, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x4f, 0x0b, 0x0c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02,
    0x02, 0x12, 0x03, 0x50, 0x02, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x50, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x50,
    0x0b, 0x0c, 0x0a, 0xfc, 0x02, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0x5a, 0x00, 0x6e, 0x01, 0x1a,
    0xef, 0x02, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x6f,
    0x75, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
    0x65, 0x72, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x2d, 0x62, 0x61, 0x63, 0x6b,
    0x65, 0x64, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x0a, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
    0x65, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x74, 0x72, 0x61,
    0x63, 0x6b, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
    0x65, 0x20, 0x28, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6f, 0x72, 0x20,
    0x6e, 0x6f, 0x6e, 0x2d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x28, 0x64,
    0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x0a, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70,
    0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
    0x20, 0x54, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
    0x6e, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x20,
    0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x0a,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
    0x20, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x76, 0x65, 0x72,
    0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x73, 0x20, 0x28, 0x65,
    0x2e, 0x67, 0x2e, 0x20, 0x22, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x20, 0x66, 0x6f, 0x6f, 0x22,
    0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x0a, 0x20, 0x62, 0x79, 0x20, 0x22, 0x44,
    0x45, 0x4c, 0x45, 0x54, 0x45, 0x20, 0x66, 0x6f, 0x6f, 0x22, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x66, 0x6f, 0x6f, 0x20,
    0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x29, 0x2e,
    0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12, 0x03, 0x5a, 0x08, 0x15, 0x0a, 0x32, 0x0a,
    0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x03, 0x5c, 0x02, 0x22, 0x1a, 0x25, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
    0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x5c, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12, 0x03, 0x5c, 0x0b, 0x14, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5c, 0x15, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x5c, 0x20, 0x21, 0x0a, 0x34, 0x0a, 0x04, 0x04, 0x04, 0x02,
    0x01, 0x12, 0x03, 0x5f, 0x02, 0x27, 0x1a, 0x27, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54,
    0x45, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x03, 0x5f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x01, 0x06, 0x12, 0x03, 0x5f, 0x0b, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x01, 0x01, 0x12, 0x03, 0x5f, 0x1b, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x01, 0x03, 0x12, 0x03, 0x5f, 0x25, 0x26, 0x0a, 0x74, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x02, 0x12,
    0x03, 0x63, 0x02, 0x23, 0x1a, 0x67, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
    0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x6c,
    0x6f, 0x63, 0x6b, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x63,
    0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
    0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x6d,
    0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x73, 0x69, 0x6e, 0x63,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x03, 0x63, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x02, 0x05, 0x12, 0x03, 0x63, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x63, 0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x63, 0x21, 0x22, 0x0a, 0x59, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x03, 0x12, 0x03, 0x68,
    0x02, 0x1c, 0x1a, 0x4c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x20, 0x64, 0x61,
    0x74, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x69,
    0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x04, 0x12, 0x03, 0x68, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x05, 0x12, 0x03, 0x68, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x03, 0x01, 0x12, 0x03, 0x68, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x03, 0x03, 0x12, 0x03, 0x68, 0x1a, 0x1b, 0x0a, 0x59, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x04,
    0x12, 0x03, 0x6d, 0x02, 0x1c, 0x1a, 0x4c, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x6e, 0x67,
    0x74, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x52, 0x65,
    0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x43, 0x52, 0x45, 0x41, 0x54,
    0x45, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x04, 0x12, 0x03, 0x6d, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x05, 0x12, 0x03, 0x6d, 0x0b, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x04, 0x01, 0x12, 0x03, 0x6d, 0x11, 0x17, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x04, 0x03, 0x12, 0x03, 0x6d, 0x1a, 0x1b,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
