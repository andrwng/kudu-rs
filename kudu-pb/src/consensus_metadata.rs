// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct RaftPeerPB {
    // message fields
    permanent_uuid: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    member_type: ::std::option::Option<RaftPeerPB_MemberType>,
    last_known_addr: ::protobuf::SingularPtrField<super::common::HostPortPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RaftPeerPB {}

impl RaftPeerPB {
    pub fn new() -> RaftPeerPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RaftPeerPB {
        static mut instance: ::protobuf::lazy::Lazy<RaftPeerPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftPeerPB,
        };
        unsafe {
            instance.get(|| {
                RaftPeerPB {
                    permanent_uuid: ::protobuf::SingularField::none(),
                    member_type: ::std::option::Option::None,
                    last_known_addr: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes permanent_uuid = 1;

    pub fn clear_permanent_uuid(&mut self) {
        self.permanent_uuid.clear();
    }

    pub fn has_permanent_uuid(&self) -> bool {
        self.permanent_uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_permanent_uuid(&mut self, v: ::std::vec::Vec<u8>) {
        self.permanent_uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_permanent_uuid(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.permanent_uuid.is_none() {
            self.permanent_uuid.set_default();
        };
        self.permanent_uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_permanent_uuid(&mut self) -> ::std::vec::Vec<u8> {
        self.permanent_uuid.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_permanent_uuid(&self) -> &[u8] {
        match self.permanent_uuid.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .kudu.consensus.RaftPeerPB.MemberType member_type = 2;

    pub fn clear_member_type(&mut self) {
        self.member_type = ::std::option::Option::None;
    }

    pub fn has_member_type(&self) -> bool {
        self.member_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_member_type(&mut self, v: RaftPeerPB_MemberType) {
        self.member_type = ::std::option::Option::Some(v);
    }

    pub fn get_member_type(&self) -> RaftPeerPB_MemberType {
        self.member_type.unwrap_or(RaftPeerPB_MemberType::UNKNOWN_MEMBER_TYPE)
    }

    // optional .kudu.HostPortPB last_known_addr = 3;

    pub fn clear_last_known_addr(&mut self) {
        self.last_known_addr.clear();
    }

    pub fn has_last_known_addr(&self) -> bool {
        self.last_known_addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_known_addr(&mut self, v: super::common::HostPortPB) {
        self.last_known_addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_known_addr(&mut self) -> &mut super::common::HostPortPB {
        if self.last_known_addr.is_none() {
            self.last_known_addr.set_default();
        };
        self.last_known_addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_known_addr(&mut self) -> super::common::HostPortPB {
        self.last_known_addr.take().unwrap_or_else(|| super::common::HostPortPB::new())
    }

    pub fn get_last_known_addr(&self) -> &super::common::HostPortPB {
        self.last_known_addr.as_ref().unwrap_or_else(|| super::common::HostPortPB::default_instance())
    }
}

impl ::protobuf::Message for RaftPeerPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.permanent_uuid));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.member_type = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_known_addr));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.permanent_uuid.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.member_type.iter() {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in self.last_known_addr.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.permanent_uuid.as_ref() {
            try!(w.write_bytes(1, &v));
        };
        if let Some(v) = self.member_type {
            try!(w.write_enum(2, v.value()));
        };
        if let Some(v) = self.last_known_addr.as_ref() {
            try!(w.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RaftPeerPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RaftPeerPB {
    fn new() -> RaftPeerPB {
        RaftPeerPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RaftPeerPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "permanent_uuid",
                    RaftPeerPB::has_permanent_uuid,
                    RaftPeerPB::get_permanent_uuid,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "member_type",
                    RaftPeerPB::has_member_type,
                    RaftPeerPB::get_member_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "last_known_addr",
                    RaftPeerPB::has_last_known_addr,
                    RaftPeerPB::get_last_known_addr,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftPeerPB>(
                    "RaftPeerPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RaftPeerPB {
    fn clear(&mut self) {
        self.clear_permanent_uuid();
        self.clear_member_type();
        self.clear_last_known_addr();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RaftPeerPB {
    fn eq(&self, other: &RaftPeerPB) -> bool {
        self.permanent_uuid == other.permanent_uuid &&
        self.member_type == other.member_type &&
        self.last_known_addr == other.last_known_addr &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RaftPeerPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RaftPeerPB_Role {
    UNKNOWN_ROLE = 999,
    FOLLOWER = 0,
    LEADER = 1,
    LEARNER = 2,
    NON_PARTICIPANT = 3,
}

impl ::protobuf::ProtobufEnum for RaftPeerPB_Role {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RaftPeerPB_Role> {
        match value {
            999 => ::std::option::Option::Some(RaftPeerPB_Role::UNKNOWN_ROLE),
            0 => ::std::option::Option::Some(RaftPeerPB_Role::FOLLOWER),
            1 => ::std::option::Option::Some(RaftPeerPB_Role::LEADER),
            2 => ::std::option::Option::Some(RaftPeerPB_Role::LEARNER),
            3 => ::std::option::Option::Some(RaftPeerPB_Role::NON_PARTICIPANT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RaftPeerPB_Role] = &[
            RaftPeerPB_Role::UNKNOWN_ROLE,
            RaftPeerPB_Role::FOLLOWER,
            RaftPeerPB_Role::LEADER,
            RaftPeerPB_Role::LEARNER,
            RaftPeerPB_Role::NON_PARTICIPANT,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<RaftPeerPB_Role>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RaftPeerPB_Role", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RaftPeerPB_Role {
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RaftPeerPB_MemberType {
    UNKNOWN_MEMBER_TYPE = 999,
    NON_VOTER = 0,
    VOTER = 1,
}

impl ::protobuf::ProtobufEnum for RaftPeerPB_MemberType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RaftPeerPB_MemberType> {
        match value {
            999 => ::std::option::Option::Some(RaftPeerPB_MemberType::UNKNOWN_MEMBER_TYPE),
            0 => ::std::option::Option::Some(RaftPeerPB_MemberType::NON_VOTER),
            1 => ::std::option::Option::Some(RaftPeerPB_MemberType::VOTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RaftPeerPB_MemberType] = &[
            RaftPeerPB_MemberType::UNKNOWN_MEMBER_TYPE,
            RaftPeerPB_MemberType::NON_VOTER,
            RaftPeerPB_MemberType::VOTER,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<RaftPeerPB_MemberType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RaftPeerPB_MemberType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RaftPeerPB_MemberType {
}

#[derive(Clone,Default)]
pub struct RaftConfigPB {
    // message fields
    opid_index: ::std::option::Option<i64>,
    local: ::std::option::Option<bool>,
    peers: ::protobuf::RepeatedField<RaftPeerPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RaftConfigPB {}

impl RaftConfigPB {
    pub fn new() -> RaftConfigPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RaftConfigPB {
        static mut instance: ::protobuf::lazy::Lazy<RaftConfigPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RaftConfigPB,
        };
        unsafe {
            instance.get(|| {
                RaftConfigPB {
                    opid_index: ::std::option::Option::None,
                    local: ::std::option::Option::None,
                    peers: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int64 opid_index = 1;

    pub fn clear_opid_index(&mut self) {
        self.opid_index = ::std::option::Option::None;
    }

    pub fn has_opid_index(&self) -> bool {
        self.opid_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_opid_index(&mut self, v: i64) {
        self.opid_index = ::std::option::Option::Some(v);
    }

    pub fn get_opid_index(&self) -> i64 {
        self.opid_index.unwrap_or(0)
    }

    // optional bool local = 2;

    pub fn clear_local(&mut self) {
        self.local = ::std::option::Option::None;
    }

    pub fn has_local(&self) -> bool {
        self.local.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local(&mut self, v: bool) {
        self.local = ::std::option::Option::Some(v);
    }

    pub fn get_local(&self) -> bool {
        self.local.unwrap_or(true)
    }

    // repeated .kudu.consensus.RaftPeerPB peers = 3;

    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::protobuf::RepeatedField<RaftPeerPB>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers(&mut self) -> &mut ::protobuf::RepeatedField<RaftPeerPB> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::protobuf::RepeatedField<RaftPeerPB> {
        ::std::mem::replace(&mut self.peers, ::protobuf::RepeatedField::new())
    }

    pub fn get_peers(&self) -> &[RaftPeerPB] {
        &self.peers
    }
}

impl ::protobuf::Message for RaftConfigPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.opid_index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.local = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.opid_index.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.local.is_some() {
            my_size += 2;
        };
        for value in self.peers.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.opid_index {
            try!(w.write_int64(1, v));
        };
        if let Some(v) = self.local {
            try!(w.write_bool(2, v));
        };
        for v in self.peers.iter() {
            try!(w.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<RaftConfigPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RaftConfigPB {
    fn new() -> RaftConfigPB {
        RaftConfigPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RaftConfigPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "opid_index",
                    RaftConfigPB::has_opid_index,
                    RaftConfigPB::get_opid_index,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "local",
                    RaftConfigPB::has_local,
                    RaftConfigPB::get_local,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "peers",
                    RaftConfigPB::get_peers,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RaftConfigPB>(
                    "RaftConfigPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RaftConfigPB {
    fn clear(&mut self) {
        self.clear_opid_index();
        self.clear_local();
        self.clear_peers();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for RaftConfigPB {
    fn eq(&self, other: &RaftConfigPB) -> bool {
        self.opid_index == other.opid_index &&
        self.local == other.local &&
        self.peers == other.peers &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for RaftConfigPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ConsensusStatePB {
    // message fields
    current_term: ::std::option::Option<i64>,
    leader_uuid: ::protobuf::SingularField<::std::string::String>,
    config: ::protobuf::SingularPtrField<RaftConfigPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ConsensusStatePB {}

impl ConsensusStatePB {
    pub fn new() -> ConsensusStatePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ConsensusStatePB {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusStatePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusStatePB,
        };
        unsafe {
            instance.get(|| {
                ConsensusStatePB {
                    current_term: ::std::option::Option::None,
                    leader_uuid: ::protobuf::SingularField::none(),
                    config: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required int64 current_term = 1;

    pub fn clear_current_term(&mut self) {
        self.current_term = ::std::option::Option::None;
    }

    pub fn has_current_term(&self) -> bool {
        self.current_term.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_term(&mut self, v: i64) {
        self.current_term = ::std::option::Option::Some(v);
    }

    pub fn get_current_term(&self) -> i64 {
        self.current_term.unwrap_or(0)
    }

    // optional string leader_uuid = 2;

    pub fn clear_leader_uuid(&mut self) {
        self.leader_uuid.clear();
    }

    pub fn has_leader_uuid(&self) -> bool {
        self.leader_uuid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_leader_uuid(&mut self, v: ::std::string::String) {
        self.leader_uuid = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader_uuid(&mut self) -> &mut ::std::string::String {
        if self.leader_uuid.is_none() {
            self.leader_uuid.set_default();
        };
        self.leader_uuid.as_mut().unwrap()
    }

    // Take field
    pub fn take_leader_uuid(&mut self) -> ::std::string::String {
        self.leader_uuid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_leader_uuid(&self) -> &str {
        match self.leader_uuid.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // required .kudu.consensus.RaftConfigPB config = 3;

    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: RaftConfigPB) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut RaftConfigPB {
        if self.config.is_none() {
            self.config.set_default();
        };
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> RaftConfigPB {
        self.config.take().unwrap_or_else(|| RaftConfigPB::new())
    }

    pub fn get_config(&self) -> &RaftConfigPB {
        self.config.as_ref().unwrap_or_else(|| RaftConfigPB::default_instance())
    }
}

impl ::protobuf::Message for ConsensusStatePB {
    fn is_initialized(&self) -> bool {
        if self.current_term.is_none() {
            return false;
        };
        if self.config.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.current_term = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.leader_uuid));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.current_term.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.leader_uuid.iter() {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in self.config.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.current_term {
            try!(w.write_int64(1, v));
        };
        if let Some(v) = self.leader_uuid.as_ref() {
            try!(w.write_string(2, &v));
        };
        if let Some(v) = self.config.as_ref() {
            try!(w.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ConsensusStatePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ConsensusStatePB {
    fn new() -> ConsensusStatePB {
        ConsensusStatePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ConsensusStatePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "current_term",
                    ConsensusStatePB::has_current_term,
                    ConsensusStatePB::get_current_term,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "leader_uuid",
                    ConsensusStatePB::has_leader_uuid,
                    ConsensusStatePB::get_leader_uuid,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "config",
                    ConsensusStatePB::has_config,
                    ConsensusStatePB::get_config,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusStatePB>(
                    "ConsensusStatePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ConsensusStatePB {
    fn clear(&mut self) {
        self.clear_current_term();
        self.clear_leader_uuid();
        self.clear_config();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ConsensusStatePB {
    fn eq(&self, other: &ConsensusStatePB) -> bool {
        self.current_term == other.current_term &&
        self.leader_uuid == other.leader_uuid &&
        self.config == other.config &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ConsensusStatePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ConsensusMetadataPB {
    // message fields
    committed_config: ::protobuf::SingularPtrField<RaftConfigPB>,
    current_term: ::std::option::Option<i64>,
    voted_for: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ConsensusMetadataPB {}

impl ConsensusMetadataPB {
    pub fn new() -> ConsensusMetadataPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ConsensusMetadataPB {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusMetadataPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusMetadataPB,
        };
        unsafe {
            instance.get(|| {
                ConsensusMetadataPB {
                    committed_config: ::protobuf::SingularPtrField::none(),
                    current_term: ::std::option::Option::None,
                    voted_for: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.consensus.RaftConfigPB committed_config = 1;

    pub fn clear_committed_config(&mut self) {
        self.committed_config.clear();
    }

    pub fn has_committed_config(&self) -> bool {
        self.committed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_committed_config(&mut self, v: RaftConfigPB) {
        self.committed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_committed_config(&mut self) -> &mut RaftConfigPB {
        if self.committed_config.is_none() {
            self.committed_config.set_default();
        };
        self.committed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_committed_config(&mut self) -> RaftConfigPB {
        self.committed_config.take().unwrap_or_else(|| RaftConfigPB::new())
    }

    pub fn get_committed_config(&self) -> &RaftConfigPB {
        self.committed_config.as_ref().unwrap_or_else(|| RaftConfigPB::default_instance())
    }

    // required int64 current_term = 2;

    pub fn clear_current_term(&mut self) {
        self.current_term = ::std::option::Option::None;
    }

    pub fn has_current_term(&self) -> bool {
        self.current_term.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_term(&mut self, v: i64) {
        self.current_term = ::std::option::Option::Some(v);
    }

    pub fn get_current_term(&self) -> i64 {
        self.current_term.unwrap_or(0)
    }

    // optional string voted_for = 3;

    pub fn clear_voted_for(&mut self) {
        self.voted_for.clear();
    }

    pub fn has_voted_for(&self) -> bool {
        self.voted_for.is_some()
    }

    // Param is passed by value, moved
    pub fn set_voted_for(&mut self, v: ::std::string::String) {
        self.voted_for = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voted_for(&mut self) -> &mut ::std::string::String {
        if self.voted_for.is_none() {
            self.voted_for.set_default();
        };
        self.voted_for.as_mut().unwrap()
    }

    // Take field
    pub fn take_voted_for(&mut self) -> ::std::string::String {
        self.voted_for.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_voted_for(&self) -> &str {
        match self.voted_for.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for ConsensusMetadataPB {
    fn is_initialized(&self) -> bool {
        if self.committed_config.is_none() {
            return false;
        };
        if self.current_term.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.committed_config));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int64());
                    self.current_term = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.voted_for));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.committed_config.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.current_term.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.voted_for.iter() {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut w: &mut ::std::io::Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.committed_config.as_ref() {
            try!(w.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(w.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(w));
        };
        if let Some(v) = self.current_term {
            try!(w.write_int64(2, v));
        };
        if let Some(v) = self.voted_for.as_ref() {
            try!(w.write_string(3, &v));
        };
        try!(w.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ConsensusMetadataPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ConsensusMetadataPB {
    fn new() -> ConsensusMetadataPB {
        ConsensusMetadataPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ConsensusMetadataPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "committed_config",
                    ConsensusMetadataPB::has_committed_config,
                    ConsensusMetadataPB::get_committed_config,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor(
                    "current_term",
                    ConsensusMetadataPB::has_current_term,
                    ConsensusMetadataPB::get_current_term,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "voted_for",
                    ConsensusMetadataPB::has_voted_for,
                    ConsensusMetadataPB::get_voted_for,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusMetadataPB>(
                    "ConsensusMetadataPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ConsensusMetadataPB {
    fn clear(&mut self) {
        self.clear_committed_config();
        self.clear_current_term();
        self.clear_voted_for();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ConsensusMetadataPB {
    fn eq(&self, other: &ConsensusMetadataPB) -> bool {
        self.committed_config == other.committed_config &&
        self.current_term == other.current_term &&
        self.voted_for == other.voted_for &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ConsensusMetadataPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConsensusConfigType {
    CONSENSUS_CONFIG_UNKNOWN = 999,
    CONSENSUS_CONFIG_COMMITTED = 1,
    CONSENSUS_CONFIG_ACTIVE = 2,
}

impl ::protobuf::ProtobufEnum for ConsensusConfigType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConsensusConfigType> {
        match value {
            999 => ::std::option::Option::Some(ConsensusConfigType::CONSENSUS_CONFIG_UNKNOWN),
            1 => ::std::option::Option::Some(ConsensusConfigType::CONSENSUS_CONFIG_COMMITTED),
            2 => ::std::option::Option::Some(ConsensusConfigType::CONSENSUS_CONFIG_ACTIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConsensusConfigType] = &[
            ConsensusConfigType::CONSENSUS_CONFIG_UNKNOWN,
            ConsensusConfigType::CONSENSUS_CONFIG_COMMITTED,
            ConsensusConfigType::CONSENSUS_CONFIG_ACTIVE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ConsensusConfigType>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ConsensusConfigType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ConsensusConfigType {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x1d, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
    0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x0e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x1a,
    0x18, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d,
    0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x52, 0x61,
    0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x6d,
    0x61, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
    0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6e,
    0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50,
    0x42, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0f,
    0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
    0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x48, 0x6f, 0x73,
    0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x22, 0x55, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
    0x11, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
    0xe7, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x00,
    0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
    0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x4e,
    0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x40,
    0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x13,
    0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x54,
    0x59, 0x50, 0x45, 0x10, 0xe7, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x4e, 0x5f, 0x56, 0x4f,
    0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x01,
    0x22, 0x62, 0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42,
    0x12, 0x12, 0x0a, 0x0a, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x03, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x65, 0x65,
    0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e,
    0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65,
    0x65, 0x72, 0x50, 0x42, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
    0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x14, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
    0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x12, 0x13,
    0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x09, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
    0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
    0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50,
    0x42, 0x22, 0x76, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x65,
    0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x12, 0x36, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
    0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x02,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
    0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x42,
    0x12, 0x14, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d,
    0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x12, 0x11, 0x0a, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x5f,
    0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x2a, 0x71, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
    0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
    0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f,
    0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12,
    0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
    0x46, 0x49, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
    0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
    0x46, 0x49, 0x47, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x16, 0x0a, 0x14,
    0x6f, 0x72, 0x67, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65,
    0x6e, 0x73, 0x75, 0x73, 0x4a, 0xae, 0x39, 0x0a, 0x07, 0x12, 0x05, 0x10, 0x00, 0xa4, 0x01, 0x01,
    0x0a, 0x8c, 0x06, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x16, 0x1a, 0x81, 0x06, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x46,
    0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x53, 0x46, 0x29, 0x20,
    0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f,
    0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x6c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74,
    0x73, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x54, 0x49,
    0x43, 0x45, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77,
    0x6f, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20,
    0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
    0x67, 0x68, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x20, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x41, 0x53, 0x46, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x79,
    0x6f, 0x75, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61,
    0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x22,
    0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63,
    0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x20, 0x59, 0x6f,
    0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63,
    0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e,
    0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
    0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
    0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
    0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
    0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
    0x2c, 0x0a, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74,
    0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73,
    0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x0a, 0x20,
    0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x20, 0x57,
    0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45,
    0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20,
    0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x0a, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69,
    0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20,
    0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67,
    0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70,
    0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c,
    0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x75, 0x6e, 0x64, 0x65,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a,
    0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x12, 0x00, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07,
    0x00, 0x12, 0x03, 0x12, 0x00, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12,
    0x03, 0x12, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x12, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x12, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x12, 0x16,
    0x2c, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x14, 0x07, 0x21, 0x0a, 0x28, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x1b, 0x00, 0x40, 0x01, 0x1a, 0x1c, 0x20, 0x41, 0x20, 0x70, 0x65, 0x65,
    0x72, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1b,
    0x08, 0x12, 0x0a, 0x2d, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x1d, 0x02, 0x32, 0x03,
    0x1a, 0x1f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20,
    0x72, 0x6f, 0x6c, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1d, 0x07, 0x0b, 0x0a,
    0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1e, 0x04, 0x17, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1e, 0x04, 0x10, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x1e, 0x13, 0x16, 0x0a, 0x99,
    0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x22, 0x04, 0x11, 0x1a, 0x89,
    0x01, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
    0x77, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
    0x74, 0x65, 0x73, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x69,
    0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x43,
    0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3a, 0x3a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x28, 0x29, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x22, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x22, 0x0f, 0x10, 0x0a, 0xa1, 0x01, 0x0a, 0x06, 0x04,
    0x00, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x26, 0x04, 0x0f, 0x1a, 0x91, 0x01, 0x20, 0x49, 0x6e,
    0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64,
    0x65, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
    0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x2e,
    0x65, 0x2e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x6d, 0x61, 0x6a, 0x6f,
    0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70,
    0x74, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3a, 0x3a, 0x41, 0x70,
    0x70, 0x65, 0x6e, 0x64, 0x28, 0x29, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x26, 0x04, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x26, 0x0d, 0x0e, 0x0a, 0xc5,
    0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x2b, 0x04, 0x10, 0x1a, 0xb5,
    0x01, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
    0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x61, 0x20, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x2c, 0x0a,
    0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x61, 0x63,
    0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3a,
    0x3a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x28, 0x29, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20,
    0x62, 0x75, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x61, 0x72,
    0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x6c, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69,
    0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x2b, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03,
    0x02, 0x12, 0x03, 0x2b, 0x0e, 0x0f, 0x0a, 0x8d, 0x02, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x04, 0x12, 0x03, 0x31, 0x04, 0x18, 0x1a, 0xfd, 0x01, 0x20, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x69, 0x2e,
    0x65, 0x2e, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x0a, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x63, 0x63,
    0x65, 0x70, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x3a, 0x3a, 0x55,
    0x70, 0x64, 0x61, 0x74, 0x65, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65,
    0x6e, 0x73, 0x75, 0x73, 0x3a, 0x3a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x28, 0x29, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69,
    0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65,
    0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x75, 0x61, 0x6c,
    0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x76,
    0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04,
    0x01, 0x12, 0x03, 0x31, 0x04, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04,
    0x02, 0x12, 0x03, 0x31, 0x16, 0x17, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x01, 0x12, 0x04,
    0x34, 0x02, 0x38, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x01, 0x01, 0x12, 0x03, 0x34,
    0x07, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x35, 0x04,
    0x1e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x35, 0x04,
    0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x35, 0x1a,
    0x1d, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x36, 0x04, 0x12,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x36, 0x04, 0x0d,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x01, 0x02, 0x12, 0x03, 0x36, 0x10, 0x11,
    0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x37, 0x04, 0x0e, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x37, 0x04, 0x09, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x37, 0x0c, 0x0d, 0x0a,
    0x8b, 0x02, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x3d, 0x02, 0x24, 0x1a, 0xfd, 0x01,
    0x20, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20,
    0x69, 0x73, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x3a, 0x20, 0x52, 0x61, 0x66,
    0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x2f, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66,
    0x69, 0x67, 0x50, 0x42, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x20, 0x6d,
    0x61, 0x79, 0x0a, 0x20, 0x62, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x62,
    0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6e,
    0x65, 0x6e, 0x74, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x6b, 0x6e, 0x6f, 0x77,
    0x6e, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x2c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x0a, 0x20, 0x6d,
    0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x79, 0x69,
    0x6e, 0x67, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x43, 0x61,
    0x74, 0x61, 0x6c, 0x6f, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x29, 0x3b, 0x0a, 0x20,
    0x70, 0x65, 0x72, 0x6d, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x63,
    0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20,
    0x61, 0x74, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
    0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x52, 0x50, 0x43, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x3d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x3d, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x3d, 0x11, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x3d, 0x22, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x3e,
    0x02, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x3e, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x3e, 0x0b, 0x15, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x3e, 0x16, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x3e, 0x24, 0x25, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x02, 0x12, 0x03, 0x3f, 0x02, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x3f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03,
    0x3f, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x3f, 0x16,
    0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x3f, 0x28, 0x29, 0x0a,
    0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x42, 0x00, 0x4e, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05,
    0x00, 0x01, 0x12, 0x03, 0x42, 0x05, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x43, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x43,
    0x02, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x43, 0x1d, 0x20,
    0x0a, 0xbb, 0x01, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x48, 0x02, 0x21, 0x1a, 0xad,
    0x01, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73,
    0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x20, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x0a, 0x20, 0x68, 0x61,
    0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
    0x64, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
    0x73, 0x75, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
    0x64, 0x2c, 0x20, 0x74, 0x68, 0x75, 0x73, 0x20, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61,
    0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x0a, 0x20, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64,
    0x65, 0x78, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x48, 0x02, 0x1c, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x48, 0x1f, 0x20, 0x0a, 0xba, 0x01, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x4d, 0x02, 0x1e, 0x1a, 0xac, 0x01, 0x20, 0x41, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20,
    0x62, 0x65, 0x20, 0x61, 0x20, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6e,
    0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x0a, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x79, 0x65, 0x74, 0x20,
    0x62, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2e, 0x20,
    0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x20, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2c, 0x20,
    0x69, 0x74, 0x73, 0x20, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x20,
    0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62,
    0x65, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x01,
    0x12, 0x03, 0x4d, 0x02, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03,
    0x4d, 0x1c, 0x1d, 0x0a, 0x36, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x51, 0x00, 0x5e, 0x01, 0x1a,
    0x2a, 0x20, 0x41, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73,
    0x2c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67,
    0x6c, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x01, 0x01, 0x12, 0x03, 0x51, 0x08, 0x14, 0x0a, 0xa1, 0x02, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00,
    0x12, 0x03, 0x56, 0x02, 0x20, 0x1a, 0x93, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64,
    0x65, 0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
    0x69, 0x7a, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x50, 0x42, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x0a, 0x20,
    0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73,
    0x20, 0x73, 0x65, 0x74, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70,
    0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65,
    0x6e, 0x73, 0x75, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x28,
    0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x61,
    0x20, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x76, 0x6f, 0x74,
    0x65, 0x72, 0x73, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x6d, 0x65,
    0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
    0x64, 0x2e, 0x0a, 0x20, 0x49, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x75,
    0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20,
    0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x56, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x00, 0x05, 0x12, 0x03, 0x56, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x56, 0x11, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x56, 0x1e, 0x1f, 0x0a, 0x87, 0x01, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x5a, 0x02,
    0x2b, 0x1a, 0x7a, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x64,
    0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x77,
    0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20,
    0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x0a, 0x20, 0x69,
    0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
    0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x29, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12, 0x03, 0x5a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x01, 0x02, 0x01, 0x05, 0x12, 0x03, 0x5a, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x5a, 0x10, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03,
    0x12, 0x03, 0x5a, 0x18, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x08, 0x12, 0x03,
    0x5a, 0x1a, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x07, 0x12, 0x03, 0x5a, 0x25,
    0x29, 0x0a, 0x35, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x5d, 0x02, 0x20, 0x1a, 0x28,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x65, 0x65, 0x72,
    0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02,
    0x04, 0x12, 0x03, 0x5d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x06, 0x12,
    0x03, 0x5d, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x5d,
    0x16, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02, 0x03, 0x12, 0x03, 0x5d, 0x1e, 0x1f,
    0x0a, 0x52, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x05, 0x61, 0x00, 0x85, 0x01, 0x01, 0x1a, 0x45, 0x20,
    0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x6e, 0x61,
    0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x61, 0x20, 0x67, 0x69,
    0x76, 0x65, 0x6e, 0x20, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x61, 0x08, 0x18,
    0x0a, 0x49, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x63, 0x02, 0x22, 0x1a, 0x3c, 0x20,
    0x41, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x69, 0x73, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e,
    0x74, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x6b,
    0x6e, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x63, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x05, 0x12, 0x03, 0x63, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x63, 0x11, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x63, 0x20, 0x21, 0x0a, 0xab, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x7d, 0x02,
    0x22, 0x1a, 0x9d, 0x0b, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x6c,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x20,
    0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x69,
    0x64, 0x65, 0x72, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65,
    0x72, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20,
    0x6f, 0x6e, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x0a, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
    0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x61, 0x66, 0x74, 0x20, 0x73, 0x70,
    0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x52, 0x6f, 0x75,
    0x67, 0x68, 0x6c, 0x79, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f,
    0x0a, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
    0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63,
    0x61, 0x6c, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x29, 0x2c, 0x20, 0x6f, 0x72, 0x0a, 0x20, 0x77, 0x68, 0x65, 0x6e,
    0x20, 0x61, 0x6e, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63,
    0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x6e, 0x6f, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x62, 0x61, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61,
    0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x74, 0x65, 0x72,
    0x6d, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x55,
    0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x28, 0x29,
    0x20, 0x52, 0x50, 0x43, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x20,
    0x57, 0x68, 0x65, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x63,
    0x61, 0x6c, 0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x73, 0x65, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e,
    0x65, 0x77, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6c, 0x65, 0x61,
    0x72, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x0a, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
    0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
    0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x63, 0x72, 0x69, 0x74, 0x65,
    0x72, 0x61, 0x2e, 0x20, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x63, 0x61, 0x73, 0x74, 0x69,
    0x6e, 0x67, 0x20, 0x61, 0x0a, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
    0x20, 0x70, 0x65, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x66,
    0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x73, 0x73, 0x75, 0x6d,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x65, 0x65, 0x72,
    0x20, 0x68, 0x61, 0x73, 0x20, 0x77, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x65, 0x6c,
    0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x64, 0x6f,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20,
    0x6f, 0x75, 0x72, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65,
    0x72, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x2c, 0x20, 0x73, 0x68, 0x6f, 0x75,
    0x6c, 0x64, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x6d,
    0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
    0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x27, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
    0x6f, 0x66, 0x20, 0x5f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x20,
    0x61, 0x62, 0x6f, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x27, 0x63,
    0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x27, 0x20, 0x66, 0x69, 0x65,
    0x6c, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x62,
    0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
    0x6e, 0x74, 0x0a, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x65, 0x61,
    0x64, 0x65, 0x72, 0x20, 0x75, 0x75, 0x69, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65,
    0x72, 0x6d, 0x69, 0x6e, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70,
    0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x74, 0x73, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x6c,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
    0x20, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x73,
    0x2e, 0x0a, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63,
    0x6f, 0x72, 0x6e, 0x65, 0x72, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x52, 0x61,
    0x66, 0x74, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20,
    0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x6c,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x0a, 0x20, 0x70, 0x65, 0x6e, 0x64,
    0x69, 0x6e, 0x67, 0x20, 0x28, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64,
    0x29, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x20, 0x49, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x20, 0x63, 0x61, 0x73, 0x65, 0x2c,
    0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x63,
    0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
    0x74, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69, 0x6e,
    0x67, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
    0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65,
    0x0a, 0x20, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
    0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04, 0x12, 0x03, 0x7d, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x05, 0x12, 0x03, 0x7d, 0x0b, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x7d, 0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x7d, 0x20, 0x21, 0x0a, 0xdc, 0x02, 0x0a, 0x04, 0x04, 0x02,
    0x02, 0x02, 0x12, 0x04, 0x84, 0x01, 0x02, 0x23, 0x1a, 0xcd, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
    0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x2c, 0x0a, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61,
    0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69,
    0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e,
    0x64, 0x65, 0x78, 0x20, 0x73, 0x65, 0x74, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65,
    0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6d, 0x61, 0x79, 0x0a, 0x20, 0x61, 0x20, 0x22, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
    0x22, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c,
    0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
    0x20, 0x62, 0x75, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63,
    0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d,
    0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x49, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20,
    0x63, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x70, 0x65,
    0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x6e,
    0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x73,
    0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x62, 0x65, 0x20, 0x70,
    0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02,
    0x04, 0x12, 0x04, 0x84, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x06,
    0x12, 0x04, 0x84, 0x01, 0x0b, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12,
    0x04, 0x84, 0x01, 0x18, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x04,
    0x84, 0x01, 0x21, 0x22, 0x0a, 0xae, 0x01, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x06, 0x8a, 0x01, 0x00,
    0xa4, 0x01, 0x01, 0x1a, 0x9f, 0x01, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x50, 0x42, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
    0x69, 0x7a, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
    0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20,
    0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x73,
    0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x57, 0x41, 0x4c, 0x2c, 0x20, 0x73, 0x75,
    0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x65, 0x6c, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
    0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x72,
    0x74, 0x75, 0x70, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x04, 0x8a, 0x01,
    0x08, 0x1b, 0x0a, 0x28, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x2d,
    0x1a, 0x1a, 0x20, 0x4c, 0x61, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
    0x64, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x04, 0x8c, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x00, 0x06, 0x12, 0x04, 0x8c, 0x01, 0x0b, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x01, 0x12, 0x04, 0x8c, 0x01, 0x18, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x00, 0x03, 0x12, 0x04, 0x8c, 0x01, 0x2b, 0x2c, 0x0a, 0x9a, 0x06, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x01, 0x12, 0x04, 0x9f, 0x01, 0x02, 0x22, 0x1a, 0x8b, 0x06, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x73,
    0x74, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x2e, 0x0a, 0x20, 0x57, 0x68,
    0x65, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
    0x74, 0x65, 0x64, 0x2c, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
    0x20, 0x74, 0x6f, 0x20, 0x30, 0x2e, 0x0a, 0x0a, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x65, 0x76, 0x65,
    0x72, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x6e,
    0x65, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20,
    0x76, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x70, 0x65, 0x65, 0x72, 0x73,
    0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6f,
    0x72, 0x20, 0x52, 0x50, 0x43, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x69,
    0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
    0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6e,
    0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x68,
    0x69, 0x67, 0x68, 0x65, 0x72, 0x0a, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x74, 0x65, 0x70, 0x20, 0x64, 0x6f, 0x77,
    0x6e, 0x20, 0x74, 0x6f, 0x20, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x69, 0x74, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
    0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x27, 0x73, 0x20, 0x74, 0x65,
    0x72, 0x6d, 0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
    0x77, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
    0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20,
    0x52, 0x50, 0x43, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20,
    0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x0a,
    0x20, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74,
    0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20,
    0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x20, 0x4c, 0x45,
    0x41, 0x44, 0x45, 0x52, 0x20, 0x77, 0x68, 0x6f, 0x20, 0x68, 0x61, 0x73, 0x0a, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x79, 0x65, 0x74, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x73, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x20, 0x69, 0x73, 0x20,
    0x6f, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x61,
    0x73, 0x65, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x6a, 0x65,
    0x63, 0x74, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
    0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x28, 0x29, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x77,
    0x69, 0x74, 0x68, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x45, 0x72, 0x72,
    0x6f, 0x72, 0x50, 0x42, 0x3a, 0x3a, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x45,
    0x52, 0x4d, 0x2e, 0x0a, 0x0a, 0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
    0x77, 0x65, 0x72, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x52,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x56,
    0x6f, 0x74, 0x65, 0x28, 0x29, 0x20, 0x52, 0x50, 0x43, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61,
    0x6e, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x72, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x2c, 0x0a,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6e,
    0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x04,
    0x9f, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x05, 0x12, 0x04, 0x9f,
    0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x04, 0x9f, 0x01,
    0x11, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x04, 0x9f, 0x01, 0x20,
    0x21, 0x0a, 0x85, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x02, 0x12, 0x04, 0xa3, 0x01, 0x02, 0x20,
    0x1a, 0x77, 0x20, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x55, 0x55, 0x49,
    0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
    0x74, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x20,
    0x27, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x27, 0x2c, 0x20,
    0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x0a, 0x20,
    0x69, 0x66, 0x20, 0x6e, 0x6f, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d,
    0x61, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
    0x6e, 0x74, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x02, 0x04, 0x12, 0x04, 0xa3, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02,
    0x05, 0x12, 0x04, 0xa3, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01,
    0x12, 0x04, 0xa3, 0x01, 0x12, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12,
    0x04, 0xa3, 0x01, 0x1e, 0x1f,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
