// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use std::io::Write;

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct UserInformationPB {
    // message fields
    effective_user: ::protobuf::SingularField<::std::string::String>,
    real_user: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for UserInformationPB {}

impl UserInformationPB {
    pub fn new() -> UserInformationPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static UserInformationPB {
        static mut instance: ::protobuf::lazy::Lazy<UserInformationPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UserInformationPB,
        };
        unsafe {
            instance.get(UserInformationPB::new)
        }
    }

    // optional string effective_user = 1;

    pub fn clear_effective_user(&mut self) {
        self.effective_user.clear();
    }

    pub fn has_effective_user(&self) -> bool {
        self.effective_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_effective_user(&mut self, v: ::std::string::String) {
        self.effective_user = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_effective_user(&mut self) -> &mut ::std::string::String {
        if self.effective_user.is_none() {
            self.effective_user.set_default();
        };
        self.effective_user.as_mut().unwrap()
    }

    // Take field
    pub fn take_effective_user(&mut self) -> ::std::string::String {
        self.effective_user.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_effective_user(&self) -> &str {
        match self.effective_user.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_effective_user_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.effective_user
    }

    fn mut_effective_user_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.effective_user
    }

    // required string real_user = 2;

    pub fn clear_real_user(&mut self) {
        self.real_user.clear();
    }

    pub fn has_real_user(&self) -> bool {
        self.real_user.is_some()
    }

    // Param is passed by value, moved
    pub fn set_real_user(&mut self, v: ::std::string::String) {
        self.real_user = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_real_user(&mut self) -> &mut ::std::string::String {
        if self.real_user.is_none() {
            self.real_user.set_default();
        };
        self.real_user.as_mut().unwrap()
    }

    // Take field
    pub fn take_real_user(&mut self) -> ::std::string::String {
        self.real_user.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_real_user(&self) -> &str {
        match self.real_user.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_real_user_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.real_user
    }

    fn mut_real_user_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.real_user
    }
}

impl ::protobuf::Message for UserInformationPB {
    fn is_initialized(&self) -> bool {
        if self.real_user.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.effective_user)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.real_user)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.effective_user.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        };
        if let Some(v) = self.real_user.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.effective_user.as_ref() {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.real_user.as_ref() {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for UserInformationPB {
    fn new() -> UserInformationPB {
        UserInformationPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<UserInformationPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "effective_user",
                    UserInformationPB::get_effective_user_for_reflect,
                    UserInformationPB::mut_effective_user_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "real_user",
                    UserInformationPB::get_real_user_for_reflect,
                    UserInformationPB::mut_real_user_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UserInformationPB>(
                    "UserInformationPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for UserInformationPB {
    fn clear(&mut self) {
        self.clear_effective_user();
        self.clear_real_user();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UserInformationPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserInformationPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionContextPB {
    // message fields
    DEPRECATED_user_info: ::protobuf::SingularPtrField<UserInformationPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ConnectionContextPB {}

impl ConnectionContextPB {
    pub fn new() -> ConnectionContextPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ConnectionContextPB {
        static mut instance: ::protobuf::lazy::Lazy<ConnectionContextPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectionContextPB,
        };
        unsafe {
            instance.get(ConnectionContextPB::new)
        }
    }

    // optional .kudu.rpc.UserInformationPB DEPRECATED_user_info = 2;

    pub fn clear_DEPRECATED_user_info(&mut self) {
        self.DEPRECATED_user_info.clear();
    }

    pub fn has_DEPRECATED_user_info(&self) -> bool {
        self.DEPRECATED_user_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_DEPRECATED_user_info(&mut self, v: UserInformationPB) {
        self.DEPRECATED_user_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_DEPRECATED_user_info(&mut self) -> &mut UserInformationPB {
        if self.DEPRECATED_user_info.is_none() {
            self.DEPRECATED_user_info.set_default();
        };
        self.DEPRECATED_user_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_DEPRECATED_user_info(&mut self) -> UserInformationPB {
        self.DEPRECATED_user_info.take().unwrap_or_else(|| UserInformationPB::new())
    }

    pub fn get_DEPRECATED_user_info(&self) -> &UserInformationPB {
        self.DEPRECATED_user_info.as_ref().unwrap_or_else(|| UserInformationPB::default_instance())
    }

    fn get_DEPRECATED_user_info_for_reflect(&self) -> &::protobuf::SingularPtrField<UserInformationPB> {
        &self.DEPRECATED_user_info
    }

    fn mut_DEPRECATED_user_info_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<UserInformationPB> {
        &mut self.DEPRECATED_user_info
    }
}

impl ::protobuf::Message for ConnectionContextPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.DEPRECATED_user_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.DEPRECATED_user_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.DEPRECATED_user_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ConnectionContextPB {
    fn new() -> ConnectionContextPB {
        ConnectionContextPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ConnectionContextPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UserInformationPB>>(
                    "DEPRECATED_user_info",
                    ConnectionContextPB::get_DEPRECATED_user_info_for_reflect,
                    ConnectionContextPB::mut_DEPRECATED_user_info_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectionContextPB>(
                    "ConnectionContextPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ConnectionContextPB {
    fn clear(&mut self) {
        self.clear_DEPRECATED_user_info();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionContextPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionContextPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SaslMessagePB {
    // message fields
    supported_features: ::std::vec::Vec<RpcFeatureFlag>,
    state: ::std::option::Option<SaslMessagePB_SaslState>,
    token: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    auths: ::protobuf::RepeatedField<SaslMessagePB_SaslAuth>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for SaslMessagePB {}

impl SaslMessagePB {
    pub fn new() -> SaslMessagePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SaslMessagePB {
        static mut instance: ::protobuf::lazy::Lazy<SaslMessagePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SaslMessagePB,
        };
        unsafe {
            instance.get(SaslMessagePB::new)
        }
    }

    // repeated .kudu.rpc.RpcFeatureFlag supported_features = 1;

    pub fn clear_supported_features(&mut self) {
        self.supported_features.clear();
    }

    // Param is passed by value, moved
    pub fn set_supported_features(&mut self, v: ::std::vec::Vec<RpcFeatureFlag>) {
        self.supported_features = v;
    }

    // Mutable pointer to the field.
    pub fn mut_supported_features(&mut self) -> &mut ::std::vec::Vec<RpcFeatureFlag> {
        &mut self.supported_features
    }

    // Take field
    pub fn take_supported_features(&mut self) -> ::std::vec::Vec<RpcFeatureFlag> {
        ::std::mem::replace(&mut self.supported_features, ::std::vec::Vec::new())
    }

    pub fn get_supported_features(&self) -> &[RpcFeatureFlag] {
        &self.supported_features
    }

    fn get_supported_features_for_reflect(&self) -> &::std::vec::Vec<RpcFeatureFlag> {
        &self.supported_features
    }

    fn mut_supported_features_for_reflect(&mut self) -> &mut ::std::vec::Vec<RpcFeatureFlag> {
        &mut self.supported_features
    }

    // required .kudu.rpc.SaslMessagePB.SaslState state = 2;

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: SaslMessagePB_SaslState) {
        self.state = ::std::option::Option::Some(v);
    }

    pub fn get_state(&self) -> SaslMessagePB_SaslState {
        self.state.unwrap_or(SaslMessagePB_SaslState::UNKNOWN)
    }

    fn get_state_for_reflect(&self) -> &::std::option::Option<SaslMessagePB_SaslState> {
        &self.state
    }

    fn mut_state_for_reflect(&mut self) -> &mut ::std::option::Option<SaslMessagePB_SaslState> {
        &mut self.state
    }

    // optional bytes token = 3;

    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.token.is_none() {
            self.token.set_default();
        };
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::vec::Vec<u8> {
        self.token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_token(&self) -> &[u8] {
        match self.token.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_token_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.token
    }

    fn mut_token_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.token
    }

    // repeated .kudu.rpc.SaslMessagePB.SaslAuth auths = 4;

    pub fn clear_auths(&mut self) {
        self.auths.clear();
    }

    // Param is passed by value, moved
    pub fn set_auths(&mut self, v: ::protobuf::RepeatedField<SaslMessagePB_SaslAuth>) {
        self.auths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_auths(&mut self) -> &mut ::protobuf::RepeatedField<SaslMessagePB_SaslAuth> {
        &mut self.auths
    }

    // Take field
    pub fn take_auths(&mut self) -> ::protobuf::RepeatedField<SaslMessagePB_SaslAuth> {
        ::std::mem::replace(&mut self.auths, ::protobuf::RepeatedField::new())
    }

    pub fn get_auths(&self) -> &[SaslMessagePB_SaslAuth] {
        &self.auths
    }

    fn get_auths_for_reflect(&self) -> &::protobuf::RepeatedField<SaslMessagePB_SaslAuth> {
        &self.auths
    }

    fn mut_auths_for_reflect(&mut self) -> &mut ::protobuf::RepeatedField<SaslMessagePB_SaslAuth> {
        &mut self.auths
    }
}

impl ::protobuf::Message for SaslMessagePB {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_into(wire_type, is, &mut self.supported_features)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.state = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.token)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.auths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.supported_features {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(2, v);
        };
        if let Some(v) = self.token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        };
        for value in &self.auths {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        for v in &self.supported_features {
            os.write_enum(1, v.value())?;
        };
        if let Some(v) = self.state {
            os.write_enum(2, v.value())?;
        };
        if let Some(v) = self.token.as_ref() {
            os.write_bytes(3, &v)?;
        };
        for v in &self.auths {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SaslMessagePB {
    fn new() -> SaslMessagePB {
        SaslMessagePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<SaslMessagePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RpcFeatureFlag>>(
                    "supported_features",
                    SaslMessagePB::get_supported_features_for_reflect,
                    SaslMessagePB::mut_supported_features_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SaslMessagePB_SaslState>>(
                    "state",
                    SaslMessagePB::get_state_for_reflect,
                    SaslMessagePB::mut_state_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "token",
                    SaslMessagePB::get_token_for_reflect,
                    SaslMessagePB::mut_token_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SaslMessagePB_SaslAuth>>(
                    "auths",
                    SaslMessagePB::get_auths_for_reflect,
                    SaslMessagePB::mut_auths_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SaslMessagePB>(
                    "SaslMessagePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SaslMessagePB {
    fn clear(&mut self) {
        self.clear_supported_features();
        self.clear_state();
        self.clear_token();
        self.clear_auths();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaslMessagePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaslMessagePB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SaslMessagePB_SaslAuth {
    // message fields
    method: ::protobuf::SingularField<::std::string::String>,
    mechanism: ::protobuf::SingularField<::std::string::String>,
    challenge: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for SaslMessagePB_SaslAuth {}

impl SaslMessagePB_SaslAuth {
    pub fn new() -> SaslMessagePB_SaslAuth {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static SaslMessagePB_SaslAuth {
        static mut instance: ::protobuf::lazy::Lazy<SaslMessagePB_SaslAuth> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SaslMessagePB_SaslAuth,
        };
        unsafe {
            instance.get(SaslMessagePB_SaslAuth::new)
        }
    }

    // optional string method = 1;

    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        if self.method.is_none() {
            self.method.set_default();
        };
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        self.method.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_method(&self) -> &str {
        match self.method.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_method_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.method
    }

    fn mut_method_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.method
    }

    // required string mechanism = 2;

    pub fn clear_mechanism(&mut self) {
        self.mechanism.clear();
    }

    pub fn has_mechanism(&self) -> bool {
        self.mechanism.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mechanism(&mut self, v: ::std::string::String) {
        self.mechanism = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mechanism(&mut self) -> &mut ::std::string::String {
        if self.mechanism.is_none() {
            self.mechanism.set_default();
        };
        self.mechanism.as_mut().unwrap()
    }

    // Take field
    pub fn take_mechanism(&mut self) -> ::std::string::String {
        self.mechanism.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_mechanism(&self) -> &str {
        match self.mechanism.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_mechanism_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.mechanism
    }

    fn mut_mechanism_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.mechanism
    }

    // optional bytes challenge = 5;

    pub fn clear_challenge(&mut self) {
        self.challenge.clear();
    }

    pub fn has_challenge(&self) -> bool {
        self.challenge.is_some()
    }

    // Param is passed by value, moved
    pub fn set_challenge(&mut self, v: ::std::vec::Vec<u8>) {
        self.challenge = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_challenge(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.challenge.is_none() {
            self.challenge.set_default();
        };
        self.challenge.as_mut().unwrap()
    }

    // Take field
    pub fn take_challenge(&mut self) -> ::std::vec::Vec<u8> {
        self.challenge.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_challenge(&self) -> &[u8] {
        match self.challenge.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_challenge_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.challenge
    }

    fn mut_challenge_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.challenge
    }
}

impl ::protobuf::Message for SaslMessagePB_SaslAuth {
    fn is_initialized(&self) -> bool {
        if self.mechanism.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.mechanism)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.challenge)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.method.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        };
        if let Some(v) = self.mechanism.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        };
        if let Some(v) = self.challenge.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.method.as_ref() {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.mechanism.as_ref() {
            os.write_string(2, &v)?;
        };
        if let Some(v) = self.challenge.as_ref() {
            os.write_bytes(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for SaslMessagePB_SaslAuth {
    fn new() -> SaslMessagePB_SaslAuth {
        SaslMessagePB_SaslAuth::new()
    }

    fn descriptor_static(_: ::std::option::Option<SaslMessagePB_SaslAuth>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method",
                    SaslMessagePB_SaslAuth::get_method_for_reflect,
                    SaslMessagePB_SaslAuth::mut_method_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "mechanism",
                    SaslMessagePB_SaslAuth::get_mechanism_for_reflect,
                    SaslMessagePB_SaslAuth::mut_mechanism_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "challenge",
                    SaslMessagePB_SaslAuth::get_challenge_for_reflect,
                    SaslMessagePB_SaslAuth::mut_challenge_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SaslMessagePB_SaslAuth>(
                    "SaslMessagePB_SaslAuth",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for SaslMessagePB_SaslAuth {
    fn clear(&mut self) {
        self.clear_method();
        self.clear_mechanism();
        self.clear_challenge();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SaslMessagePB_SaslAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaslMessagePB_SaslAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SaslMessagePB_SaslState {
    UNKNOWN = 999,
    SUCCESS = 0,
    NEGOTIATE = 1,
    INITIATE = 2,
    CHALLENGE = 3,
    RESPONSE = 4,
}

impl ::protobuf::ProtobufEnum for SaslMessagePB_SaslState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SaslMessagePB_SaslState> {
        match value {
            999 => ::std::option::Option::Some(SaslMessagePB_SaslState::UNKNOWN),
            0 => ::std::option::Option::Some(SaslMessagePB_SaslState::SUCCESS),
            1 => ::std::option::Option::Some(SaslMessagePB_SaslState::NEGOTIATE),
            2 => ::std::option::Option::Some(SaslMessagePB_SaslState::INITIATE),
            3 => ::std::option::Option::Some(SaslMessagePB_SaslState::CHALLENGE),
            4 => ::std::option::Option::Some(SaslMessagePB_SaslState::RESPONSE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SaslMessagePB_SaslState] = &[
            SaslMessagePB_SaslState::UNKNOWN,
            SaslMessagePB_SaslState::SUCCESS,
            SaslMessagePB_SaslState::NEGOTIATE,
            SaslMessagePB_SaslState::INITIATE,
            SaslMessagePB_SaslState::CHALLENGE,
            SaslMessagePB_SaslState::RESPONSE,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<SaslMessagePB_SaslState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("SaslMessagePB_SaslState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for SaslMessagePB_SaslState {
}

impl ::protobuf::reflect::ProtobufValue for SaslMessagePB_SaslState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteMethodPB {
    // message fields
    service_name: ::protobuf::SingularField<::std::string::String>,
    method_name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RemoteMethodPB {}

impl RemoteMethodPB {
    pub fn new() -> RemoteMethodPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RemoteMethodPB {
        static mut instance: ::protobuf::lazy::Lazy<RemoteMethodPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoteMethodPB,
        };
        unsafe {
            instance.get(RemoteMethodPB::new)
        }
    }

    // required string service_name = 1;

    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    pub fn has_service_name(&self) -> bool {
        self.service_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        if self.service_name.is_none() {
            self.service_name.set_default();
        };
        self.service_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        self.service_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_service_name(&self) -> &str {
        match self.service_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_service_name_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.service_name
    }

    fn mut_service_name_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.service_name
    }

    // required string method_name = 2;

    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    pub fn has_method_name(&self) -> bool {
        self.method_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::string::String) {
        self.method_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
        if self.method_name.is_none() {
            self.method_name.set_default();
        };
        self.method_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::string::String {
        self.method_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_method_name(&self) -> &str {
        match self.method_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_method_name_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.method_name
    }

    fn mut_method_name_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.method_name
    }
}

impl ::protobuf::Message for RemoteMethodPB {
    fn is_initialized(&self) -> bool {
        if self.service_name.is_none() {
            return false;
        };
        if self.method_name.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.method_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.service_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        };
        if let Some(v) = self.method_name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.service_name.as_ref() {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.method_name.as_ref() {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RemoteMethodPB {
    fn new() -> RemoteMethodPB {
        RemoteMethodPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RemoteMethodPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "service_name",
                    RemoteMethodPB::get_service_name_for_reflect,
                    RemoteMethodPB::mut_service_name_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "method_name",
                    RemoteMethodPB::get_method_name_for_reflect,
                    RemoteMethodPB::mut_method_name_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoteMethodPB>(
                    "RemoteMethodPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RemoteMethodPB {
    fn clear(&mut self) {
        self.clear_service_name();
        self.clear_method_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteMethodPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteMethodPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestIdPB {
    // message fields
    client_id: ::protobuf::SingularField<::std::string::String>,
    seq_no: ::std::option::Option<i64>,
    first_incomplete_seq_no: ::std::option::Option<i64>,
    attempt_no: ::std::option::Option<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RequestIdPB {}

impl RequestIdPB {
    pub fn new() -> RequestIdPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RequestIdPB {
        static mut instance: ::protobuf::lazy::Lazy<RequestIdPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestIdPB,
        };
        unsafe {
            instance.get(RequestIdPB::new)
        }
    }

    // required string client_id = 1;

    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    pub fn has_client_id(&self) -> bool {
        self.client_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        if self.client_id.is_none() {
            self.client_id.set_default();
        };
        self.client_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        self.client_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_client_id(&self) -> &str {
        match self.client_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_client_id_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.client_id
    }

    fn mut_client_id_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.client_id
    }

    // required int64 seq_no = 2;

    pub fn clear_seq_no(&mut self) {
        self.seq_no = ::std::option::Option::None;
    }

    pub fn has_seq_no(&self) -> bool {
        self.seq_no.is_some()
    }

    // Param is passed by value, moved
    pub fn set_seq_no(&mut self, v: i64) {
        self.seq_no = ::std::option::Option::Some(v);
    }

    pub fn get_seq_no(&self) -> i64 {
        self.seq_no.unwrap_or(0)
    }

    fn get_seq_no_for_reflect(&self) -> &::std::option::Option<i64> {
        &self.seq_no
    }

    fn mut_seq_no_for_reflect(&mut self) -> &mut ::std::option::Option<i64> {
        &mut self.seq_no
    }

    // required int64 first_incomplete_seq_no = 3;

    pub fn clear_first_incomplete_seq_no(&mut self) {
        self.first_incomplete_seq_no = ::std::option::Option::None;
    }

    pub fn has_first_incomplete_seq_no(&self) -> bool {
        self.first_incomplete_seq_no.is_some()
    }

    // Param is passed by value, moved
    pub fn set_first_incomplete_seq_no(&mut self, v: i64) {
        self.first_incomplete_seq_no = ::std::option::Option::Some(v);
    }

    pub fn get_first_incomplete_seq_no(&self) -> i64 {
        self.first_incomplete_seq_no.unwrap_or(0)
    }

    fn get_first_incomplete_seq_no_for_reflect(&self) -> &::std::option::Option<i64> {
        &self.first_incomplete_seq_no
    }

    fn mut_first_incomplete_seq_no_for_reflect(&mut self) -> &mut ::std::option::Option<i64> {
        &mut self.first_incomplete_seq_no
    }

    // required int64 attempt_no = 4;

    pub fn clear_attempt_no(&mut self) {
        self.attempt_no = ::std::option::Option::None;
    }

    pub fn has_attempt_no(&self) -> bool {
        self.attempt_no.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attempt_no(&mut self, v: i64) {
        self.attempt_no = ::std::option::Option::Some(v);
    }

    pub fn get_attempt_no(&self) -> i64 {
        self.attempt_no.unwrap_or(0)
    }

    fn get_attempt_no_for_reflect(&self) -> &::std::option::Option<i64> {
        &self.attempt_no
    }

    fn mut_attempt_no_for_reflect(&mut self) -> &mut ::std::option::Option<i64> {
        &mut self.attempt_no
    }
}

impl ::protobuf::Message for RequestIdPB {
    fn is_initialized(&self) -> bool {
        if self.client_id.is_none() {
            return false;
        };
        if self.seq_no.is_none() {
            return false;
        };
        if self.first_incomplete_seq_no.is_none() {
            return false;
        };
        if self.attempt_no.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.seq_no = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.first_incomplete_seq_no = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.attempt_no = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.client_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        };
        if let Some(v) = self.seq_no {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.first_incomplete_seq_no {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.attempt_no {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.client_id.as_ref() {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.seq_no {
            os.write_int64(2, v)?;
        };
        if let Some(v) = self.first_incomplete_seq_no {
            os.write_int64(3, v)?;
        };
        if let Some(v) = self.attempt_no {
            os.write_int64(4, v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RequestIdPB {
    fn new() -> RequestIdPB {
        RequestIdPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<RequestIdPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "client_id",
                    RequestIdPB::get_client_id_for_reflect,
                    RequestIdPB::mut_client_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "seq_no",
                    RequestIdPB::get_seq_no_for_reflect,
                    RequestIdPB::mut_seq_no_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "first_incomplete_seq_no",
                    RequestIdPB::get_first_incomplete_seq_no_for_reflect,
                    RequestIdPB::mut_first_incomplete_seq_no_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "attempt_no",
                    RequestIdPB::get_attempt_no_for_reflect,
                    RequestIdPB::mut_attempt_no_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestIdPB>(
                    "RequestIdPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RequestIdPB {
    fn clear(&mut self) {
        self.clear_client_id();
        self.clear_seq_no();
        self.clear_first_incomplete_seq_no();
        self.clear_attempt_no();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestIdPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestIdPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestHeader {
    // message fields
    call_id: ::std::option::Option<i32>,
    remote_method: ::protobuf::SingularPtrField<RemoteMethodPB>,
    timeout_millis: ::std::option::Option<u32>,
    required_feature_flags: ::std::vec::Vec<u32>,
    request_id: ::protobuf::SingularPtrField<RequestIdPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for RequestHeader {}

impl RequestHeader {
    pub fn new() -> RequestHeader {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static RequestHeader {
        static mut instance: ::protobuf::lazy::Lazy<RequestHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestHeader,
        };
        unsafe {
            instance.get(RequestHeader::new)
        }
    }

    // required int32 call_id = 3;

    pub fn clear_call_id(&mut self) {
        self.call_id = ::std::option::Option::None;
    }

    pub fn has_call_id(&self) -> bool {
        self.call_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_id(&mut self, v: i32) {
        self.call_id = ::std::option::Option::Some(v);
    }

    pub fn get_call_id(&self) -> i32 {
        self.call_id.unwrap_or(0)
    }

    fn get_call_id_for_reflect(&self) -> &::std::option::Option<i32> {
        &self.call_id
    }

    fn mut_call_id_for_reflect(&mut self) -> &mut ::std::option::Option<i32> {
        &mut self.call_id
    }

    // optional .kudu.rpc.RemoteMethodPB remote_method = 6;

    pub fn clear_remote_method(&mut self) {
        self.remote_method.clear();
    }

    pub fn has_remote_method(&self) -> bool {
        self.remote_method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_method(&mut self, v: RemoteMethodPB) {
        self.remote_method = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote_method(&mut self) -> &mut RemoteMethodPB {
        if self.remote_method.is_none() {
            self.remote_method.set_default();
        };
        self.remote_method.as_mut().unwrap()
    }

    // Take field
    pub fn take_remote_method(&mut self) -> RemoteMethodPB {
        self.remote_method.take().unwrap_or_else(|| RemoteMethodPB::new())
    }

    pub fn get_remote_method(&self) -> &RemoteMethodPB {
        self.remote_method.as_ref().unwrap_or_else(|| RemoteMethodPB::default_instance())
    }

    fn get_remote_method_for_reflect(&self) -> &::protobuf::SingularPtrField<RemoteMethodPB> {
        &self.remote_method
    }

    fn mut_remote_method_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<RemoteMethodPB> {
        &mut self.remote_method
    }

    // optional uint32 timeout_millis = 10;

    pub fn clear_timeout_millis(&mut self) {
        self.timeout_millis = ::std::option::Option::None;
    }

    pub fn has_timeout_millis(&self) -> bool {
        self.timeout_millis.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_millis(&mut self, v: u32) {
        self.timeout_millis = ::std::option::Option::Some(v);
    }

    pub fn get_timeout_millis(&self) -> u32 {
        self.timeout_millis.unwrap_or(0)
    }

    fn get_timeout_millis_for_reflect(&self) -> &::std::option::Option<u32> {
        &self.timeout_millis
    }

    fn mut_timeout_millis_for_reflect(&mut self) -> &mut ::std::option::Option<u32> {
        &mut self.timeout_millis
    }

    // repeated uint32 required_feature_flags = 11;

    pub fn clear_required_feature_flags(&mut self) {
        self.required_feature_flags.clear();
    }

    // Param is passed by value, moved
    pub fn set_required_feature_flags(&mut self, v: ::std::vec::Vec<u32>) {
        self.required_feature_flags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_required_feature_flags(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.required_feature_flags
    }

    // Take field
    pub fn take_required_feature_flags(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.required_feature_flags, ::std::vec::Vec::new())
    }

    pub fn get_required_feature_flags(&self) -> &[u32] {
        &self.required_feature_flags
    }

    fn get_required_feature_flags_for_reflect(&self) -> &::std::vec::Vec<u32> {
        &self.required_feature_flags
    }

    fn mut_required_feature_flags_for_reflect(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.required_feature_flags
    }

    // optional .kudu.rpc.RequestIdPB request_id = 15;

    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    pub fn has_request_id(&self) -> bool {
        self.request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: RequestIdPB) {
        self.request_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut RequestIdPB {
        if self.request_id.is_none() {
            self.request_id.set_default();
        };
        self.request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id(&mut self) -> RequestIdPB {
        self.request_id.take().unwrap_or_else(|| RequestIdPB::new())
    }

    pub fn get_request_id(&self) -> &RequestIdPB {
        self.request_id.as_ref().unwrap_or_else(|| RequestIdPB::default_instance())
    }

    fn get_request_id_for_reflect(&self) -> &::protobuf::SingularPtrField<RequestIdPB> {
        &self.request_id
    }

    fn mut_request_id_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<RequestIdPB> {
        &mut self.request_id
    }
}

impl ::protobuf::Message for RequestHeader {
    fn is_initialized(&self) -> bool {
        if self.call_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.call_id = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.remote_method)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint32()?;
                    self.timeout_millis = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.required_feature_flags)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.call_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.remote_method.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.timeout_millis {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.required_feature_flags {
            my_size += ::protobuf::rt::value_size(11, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.request_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.call_id {
            os.write_int32(3, v)?;
        };
        if let Some(v) = self.remote_method.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.timeout_millis {
            os.write_uint32(10, v)?;
        };
        for v in &self.required_feature_flags {
            os.write_uint32(11, *v)?;
        };
        if let Some(v) = self.request_id.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for RequestHeader {
    fn new() -> RequestHeader {
        RequestHeader::new()
    }

    fn descriptor_static(_: ::std::option::Option<RequestHeader>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "call_id",
                    RequestHeader::get_call_id_for_reflect,
                    RequestHeader::mut_call_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RemoteMethodPB>>(
                    "remote_method",
                    RequestHeader::get_remote_method_for_reflect,
                    RequestHeader::mut_remote_method_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "timeout_millis",
                    RequestHeader::get_timeout_millis_for_reflect,
                    RequestHeader::mut_timeout_millis_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "required_feature_flags",
                    RequestHeader::get_required_feature_flags_for_reflect,
                    RequestHeader::mut_required_feature_flags_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestIdPB>>(
                    "request_id",
                    RequestHeader::get_request_id_for_reflect,
                    RequestHeader::mut_request_id_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestHeader>(
                    "RequestHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for RequestHeader {
    fn clear(&mut self) {
        self.clear_call_id();
        self.clear_remote_method();
        self.clear_timeout_millis();
        self.clear_required_feature_flags();
        self.clear_request_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseHeader {
    // message fields
    call_id: ::std::option::Option<i32>,
    is_error: ::std::option::Option<bool>,
    sidecar_offsets: ::std::vec::Vec<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ResponseHeader {}

impl ResponseHeader {
    pub fn new() -> ResponseHeader {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ResponseHeader {
        static mut instance: ::protobuf::lazy::Lazy<ResponseHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseHeader,
        };
        unsafe {
            instance.get(ResponseHeader::new)
        }
    }

    // required int32 call_id = 1;

    pub fn clear_call_id(&mut self) {
        self.call_id = ::std::option::Option::None;
    }

    pub fn has_call_id(&self) -> bool {
        self.call_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_id(&mut self, v: i32) {
        self.call_id = ::std::option::Option::Some(v);
    }

    pub fn get_call_id(&self) -> i32 {
        self.call_id.unwrap_or(0)
    }

    fn get_call_id_for_reflect(&self) -> &::std::option::Option<i32> {
        &self.call_id
    }

    fn mut_call_id_for_reflect(&mut self) -> &mut ::std::option::Option<i32> {
        &mut self.call_id
    }

    // optional bool is_error = 2;

    pub fn clear_is_error(&mut self) {
        self.is_error = ::std::option::Option::None;
    }

    pub fn has_is_error(&self) -> bool {
        self.is_error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_error(&mut self, v: bool) {
        self.is_error = ::std::option::Option::Some(v);
    }

    pub fn get_is_error(&self) -> bool {
        self.is_error.unwrap_or(false)
    }

    fn get_is_error_for_reflect(&self) -> &::std::option::Option<bool> {
        &self.is_error
    }

    fn mut_is_error_for_reflect(&mut self) -> &mut ::std::option::Option<bool> {
        &mut self.is_error
    }

    // repeated uint32 sidecar_offsets = 3;

    pub fn clear_sidecar_offsets(&mut self) {
        self.sidecar_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_sidecar_offsets(&mut self, v: ::std::vec::Vec<u32>) {
        self.sidecar_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sidecar_offsets(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.sidecar_offsets
    }

    // Take field
    pub fn take_sidecar_offsets(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.sidecar_offsets, ::std::vec::Vec::new())
    }

    pub fn get_sidecar_offsets(&self) -> &[u32] {
        &self.sidecar_offsets
    }

    fn get_sidecar_offsets_for_reflect(&self) -> &::std::vec::Vec<u32> {
        &self.sidecar_offsets
    }

    fn mut_sidecar_offsets_for_reflect(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.sidecar_offsets
    }
}

impl ::protobuf::Message for ResponseHeader {
    fn is_initialized(&self) -> bool {
        if self.call_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int32()?;
                    self.call_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.is_error = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.sidecar_offsets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.call_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.is_error {
            my_size += 2;
        };
        for value in &self.sidecar_offsets {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.call_id {
            os.write_int32(1, v)?;
        };
        if let Some(v) = self.is_error {
            os.write_bool(2, v)?;
        };
        for v in &self.sidecar_offsets {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ResponseHeader {
    fn new() -> ResponseHeader {
        ResponseHeader::new()
    }

    fn descriptor_static(_: ::std::option::Option<ResponseHeader>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "call_id",
                    ResponseHeader::get_call_id_for_reflect,
                    ResponseHeader::mut_call_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_error",
                    ResponseHeader::get_is_error_for_reflect,
                    ResponseHeader::mut_is_error_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "sidecar_offsets",
                    ResponseHeader::get_sidecar_offsets_for_reflect,
                    ResponseHeader::mut_sidecar_offsets_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseHeader>(
                    "ResponseHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ResponseHeader {
    fn clear(&mut self) {
        self.clear_call_id();
        self.clear_is_error();
        self.clear_sidecar_offsets();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ErrorStatusPB {
    // message fields
    message: ::protobuf::SingularField<::std::string::String>,
    code: ::std::option::Option<ErrorStatusPB_RpcErrorCodePB>,
    unsupported_feature_flags: ::std::vec::Vec<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ErrorStatusPB {}

impl ErrorStatusPB {
    pub fn new() -> ErrorStatusPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ErrorStatusPB {
        static mut instance: ::protobuf::lazy::Lazy<ErrorStatusPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ErrorStatusPB,
        };
        unsafe {
            instance.get(ErrorStatusPB::new)
        }
    }

    // required string message = 1;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        if self.message.is_none() {
            self.message.set_default();
        };
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        self.message.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_message(&self) -> &str {
        match self.message.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    fn get_message_for_reflect(&self) -> &::protobuf::SingularField<::std::string::String> {
        &self.message
    }

    fn mut_message_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::string::String> {
        &mut self.message
    }

    // optional .kudu.rpc.ErrorStatusPB.RpcErrorCodePB code = 2;

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ErrorStatusPB_RpcErrorCodePB) {
        self.code = ::std::option::Option::Some(v);
    }

    pub fn get_code(&self) -> ErrorStatusPB_RpcErrorCodePB {
        self.code.unwrap_or(ErrorStatusPB_RpcErrorCodePB::FATAL_UNKNOWN)
    }

    fn get_code_for_reflect(&self) -> &::std::option::Option<ErrorStatusPB_RpcErrorCodePB> {
        &self.code
    }

    fn mut_code_for_reflect(&mut self) -> &mut ::std::option::Option<ErrorStatusPB_RpcErrorCodePB> {
        &mut self.code
    }

    // repeated uint32 unsupported_feature_flags = 3;

    pub fn clear_unsupported_feature_flags(&mut self) {
        self.unsupported_feature_flags.clear();
    }

    // Param is passed by value, moved
    pub fn set_unsupported_feature_flags(&mut self, v: ::std::vec::Vec<u32>) {
        self.unsupported_feature_flags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unsupported_feature_flags(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.unsupported_feature_flags
    }

    // Take field
    pub fn take_unsupported_feature_flags(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.unsupported_feature_flags, ::std::vec::Vec::new())
    }

    pub fn get_unsupported_feature_flags(&self) -> &[u32] {
        &self.unsupported_feature_flags
    }

    fn get_unsupported_feature_flags_for_reflect(&self) -> &::std::vec::Vec<u32> {
        &self.unsupported_feature_flags
    }

    fn mut_unsupported_feature_flags_for_reflect(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.unsupported_feature_flags
    }
}

impl ::protobuf::Message for ErrorStatusPB {
    fn is_initialized(&self) -> bool {
        if self.message.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.message)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_enum()?;
                    self.code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.unsupported_feature_flags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        };
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::enum_size(2, v);
        };
        for value in &self.unsupported_feature_flags {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.message.as_ref() {
            os.write_string(1, &v)?;
        };
        if let Some(v) = self.code {
            os.write_enum(2, v.value())?;
        };
        for v in &self.unsupported_feature_flags {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ErrorStatusPB {
    fn new() -> ErrorStatusPB {
        ErrorStatusPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ErrorStatusPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    ErrorStatusPB::get_message_for_reflect,
                    ErrorStatusPB::mut_message_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ErrorStatusPB_RpcErrorCodePB>>(
                    "code",
                    ErrorStatusPB::get_code_for_reflect,
                    ErrorStatusPB::mut_code_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "unsupported_feature_flags",
                    ErrorStatusPB::get_unsupported_feature_flags_for_reflect,
                    ErrorStatusPB::mut_unsupported_feature_flags_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ErrorStatusPB>(
                    "ErrorStatusPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ErrorStatusPB {
    fn clear(&mut self) {
        self.clear_message();
        self.clear_code();
        self.clear_unsupported_feature_flags();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorStatusPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorStatusPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ErrorStatusPB_RpcErrorCodePB {
    FATAL_UNKNOWN = 10,
    ERROR_APPLICATION = 1,
    ERROR_NO_SUCH_METHOD = 2,
    ERROR_NO_SUCH_SERVICE = 3,
    ERROR_SERVER_TOO_BUSY = 4,
    ERROR_INVALID_REQUEST = 5,
    ERROR_REQUEST_STALE = 6,
    FATAL_SERVER_SHUTTING_DOWN = 11,
    FATAL_INVALID_RPC_HEADER = 12,
    FATAL_DESERIALIZING_REQUEST = 13,
    FATAL_VERSION_MISMATCH = 14,
    FATAL_UNAUTHORIZED = 15,
}

impl ::protobuf::ProtobufEnum for ErrorStatusPB_RpcErrorCodePB {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ErrorStatusPB_RpcErrorCodePB> {
        match value {
            10 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_UNKNOWN),
            1 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_APPLICATION),
            2 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_NO_SUCH_METHOD),
            3 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_NO_SUCH_SERVICE),
            4 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_SERVER_TOO_BUSY),
            5 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_INVALID_REQUEST),
            6 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::ERROR_REQUEST_STALE),
            11 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_SERVER_SHUTTING_DOWN),
            12 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_INVALID_RPC_HEADER),
            13 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_DESERIALIZING_REQUEST),
            14 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_VERSION_MISMATCH),
            15 => ::std::option::Option::Some(ErrorStatusPB_RpcErrorCodePB::FATAL_UNAUTHORIZED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ErrorStatusPB_RpcErrorCodePB] = &[
            ErrorStatusPB_RpcErrorCodePB::FATAL_UNKNOWN,
            ErrorStatusPB_RpcErrorCodePB::ERROR_APPLICATION,
            ErrorStatusPB_RpcErrorCodePB::ERROR_NO_SUCH_METHOD,
            ErrorStatusPB_RpcErrorCodePB::ERROR_NO_SUCH_SERVICE,
            ErrorStatusPB_RpcErrorCodePB::ERROR_SERVER_TOO_BUSY,
            ErrorStatusPB_RpcErrorCodePB::ERROR_INVALID_REQUEST,
            ErrorStatusPB_RpcErrorCodePB::ERROR_REQUEST_STALE,
            ErrorStatusPB_RpcErrorCodePB::FATAL_SERVER_SHUTTING_DOWN,
            ErrorStatusPB_RpcErrorCodePB::FATAL_INVALID_RPC_HEADER,
            ErrorStatusPB_RpcErrorCodePB::FATAL_DESERIALIZING_REQUEST,
            ErrorStatusPB_RpcErrorCodePB::FATAL_VERSION_MISMATCH,
            ErrorStatusPB_RpcErrorCodePB::FATAL_UNAUTHORIZED,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ErrorStatusPB_RpcErrorCodePB>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ErrorStatusPB_RpcErrorCodePB", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ErrorStatusPB_RpcErrorCodePB {
}

impl ::protobuf::reflect::ProtobufValue for ErrorStatusPB_RpcErrorCodePB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RpcFeatureFlag {
    UNKNOWN = 0,
    APPLICATION_FEATURE_FLAGS = 1,
}

impl ::protobuf::ProtobufEnum for RpcFeatureFlag {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RpcFeatureFlag> {
        match value {
            0 => ::std::option::Option::Some(RpcFeatureFlag::UNKNOWN),
            1 => ::std::option::Option::Some(RpcFeatureFlag::APPLICATION_FEATURE_FLAGS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RpcFeatureFlag] = &[
            RpcFeatureFlag::UNKNOWN,
            RpcFeatureFlag::APPLICATION_FEATURE_FLAGS,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<RpcFeatureFlag>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RpcFeatureFlag", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RpcFeatureFlag {
}

impl ::protobuf::reflect::ProtobufValue for RpcFeatureFlag {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x19, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x68,
    0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
    0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x75, 0x74,
    0x69, 0x6c, 0x2f, 0x70, 0x62, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x22, 0x3e, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11, 0x0a,
    0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
    0x22, 0x50, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
    0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x42, 0x12, 0x39, 0x0a, 0x14, 0x44, 0x45, 0x50, 0x52, 0x45,
    0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63,
    0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x50, 0x42, 0x22, 0xe7, 0x02, 0x0a, 0x0d, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
    0x67, 0x65, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
    0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
    0x32, 0x18, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x46,
    0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74,
    0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x64, 0x75,
    0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
    0x50, 0x42, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05,
    0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18,
    0x01, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
    0x32, 0x20, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x61, 0x73, 0x6c,
    0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42, 0x2e, 0x53, 0x61, 0x73, 0x6c, 0x41, 0x75,
    0x74, 0x68, 0x1a, 0x46, 0x0a, 0x08, 0x53, 0x61, 0x73, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0e,
    0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x12, 0x11,
    0x0a, 0x09, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28,
    0x09, 0x12, 0x17, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x05,
    0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x88, 0xb5, 0x18, 0x01, 0x22, 0x60, 0x0a, 0x09, 0x53, 0x61,
    0x73, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
    0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
    0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10,
    0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
    0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0c,
    0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x22, 0x3b, 0x0a, 0x0e,
    0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x42, 0x12, 0x14,
    0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
    0x20, 0x02, 0x28, 0x09, 0x12, 0x13, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e,
    0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x22, 0x65, 0x0a, 0x0b, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
    0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x0e, 0x0a, 0x06, 0x73,
    0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x12, 0x1f, 0x0a, 0x17, 0x66,
    0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
    0x73, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x03, 0x12, 0x12, 0x0a, 0x0a,
    0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
    0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
    0x65, 0x72, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
    0x02, 0x28, 0x05, 0x12, 0x2f, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x65,
    0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
    0x6f, 0x64, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
    0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x1e, 0x0a, 0x16,
    0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
    0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x12, 0x29, 0x0a, 0x0a,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x15, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x49, 0x64, 0x50, 0x42, 0x22, 0x53, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x07, 0x63, 0x61, 0x6c,
    0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x12, 0x17, 0x0a, 0x08, 0x69, 0x73,
    0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
    0x6c, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x6f,
    0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x22, 0xd7, 0x03, 0x0a,
    0x0d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x12, 0x0f,
    0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12,
    0x34, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
    0x6f, 0x64, 0x65, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x19, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
    0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x61,
    0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x22, 0xd1, 0x02, 0x0a, 0x0e, 0x52, 0x70, 0x63,
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x0d, 0x46,
    0x41, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x12, 0x15,
    0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
    0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
    0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x02, 0x12,
    0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48,
    0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
    0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x42,
    0x55, 0x53, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
    0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05,
    0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
    0x54, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x54,
    0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49,
    0x4e, 0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x54,
    0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x48,
    0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x41, 0x54, 0x41, 0x4c,
    0x5f, 0x44, 0x45, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x52,
    0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x54, 0x41,
    0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54,
    0x43, 0x48, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x55, 0x4e,
    0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0f, 0x2a, 0x08, 0x08, 0x64,
    0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x2a, 0x3c, 0x0a, 0x0e, 0x52, 0x70, 0x63, 0x46, 0x65, 0x61,
    0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
    0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41,
    0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41,
    0x47, 0x53, 0x10, 0x01, 0x3a, 0x41, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x70,
    0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0xd6, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08,
    0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
    0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x42, 0x17, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x61,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72, 0x70, 0x63, 0x48, 0x01,
    0x4a, 0xc7, 0x53, 0x0a, 0x07, 0x12, 0x05, 0x11, 0x00, 0x85, 0x02, 0x01, 0x0a, 0x08, 0x0a, 0x01,
    0x08, 0x12, 0x03, 0x11, 0x00, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x11, 0x00, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x11, 0x07,
    0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x11, 0x07, 0x13,
    0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x11, 0x07, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x11, 0x16, 0x1b, 0x0a, 0x08,
    0x0a, 0x01, 0x02, 0x12, 0x03, 0x13, 0x08, 0x10, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x15,
    0x00, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12, 0x03, 0x15, 0x00, 0x2c, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0d, 0x0a,
    0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07,
    0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05,
    0x08, 0xe7, 0x07, 0x01, 0x07, 0x12, 0x03, 0x15, 0x16, 0x2b, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00,
    0x12, 0x03, 0x17, 0x07, 0x29, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x18, 0x07, 0x20,
    0x0a, 0x5b, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x22, 0x00, 0x25, 0x01, 0x1a, 0x4f, 0x20, 0x55,
    0x73, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x20, 0x20, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
    0x20, 0x69, 0x6e, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
    0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x42, 0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x65, 0x74, 0x75, 0x70, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x22, 0x08, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x23, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x23, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x23,
    0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x23, 0x12, 0x20,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x23, 0x23, 0x24, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x24, 0x02, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x24, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x05, 0x12, 0x03, 0x24, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x24, 0x12, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x24, 0x1e, 0x1f, 0x0a, 0xb8, 0x02, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x2e, 0x00, 0x37, 0x01,
    0x1a, 0xab, 0x02, 0x2a, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x69, 0x73, 0x20,
    0x73, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65,
    0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x20, 0x49,
    0x74, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x41, 0x4c,
    0x4c, 0x20, 0x52, 0x50, 0x43, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74,
    0x20, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73,
    0x65, 0x74, 0x75, 0x70, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x61, 0x6d, 0x62,
    0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x53, 0x41, 0x53, 0x4c, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x6e, 0x65,
    0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x4e, 0x6f, 0x20, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x66,
    0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74,
    0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x0a,
    0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x2e, 0x08, 0x1b, 0x0a, 0xd6, 0x02, 0x0a, 0x04, 0x04,
    0x01, 0x02, 0x00, 0x12, 0x03, 0x36, 0x02, 0x36, 0x1a, 0xc8, 0x02, 0x20, 0x55, 0x73, 0x65, 0x72,
    0x49, 0x6e, 0x66, 0x6f, 0x20, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x61, 0x74,
    0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61,
    0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
    0x74, 0x79, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x0a, 0x20, 0x61, 0x74,
    0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x28, 0x6b, 0x65, 0x72, 0x62, 0x65, 0x72, 0x6f, 0x73, 0x2c, 0x20, 0x74, 0x6f, 0x6b, 0x65,
    0x6e, 0x73, 0x20, 0x65, 0x74, 0x63, 0x29, 0x2e, 0x0a, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45,
    0x43, 0x41, 0x54, 0x45, 0x44, 0x3a, 0x20, 0x4e, 0x6f, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x75, 0x64, 0x75, 0x20, 0x31, 0x2e,
    0x31, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x27, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x27, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x20, 0x66, 0x72,
    0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20, 0x6e, 0x65, 0x67, 0x6f,
    0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x20, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73,
    0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x29, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x65, 0x76,
    0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x73, 0x6f,
    0x20, 0x77, 0x65, 0x27, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20,
    0x61, 0x64, 0x64, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x61, 0x74,
    0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6c, 0x61, 0x74, 0x65,
    0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x36, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x36, 0x0b, 0x1c, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x36, 0x1d, 0x31, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x36, 0x34, 0x35, 0x0a, 0x85, 0x04, 0x0a, 0x02,
    0x05, 0x00, 0x12, 0x04, 0x43, 0x00, 0x49, 0x01, 0x1a, 0xf8, 0x03, 0x20, 0x46, 0x65, 0x61, 0x74,
    0x75, 0x72, 0x65, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x20, 0x62,
    0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
    0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
    0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76, 0x6f, 0x6c,
    0x76, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x5f, 0x73, 0x79, 0x73, 0x74,
    0x65, 0x6d, 0x5f, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6d,
    0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
    0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x64, 0x69,
    0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x20,
    0x46, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20,
    0x77, 0x65, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61,
    0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x63, 0x61,
    0x6c, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x77,
    0x69, 0x72, 0x65, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
    0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20,
    0x77, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x20, 0x66,
    0x6c, 0x61, 0x67, 0x20, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64, 0x69,
    0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x63,
    0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
    0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x65,
    0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
    0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x73, 0x61, 0x66, 0x65, 0x6c, 0x79, 0x20, 0x62, 0x65, 0x0a, 0x20, 0x69, 0x67,
    0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x63,
    0x65, 0x69, 0x76, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6e, 0x65, 0x65,
    0x64, 0x20, 0x61, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
    0x2c, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x65,
    0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75,
    0x66, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x43, 0x05, 0x13, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x44, 0x02, 0x0e, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x44, 0x02, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x00, 0x02, 0x12, 0x03, 0x44, 0x0c, 0x0d, 0x0a, 0x74, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01,
    0x12, 0x03, 0x48, 0x02, 0x20, 0x1a, 0x67, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20,
    0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
    0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x70,
    0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
    0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x48, 0x02, 0x1b, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x48, 0x1e, 0x1f, 0x0a, 0x48, 0x0a, 0x02, 0x04, 0x02,
    0x12, 0x04, 0x4c, 0x00, 0x6c, 0x01, 0x1a, 0x3c, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
    0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63,
    0x6b, 0x20, 0x26, 0x20, 0x66, 0x6f, 0x72, 0x74, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x4c, 0x08, 0x15,
    0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02, 0x04, 0x00, 0x12, 0x04, 0x4d, 0x02, 0x54, 0x03, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x04, 0x00, 0x01, 0x12, 0x03, 0x4d, 0x07, 0x10, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x02, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x4e, 0x04, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x4e, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x4e, 0x10, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x02, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x4f, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x4f, 0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02,
    0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x4f, 0x10, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02,
    0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x50, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04,
    0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x50, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04,
    0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x50, 0x10, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04,
    0x00, 0x02, 0x03, 0x12, 0x03, 0x51, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00,
    0x02, 0x03, 0x01, 0x12, 0x03, 0x51, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x51, 0x10, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00,
    0x02, 0x04, 0x12, 0x03, 0x52, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02,
    0x04, 0x01, 0x12, 0x03, 0x52, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02,
    0x04, 0x02, 0x12, 0x03, 0x52, 0x10, 0x11, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x02, 0x04, 0x00, 0x02,
    0x05, 0x12, 0x03, 0x53, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x05,
    0x01, 0x12, 0x03, 0x53, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x04, 0x00, 0x02, 0x05,
    0x02, 0x12, 0x03, 0x53, 0x10, 0x11, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x02, 0x03, 0x00, 0x12, 0x04,
    0x56, 0x02, 0x5e, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x03, 0x00, 0x01, 0x12, 0x03, 0x56,
    0x0a, 0x12, 0x0a, 0x48, 0x0a, 0x06, 0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x57, 0x04,
    0x22, 0x22, 0x39, 0x20, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20,
    0x62, 0x75, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x27, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
    0x64, 0x27, 0x20, 0x69, 0x6e, 0x20, 0x4b, 0x75, 0x64, 0x75, 0x20, 0x30, 0x2e, 0x35, 0x2e, 0x30,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x30, 0x2e, 0x36, 0x2e, 0x30, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x57, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x57, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x57, 0x14, 0x1a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x57, 0x20, 0x21, 0x0a, 0x48, 0x0a, 0x06,
    0x04, 0x02, 0x03, 0x00, 0x02, 0x01, 0x12, 0x03, 0x58, 0x04, 0x22, 0x22, 0x39, 0x20, 0x53, 0x74,
    0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20, 0x6d, 0x65, 0x63, 0x68,
    0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x41, 0x4e, 0x4f, 0x4e,
    0x59, 0x4d, 0x4f, 0x55, 0x53, 0x2c, 0x20, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x2c, 0x20, 0x47, 0x53,
    0x53, 0x41, 0x50, 0x49, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x03, 0x58, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x58, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x58, 0x14, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x58, 0x20, 0x21, 0x0a, 0xef, 0x01, 0x0a, 0x06, 0x04, 0x02, 0x03, 0x00, 0x02,
    0x02, 0x12, 0x03, 0x5d, 0x04, 0x33, 0x1a, 0xdf, 0x01, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20, 0x63,
    0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66,
    0x72, 0x6f, 0x6d, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65,
    0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65,
    0x74, 0x68, 0x6f, 0x64, 0x2e, 0x0a, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x69, 0x73, 0x20, 0x70, 0x69, 0x67, 0x67, 0x79, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e,
    0x67, 0x20, 0x61, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x6e,
    0x20, 0x61, 0x20, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x20, 0x72, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73,
    0x65, 0x2c, 0x20, 0x53, 0x61, 0x73, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x42,
    0x3a, 0x3a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
    0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
    0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x04, 0x12, 0x03, 0x5d, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x05, 0x12, 0x03, 0x5d, 0x0d, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x5d, 0x13, 0x1c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x03, 0x12, 0x03, 0x5d, 0x1f, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x08, 0x12, 0x03, 0x5d, 0x21, 0x32, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x02, 0x03, 0x00,
    0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x5d, 0x22, 0x31, 0x0a, 0x12, 0x0a, 0x0b, 0x04,
    0x02, 0x03, 0x00, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x5d, 0x22, 0x2a, 0x0a,
    0x13, 0x0a, 0x0c, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12,
    0x03, 0x5d, 0x22, 0x2a, 0x0a, 0x14, 0x0a, 0x0d, 0x04, 0x02, 0x03, 0x00, 0x02, 0x02, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x5d, 0x23, 0x29, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x02,
    0x03, 0x00, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x5d, 0x2d, 0x31, 0x0a, 0xa7,
    0x04, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x67, 0x02, 0x31, 0x1a, 0x99, 0x04, 0x20,
    0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20,
    0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
    0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20,
    0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
    0x0a, 0x20, 0x52, 0x50, 0x43, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x66, 0x65, 0x61,
    0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x20, 0x49, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x73, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x69, 0x74,
    0x73, 0x20, 0x6f, 0x77, 0x6e, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x6c,
    0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x70, 0x65, 0x65, 0x72,
    0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x77, 0x68,
    0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x65, 0x77, 0x65, 0x72, 0x20, 0x65, 0x78, 0x74, 0x65,
    0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x52,
    0x50, 0x43, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f,
    0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x57, 0x65, 0x20, 0x75, 0x73, 0x65,
    0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75,
    0x72, 0x65, 0x73, 0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x0a,
    0x20, 0x61, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65,
    0x20, 0x69, 0x74, 0x20, 0x65, 0x61, 0x73, 0x69, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x43, 0x2b, 0x2b, 0x20,
    0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65,
    0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x69,
    0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x64, 0x65,
    0x72, 0x73, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
    0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65, 0x6c,
    0x6c, 0x20, 0x61, 0x73, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66,
    0x79, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
    0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x66,
    0x2d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00,
    0x04, 0x12, 0x03, 0x67, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x67, 0x0b, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x67,
    0x1a, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x67, 0x2f, 0x30,
    0x0a, 0x25, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03, 0x69, 0x02, 0x1f, 0x22, 0x18, 0x20,
    0x52, 0x50, 0x43, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20,
    0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x04,
    0x12, 0x03, 0x69, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x06, 0x12, 0x03,
    0x69, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12, 0x03, 0x69, 0x15,
    0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x69, 0x1d, 0x1e, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x6a, 0x02, 0x32, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x6a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x02, 0x05, 0x12, 0x03, 0x6a, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x6a, 0x11, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12,
    0x03, 0x6a, 0x1d, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x08, 0x12, 0x03, 0x6a,
    0x20, 0x31, 0x0a, 0x0f, 0x0a, 0x08, 0x04, 0x02, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x6a, 0x21, 0x30, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x02, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x02,
    0x12, 0x03, 0x6a, 0x21, 0x29, 0x0a, 0x11, 0x0a, 0x0a, 0x04, 0x02, 0x02, 0x02, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x6a, 0x21, 0x29, 0x0a, 0x12, 0x0a, 0x0b, 0x04, 0x02, 0x02, 0x02,
    0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x6a, 0x22, 0x28, 0x0a, 0x10, 0x0a, 0x09,
    0x04, 0x02, 0x02, 0x02, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x6a, 0x2c, 0x30, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x6b, 0x02, 0x1f, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x03, 0x04, 0x12, 0x03, 0x6b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x03, 0x06, 0x12, 0x03, 0x6b, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x6b, 0x14, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x6b, 0x1d, 0x1e, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x04, 0x6e, 0x00, 0x76, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x6e, 0x08, 0x16, 0x0a, 0x8c, 0x01, 0x0a, 0x04,
    0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x72, 0x02, 0x23, 0x1a, 0x7f, 0x20, 0x53, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x52, 0x50, 0x43, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20,
    0x61, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x0a,
    0x20, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x72,
    0x70, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
    0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x04, 0x12, 0x03, 0x72, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x05, 0x12, 0x03, 0x72, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x72, 0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x72,
    0x21, 0x22, 0x0a, 0x26, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12, 0x03, 0x75, 0x02, 0x22, 0x1a,
    0x19, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50,
    0x43, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x01, 0x04, 0x12, 0x03, 0x75, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x75, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x75, 0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x75,
    0x20, 0x21, 0x0a, 0xc6, 0x01, 0x0a, 0x02, 0x04, 0x04, 0x12, 0x05, 0x7a, 0x00, 0x88, 0x01, 0x01,
    0x1a, 0xb8, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x49, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
    0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x52, 0x50, 0x43, 0x2c, 0x20, 0x77,
    0x68, 0x6f, 0x73, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f,
    0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x6f,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x28, 0x73, 0x65,
    0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
    0x2e, 0x68, 0x29, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20,
    0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e,
    0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69,
    0x73, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x20, 0x63,
    0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04,
    0x04, 0x01, 0x12, 0x03, 0x7a, 0x08, 0x13, 0x0a, 0x4a, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12,
    0x03, 0x7c, 0x02, 0x20, 0x1a, 0x3d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x28, 0x67, 0x6c, 0x6f, 0x62,
    0x61, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x29, 0x20, 0x69, 0x64, 0x20,
    0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x65,
    0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x52, 0x50,
    0x43, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x03, 0x7c, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x05, 0x12, 0x03, 0x7c, 0x0b, 0x11, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x03, 0x7c, 0x12, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x03, 0x7c, 0x1e, 0x1f, 0x0a, 0x43, 0x0a, 0x04, 0x04,
    0x04, 0x02, 0x01, 0x12, 0x03, 0x7f, 0x02, 0x1c, 0x1a, 0x36, 0x20, 0x54, 0x68, 0x65, 0x20, 0x28,
    0x70, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75,
    0x65, 0x29, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
    0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x52, 0x50, 0x43, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12, 0x03, 0x7f, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x05, 0x12, 0x03, 0x7f, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x01, 0x01, 0x12, 0x03, 0x7f, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x04,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x7f, 0x1a, 0x1b, 0x0a, 0x93, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x02,
    0x02, 0x12, 0x04, 0x83, 0x01, 0x02, 0x2d, 0x1a, 0x84, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
    0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x52, 0x50, 0x43, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x65,
    0x6e, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70,
    0x6c, 0x65, 0x74, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
    0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x20, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x20, 0x69, 0x66, 0x20, 0x74,
    0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e,
    0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x52, 0x50, 0x43, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x04, 0x83, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12, 0x04, 0x83, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x04, 0x83, 0x01, 0x11, 0x28, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x04, 0x02, 0x02, 0x03, 0x12, 0x04, 0x83, 0x01, 0x2b, 0x2c, 0x0a, 0x5c, 0x0a, 0x04, 0x04, 0x04,
    0x02, 0x03, 0x12, 0x04, 0x87, 0x01, 0x02, 0x20, 0x1a, 0x4e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x52, 0x50, 0x43, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e,
    0x20, 0x74, 0x72, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20,
    0x31, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x61,
    0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03,
    0x04, 0x12, 0x04, 0x87, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x05,
    0x12, 0x04, 0x87, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x01, 0x12,
    0x04, 0x87, 0x01, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x03, 0x03, 0x12, 0x04,
    0x87, 0x01, 0x1e, 0x1f, 0x0a, 0x35, 0x0a, 0x02, 0x04, 0x05, 0x12, 0x06, 0x8b, 0x01, 0x00, 0xb5,
    0x01, 0x01, 0x1a, 0x27, 0x20, 0x54, 0x68, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x72, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x05, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x08, 0x15, 0x0a, 0x94, 0x04, 0x0a, 0x04, 0x04, 0x05, 0x02,
    0x00, 0x12, 0x04, 0x96, 0x01, 0x02, 0x1d, 0x1a, 0x85, 0x04, 0x20, 0x41, 0x20, 0x73, 0x65, 0x71,
    0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61,
    0x74, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6c, 0x79, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74,
    0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f, 0x20,
    0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6e, 0x75, 0x6d,
    0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x0a, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x62, 0x61, 0x63,
    0x6b, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x6f, 0x20,
    0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x2e, 0x0a, 0x20, 0x48, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x65, 0x73, 0x20, 0x61, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x63, 0x61, 0x73, 0x74, 0x73, 0x20, 0x69, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x73,
    0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x61, 0x74, 0x20,
    0x69, 0x73, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x74, 0x75, 0x69, 0x74,
    0x69, 0x76, 0x65, 0x2c, 0x20, 0x73, 0x6f, 0x20, 0x77, 0x65, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61,
    0x6e, 0x0a, 0x20, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64,
    0x2e, 0x20, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
    0x20, 0x28, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d,
    0x20, 0x48, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x29, 0x3a, 0x0a, 0x20, 0x20, 0x20, 0x30, 0x20, 0x74,
    0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x5f, 0x4d, 0x41, 0x58,
    0x3a, 0x20, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x52, 0x50, 0x43, 0x20, 0x63, 0x61,
    0x6c, 0x6c, 0x20, 0x49, 0x44, 0x73, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x32, 0x3a, 0x20, 0x49,
    0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x49, 0x44, 0x2e, 0x0a,
    0x20, 0x20, 0x20, 0x2d, 0x33, 0x3a, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x20, 0x49,
    0x44, 0x2e, 0x0a, 0x20, 0x20, 0x20, 0x2d, 0x33, 0x33, 0x3a, 0x20, 0x53, 0x41, 0x53, 0x4c, 0x20,
    0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c,
    0x20, 0x49, 0x44, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x45, 0x3a, 0x20, 0x74, 0x68, 0x65,
    0x73, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65,
    0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x67, 0x61, 0x70, 0x73, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x04, 0x12, 0x04, 0x96, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x00, 0x05, 0x12, 0x04, 0x96, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x00, 0x01, 0x12, 0x04, 0x96, 0x01, 0x11, 0x18, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x00, 0x03, 0x12, 0x04, 0x96, 0x01, 0x1b, 0x1c, 0x0a, 0x51, 0x0a, 0x04, 0x04,
    0x05, 0x02, 0x01, 0x12, 0x04, 0x9a, 0x01, 0x02, 0x2c, 0x1a, 0x43, 0x20, 0x52, 0x50, 0x43, 0x20,
    0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x76,
    0x6f, 0x6b, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x22, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x73, 0x65, 0x74, 0x75, 0x70, 0x22, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x05, 0x02, 0x01, 0x04, 0x12, 0x04, 0x9a, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x05, 0x02, 0x01, 0x06, 0x12, 0x04, 0x9a, 0x01, 0x0b, 0x19, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x05, 0x02, 0x01, 0x01, 0x12, 0x04, 0x9a, 0x01, 0x1a, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x05, 0x02, 0x01, 0x03, 0x12, 0x04, 0x9a, 0x01, 0x2a, 0x2b, 0x0a, 0xf8, 0x01, 0x0a, 0x04, 0x04,
    0x05, 0x02, 0x02, 0x12, 0x04, 0x9f, 0x01, 0x02, 0x26, 0x1a, 0xe9, 0x01, 0x20, 0x50, 0x72, 0x6f,
    0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f,
    0x75, 0x74, 0x20, 0x61, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x20, 0x4e, 0x6f, 0x74,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x0a, 0x20, 0x74, 0x72, 0x61,
    0x6e, 0x73, 0x69, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20,
    0x77, 0x61, 0x69, 0x74, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x74, 0x69, 0x6d,
    0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x64, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6c, 0x69, 0x6b, 0x65,
    0x6c, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
    0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x04, 0x12, 0x04,
    0x9f, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x05, 0x12, 0x04, 0x9f,
    0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x04, 0x9f, 0x01,
    0x12, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x04, 0x9f, 0x01, 0x23,
    0x25, 0x0a, 0xee, 0x03, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x03, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x2e,
    0x1a, 0xdf, 0x03, 0x20, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
    0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20,
    0x69, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x70,
    0x65, 0x72, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x61, 0x73,
    0x73, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6c, 0x61,
    0x67, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x6e, 0x27, 0x74, 0x0a, 0x20, 0x73,
    0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x6d, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x66, 0x61, 0x69, 0x6c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x45, 0x3a, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65,
    0x20, 0x61, 0x72, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x76, 0x6f, 0x6c, 0x76, 0x69, 0x6e,
    0x67, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61,
    0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x0a,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
    0x72, 0x6b, 0x2e, 0x20, 0x48, 0x65, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x77, 0x65, 0x20, 0x68, 0x61,
    0x76, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x67, 0x65, 0x6e, 0x65,
    0x72, 0x69, 0x63, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x72, 0x61, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x61, 0x0a, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x0a, 0x20, 0x4e, 0x4f,
    0x54, 0x45, 0x3a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
    0x65, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x66,
    0x20, 0x69, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65,
    0x0a, 0x20, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x45,
    0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x20, 0x66, 0x6c, 0x61, 0x67,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x04, 0x12, 0x04, 0xaa, 0x01, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x05, 0x12, 0x04, 0xaa, 0x01, 0x0b, 0x11,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x12, 0x28, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x03, 0x03, 0x12, 0x04, 0xaa, 0x01, 0x2b, 0x2d, 0x0a, 0xb4,
    0x04, 0x0a, 0x04, 0x04, 0x05, 0x02, 0x04, 0x12, 0x04, 0xb4, 0x01, 0x02, 0x27, 0x1a, 0xa5, 0x04,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20,
    0x69, 0x66, 0x20, 0x69, 0x74, 0x27, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x61, 0x62, 0x6c,
    0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74,
    0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75,
    0x65, 0x20, 0x70, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x72, 0x65, 0x74, 0x72,
    0x69, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20,
    0x52, 0x50, 0x43, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x0a, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20,
    0x69, 0x64, 0x2e, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
    0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x27, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x27, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
    0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61,
    0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x61, 0x0a,
    0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75,
    0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x63,
    0x61, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x20,
    0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65,
    0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x0a,
    0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61,
    0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
    0x72, 0x29, 0x2e, 0x0a, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x61, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x64,
    0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
    0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x6f, 0x6c, 0x64, 0x65,
    0x72, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x65, 0x20,
    0x6e, 0x6f, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x04, 0x04, 0x12, 0x04,
    0xb4, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x04, 0x06, 0x12, 0x04, 0xb4,
    0x01, 0x0b, 0x16, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x04, 0x01, 0x12, 0x04, 0xb4, 0x01,
    0x17, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x05, 0x02, 0x04, 0x03, 0x12, 0x04, 0xb4, 0x01, 0x24,
    0x26, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x06, 0xb7, 0x01, 0x00, 0xc4, 0x01, 0x01, 0x0a,
    0x0b, 0x0a, 0x03, 0x04, 0x06, 0x01, 0x12, 0x04, 0xb7, 0x01, 0x08, 0x16, 0x0a, 0x0c, 0x0a, 0x04,
    0x04, 0x06, 0x02, 0x00, 0x12, 0x04, 0xb8, 0x01, 0x02, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06,
    0x02, 0x00, 0x04, 0x12, 0x04, 0xb8, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02,
    0x00, 0x05, 0x12, 0x04, 0xb8, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00,
    0x01, 0x12, 0x04, 0xb8, 0x01, 0x11, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03,
    0x12, 0x04, 0xb8, 0x01, 0x1b, 0x1c, 0x0a, 0x9f, 0x01, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x01, 0x12,
    0x04, 0xbd, 0x01, 0x02, 0x31, 0x1a, 0x90, 0x01, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x79, 0x70,
    0x65, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x20,
    0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01,
    0x04, 0x12, 0x04, 0xbd, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x05,
    0x12, 0x04, 0xbd, 0x01, 0x0b, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x01, 0x12,
    0x04, 0xbd, 0x01, 0x10, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x03, 0x12, 0x04,
    0xbd, 0x01, 0x1b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x08, 0x12, 0x04, 0xbd,
    0x01, 0x1d, 0x30, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01, 0x07, 0x12, 0x04, 0xbd, 0x01,
    0x29, 0x2e, 0x0a, 0xcf, 0x01, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x02, 0x12, 0x04, 0xc2, 0x01, 0x02,
    0x26, 0x1a, 0xc0, 0x01, 0x20, 0x42, 0x79, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
    0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x63, 0x61, 0x72, 0x73, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x62, 0x6f, 0x64, 0x79,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65,
    0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x75,
    0x6e, 0x74, 0x65, 0x64, 0x20, 0x41, 0x46, 0x54, 0x45, 0x52, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d,
    0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2c, 0x20, 0x69,
    0x2e, 0x65, 0x2e, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x30, 0x0a, 0x20, 0x69,
    0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x62, 0x79, 0x74, 0x65,
    0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
    0x75, 0x66, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x04, 0x12, 0x04, 0xc2,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x05, 0x12, 0x04, 0xc2, 0x01,
    0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x01, 0x12, 0x04, 0xc2, 0x01, 0x12,
    0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x02, 0x03, 0x12, 0x04, 0xc2, 0x01, 0x24, 0x25,
    0x0a, 0x37, 0x0a, 0x02, 0x04, 0x07, 0x12, 0x06, 0xc7, 0x01, 0x00, 0xff, 0x01, 0x01, 0x1a, 0x29,
    0x20, 0x53, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
    0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
    0x3d, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x07, 0x01,
    0x12, 0x04, 0xc7, 0x01, 0x08, 0x15, 0x0a, 0x52, 0x0a, 0x04, 0x04, 0x07, 0x04, 0x00, 0x12, 0x06,
    0xca, 0x01, 0x02, 0xf0, 0x01, 0x03, 0x1a, 0x42, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x63,
    0x6f, 0x64, 0x65, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x62, 0x65,
    0x65, 0x6e, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
    0x6d, 0x20, 0x48, 0x61, 0x64, 0x6f, 0x6f, 0x70, 0x27, 0x73, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6d,
    0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x04, 0x00, 0x01, 0x12, 0x04, 0xca, 0x01, 0x07, 0x15, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x07, 0x04,
    0x00, 0x02, 0x00, 0x12, 0x04, 0xcb, 0x01, 0x04, 0x17, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0xcb, 0x01, 0x04, 0x11, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07,
    0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0xcb, 0x01, 0x14, 0x16, 0x0a, 0xef, 0x01, 0x0a, 0x06,
    0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x12, 0x04, 0xd1, 0x01, 0x04, 0x1a, 0x1a, 0xde, 0x01, 0x20,
    0x4e, 0x6f, 0x6e, 0x2d, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x20, 0x52, 0x50, 0x43, 0x20, 0x65, 0x72,
    0x72, 0x6f, 0x72, 0x73, 0x2e, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20,
    0x6f, 0x70, 0x65, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x20,
    0x52, 0x50, 0x43, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x2e, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x61, 0x70, 0x70,
    0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
    0x65, 0x64, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x61, 0x74,
    0x75, 0x73, 0x2e, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x6d,
    0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a,
    0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x04, 0xd1, 0x01, 0x04, 0x15, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x04, 0xd1, 0x01, 0x18, 0x19, 0x0a,
    0x35, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x02, 0x12, 0x04, 0xd4, 0x01, 0x04, 0x1d, 0x1a,
    0x25, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
    0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x76,
    0x61, 0x6c, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x02,
    0x01, 0x12, 0x04, 0xd4, 0x01, 0x04, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02,
    0x02, 0x02, 0x12, 0x04, 0xd4, 0x01, 0x1b, 0x1c, 0x0a, 0x36, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00,
    0x02, 0x03, 0x12, 0x04, 0xd7, 0x01, 0x04, 0x1e, 0x1a, 0x26, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
    0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x04, 0xd7, 0x01, 0x04,
    0x19, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x04, 0xd7, 0x01,
    0x1c, 0x1d, 0x0a, 0x51, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x04, 0x12, 0x04, 0xda, 0x01,
    0x04, 0x1e, 0x1a, 0x41, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
    0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x2d, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
    0x64, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x73, 0x68, 0x6f, 0x72,
    0x74, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x04, 0x01,
    0x12, 0x04, 0xda, 0x01, 0x04, 0x19, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x04,
    0x02, 0x12, 0x04, 0xda, 0x01, 0x1c, 0x1d, 0x0a, 0x94, 0x01, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00,
    0x02, 0x05, 0x12, 0x04, 0xde, 0x01, 0x04, 0x1e, 0x1a, 0x83, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
    0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x70, 0x61, 0x72, 0x73, 0x65, 0x61,
    0x62, 0x6c, 0x65, 0x2c, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
    0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
    0x2c, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x66,
    0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x0a, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x04, 0xde, 0x01, 0x04, 0x19, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x04, 0xde, 0x01, 0x1c, 0x1d,
    0x0a, 0xa6, 0x01, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x06, 0x12, 0x04, 0xe2, 0x01, 0x04,
    0x1c, 0x1a, 0x95, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20,
    0x6d, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69,
    0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x75, 0x74, 0x20,
    0x69, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20,
    0x6e, 0x6f, 0x0a, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65,
    0x64, 0x2e, 0x20, 0x49, 0x74, 0x27, 0x73, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x20,
    0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
    0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04,
    0x00, 0x02, 0x06, 0x01, 0x12, 0x04, 0xe2, 0x01, 0x04, 0x17, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07,
    0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x04, 0xe2, 0x01, 0x1a, 0x1b, 0x0a, 0xc2, 0x01, 0x0a, 0x06,
    0x04, 0x07, 0x04, 0x00, 0x02, 0x07, 0x12, 0x04, 0xe7, 0x01, 0x04, 0x24, 0x1a, 0xb1, 0x01, 0x20,
    0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x2a, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x69,
    0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73,
    0x68, 0x75, 0x74, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e,
    0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
    0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
    0x20, 0x73, 0x68, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x0a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x04, 0xe7, 0x01, 0x04,
    0x1e, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x07, 0x02, 0x12, 0x04, 0xe7, 0x01,
    0x21, 0x23, 0x0a, 0x32, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x08, 0x12, 0x04, 0xe9, 0x01,
    0x04, 0x22, 0x1a, 0x22, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x52,
    0x70, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x76,
    0x61, 0x6c, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x08,
    0x01, 0x12, 0x04, 0xe9, 0x01, 0x04, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02,
    0x08, 0x02, 0x12, 0x04, 0xe9, 0x01, 0x1f, 0x21, 0x0a, 0x34, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00,
    0x02, 0x09, 0x12, 0x04, 0xeb, 0x01, 0x04, 0x25, 0x1a, 0x24, 0x20, 0x43, 0x6f, 0x75, 0x6c, 0x64,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
    0x20, 0x52, 0x50, 0x43, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0f,
    0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x09, 0x01, 0x12, 0x04, 0xeb, 0x01, 0x04, 0x1f, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x09, 0x02, 0x12, 0x04, 0xeb, 0x01, 0x22, 0x24,
    0x0a, 0x2d, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0a, 0x12, 0x04, 0xed, 0x01, 0x04, 0x20,
    0x1a, 0x1d, 0x20, 0x49, 0x50, 0x43, 0x20, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x0a, 0x0a,
    0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x04, 0xed, 0x01, 0x04, 0x1a,
    0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0a, 0x02, 0x12, 0x04, 0xed, 0x01, 0x1d,
    0x1f, 0x0a, 0x1e, 0x0a, 0x06, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0b, 0x12, 0x04, 0xef, 0x01, 0x04,
    0x1c, 0x1a, 0x0e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x2e,
    0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x04, 0xef, 0x01,
    0x04, 0x16, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x07, 0x04, 0x00, 0x02, 0x0b, 0x02, 0x12, 0x04, 0xef,
    0x01, 0x19, 0x1b, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x00, 0x12, 0x04, 0xf2, 0x01, 0x02,
    0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x04, 0x12, 0x04, 0xf2, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x05, 0x12, 0x04, 0xf2, 0x01, 0x0b, 0x11, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x01, 0x12, 0x04, 0xf2, 0x01, 0x12, 0x19, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x03, 0x12, 0x04, 0xf2, 0x01, 0x1c, 0x1d, 0x0a, 0x47, 0x0a,
    0x04, 0x04, 0x07, 0x02, 0x01, 0x12, 0x04, 0xf5, 0x01, 0x02, 0x23, 0x1a, 0x1b, 0x20, 0x54, 0x4f,
    0x44, 0x4f, 0x3a, 0x20, 0x4d, 0x61, 0x6b, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3f, 0x0a, 0x22, 0x1c, 0x20, 0x53, 0x70, 0x65, 0x63, 0x69,
    0x66, 0x69, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
    0x66, 0x69, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12,
    0x04, 0xf5, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x06, 0x12, 0x04,
    0xf5, 0x01, 0x0b, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x01, 0x12, 0x04, 0xf5,
    0x01, 0x1a, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x01, 0x03, 0x12, 0x04, 0xf5, 0x01,
    0x21, 0x22, 0x0a, 0x9e, 0x01, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x02, 0x12, 0x04, 0xf9, 0x01, 0x02,
    0x30, 0x1a, 0x8f, 0x01, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x64, 0x75,
    0x65, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
    0x74, 0x65, 0x64, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x67,
    0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x72,
    0x0a, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x28, 0x73, 0x29, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77,
    0x65, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
    0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x74, 0x20, 0x62,
    0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
    0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x04, 0x12, 0x04, 0xf9, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x05, 0x12, 0x04, 0xf9, 0x01, 0x0b,
    0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x01, 0x12, 0x04, 0xf9, 0x01, 0x12, 0x2b,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x03, 0x12, 0x04, 0xf9, 0x01, 0x2e, 0x2f, 0x0a,
    0xcc, 0x01, 0x0a, 0x03, 0x04, 0x07, 0x05, 0x12, 0x04, 0xfe, 0x01, 0x02, 0x18, 0x1a, 0xbe, 0x01,
    0x20, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
    0x73, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x52, 0x50, 0x43, 0x20,
    0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x50,
    0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x6c,
    0x73, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x20, 0x65, 0x78, 0x61, 0x63, 0x74,
    0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20,
    0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
    0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
    0x0a, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x6f,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x70,
    0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x04, 0x04, 0x07, 0x05, 0x00, 0x12, 0x04, 0xfe, 0x01, 0x0d, 0x17, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x07, 0x05, 0x00, 0x01, 0x12, 0x04, 0xfe, 0x01, 0x0d, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x05, 0x00, 0x02, 0x12, 0x04, 0xfe, 0x01, 0x14, 0x17, 0x0a, 0x86, 0x01, 0x0a, 0x01, 0x07,
    0x12, 0x06, 0x83, 0x02, 0x00, 0x85, 0x02, 0x01, 0x1a, 0x79, 0x20, 0x41, 0x6e, 0x20, 0x6f, 0x70,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6d, 0x65, 0x74,
    0x68, 0x6f, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
    0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x74, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x27, 0x73, 0x0a, 0x20, 0x52,
    0x50, 0x43, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
    0x64, 0x20, 0x62, 0x65, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x20, 0x61, 0x20, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
    0x72, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x02, 0x07, 0x00, 0x12, 0x04, 0x84, 0x02, 0x02, 0x39, 0x0a,
    0x0b, 0x0a, 0x03, 0x07, 0x00, 0x02, 0x12, 0x04, 0x83, 0x02, 0x07, 0x24, 0x0a, 0x0b, 0x0a, 0x03,
    0x07, 0x00, 0x04, 0x12, 0x04, 0x84, 0x02, 0x02, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x00, 0x05,
    0x12, 0x04, 0x84, 0x02, 0x0b, 0x0f, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x00, 0x01, 0x12, 0x04, 0x84,
    0x02, 0x10, 0x20, 0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x00, 0x03, 0x12, 0x04, 0x84, 0x02, 0x23, 0x28,
    0x0a, 0x0b, 0x0a, 0x03, 0x07, 0x00, 0x08, 0x12, 0x04, 0x84, 0x02, 0x29, 0x38, 0x0a, 0x0b, 0x0a,
    0x03, 0x07, 0x00, 0x07, 0x12, 0x04, 0x84, 0x02, 0x32, 0x37,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
