// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use std::io::Write;

use protobuf::CodedOutputStream;
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ChecksumRequestPB {
    // message fields
    new_request: ::protobuf::SingularPtrField<super::tserver::NewScanRequestPB>,
    continue_request: ::protobuf::SingularPtrField<ContinueChecksumRequestPB>,
    call_seq_id: ::std::option::Option<u32>,
    batch_size_bytes: ::std::option::Option<u32>,
    close_scanner: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ChecksumRequestPB {}

impl ChecksumRequestPB {
    pub fn new() -> ChecksumRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ChecksumRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<ChecksumRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChecksumRequestPB,
        };
        unsafe {
            instance.get(ChecksumRequestPB::new)
        }
    }

    // optional .kudu.tserver.NewScanRequestPB new_request = 1;

    pub fn clear_new_request(&mut self) {
        self.new_request.clear();
    }

    pub fn has_new_request(&self) -> bool {
        self.new_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_request(&mut self, v: super::tserver::NewScanRequestPB) {
        self.new_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_request(&mut self) -> &mut super::tserver::NewScanRequestPB {
        if self.new_request.is_none() {
            self.new_request.set_default();
        };
        self.new_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_request(&mut self) -> super::tserver::NewScanRequestPB {
        self.new_request.take().unwrap_or_else(|| super::tserver::NewScanRequestPB::new())
    }

    pub fn get_new_request(&self) -> &super::tserver::NewScanRequestPB {
        self.new_request.as_ref().unwrap_or_else(|| super::tserver::NewScanRequestPB::default_instance())
    }

    fn get_new_request_for_reflect(&self) -> &::protobuf::SingularPtrField<super::tserver::NewScanRequestPB> {
        &self.new_request
    }

    fn mut_new_request_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::tserver::NewScanRequestPB> {
        &mut self.new_request
    }

    // optional .kudu.tserver.ContinueChecksumRequestPB continue_request = 2;

    pub fn clear_continue_request(&mut self) {
        self.continue_request.clear();
    }

    pub fn has_continue_request(&self) -> bool {
        self.continue_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_continue_request(&mut self, v: ContinueChecksumRequestPB) {
        self.continue_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_continue_request(&mut self) -> &mut ContinueChecksumRequestPB {
        if self.continue_request.is_none() {
            self.continue_request.set_default();
        };
        self.continue_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_continue_request(&mut self) -> ContinueChecksumRequestPB {
        self.continue_request.take().unwrap_or_else(|| ContinueChecksumRequestPB::new())
    }

    pub fn get_continue_request(&self) -> &ContinueChecksumRequestPB {
        self.continue_request.as_ref().unwrap_or_else(|| ContinueChecksumRequestPB::default_instance())
    }

    fn get_continue_request_for_reflect(&self) -> &::protobuf::SingularPtrField<ContinueChecksumRequestPB> {
        &self.continue_request
    }

    fn mut_continue_request_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<ContinueChecksumRequestPB> {
        &mut self.continue_request
    }

    // optional uint32 call_seq_id = 3;

    pub fn clear_call_seq_id(&mut self) {
        self.call_seq_id = ::std::option::Option::None;
    }

    pub fn has_call_seq_id(&self) -> bool {
        self.call_seq_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_seq_id(&mut self, v: u32) {
        self.call_seq_id = ::std::option::Option::Some(v);
    }

    pub fn get_call_seq_id(&self) -> u32 {
        self.call_seq_id.unwrap_or(0)
    }

    fn get_call_seq_id_for_reflect(&self) -> &::std::option::Option<u32> {
        &self.call_seq_id
    }

    fn mut_call_seq_id_for_reflect(&mut self) -> &mut ::std::option::Option<u32> {
        &mut self.call_seq_id
    }

    // optional uint32 batch_size_bytes = 4;

    pub fn clear_batch_size_bytes(&mut self) {
        self.batch_size_bytes = ::std::option::Option::None;
    }

    pub fn has_batch_size_bytes(&self) -> bool {
        self.batch_size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_batch_size_bytes(&mut self, v: u32) {
        self.batch_size_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_batch_size_bytes(&self) -> u32 {
        self.batch_size_bytes.unwrap_or(0)
    }

    fn get_batch_size_bytes_for_reflect(&self) -> &::std::option::Option<u32> {
        &self.batch_size_bytes
    }

    fn mut_batch_size_bytes_for_reflect(&mut self) -> &mut ::std::option::Option<u32> {
        &mut self.batch_size_bytes
    }

    // optional bool close_scanner = 5;

    pub fn clear_close_scanner(&mut self) {
        self.close_scanner = ::std::option::Option::None;
    }

    pub fn has_close_scanner(&self) -> bool {
        self.close_scanner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_close_scanner(&mut self, v: bool) {
        self.close_scanner = ::std::option::Option::Some(v);
    }

    pub fn get_close_scanner(&self) -> bool {
        self.close_scanner.unwrap_or(false)
    }

    fn get_close_scanner_for_reflect(&self) -> &::std::option::Option<bool> {
        &self.close_scanner
    }

    fn mut_close_scanner_for_reflect(&mut self) -> &mut ::std::option::Option<bool> {
        &mut self.close_scanner
    }
}

impl ::protobuf::Message for ChecksumRequestPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.new_request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.continue_request)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint32()?;
                    self.call_seq_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint32()?;
                    self.batch_size_bytes = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.close_scanner = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.new_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.continue_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.call_seq_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.batch_size_bytes {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.close_scanner {
            my_size += 2;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.new_request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.continue_request.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.call_seq_id {
            os.write_uint32(3, v)?;
        };
        if let Some(v) = self.batch_size_bytes {
            os.write_uint32(4, v)?;
        };
        if let Some(v) = self.close_scanner {
            os.write_bool(5, v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ChecksumRequestPB {
    fn new() -> ChecksumRequestPB {
        ChecksumRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ChecksumRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tserver::NewScanRequestPB>>(
                    "new_request",
                    ChecksumRequestPB::get_new_request_for_reflect,
                    ChecksumRequestPB::mut_new_request_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContinueChecksumRequestPB>>(
                    "continue_request",
                    ChecksumRequestPB::get_continue_request_for_reflect,
                    ChecksumRequestPB::mut_continue_request_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "call_seq_id",
                    ChecksumRequestPB::get_call_seq_id_for_reflect,
                    ChecksumRequestPB::mut_call_seq_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "batch_size_bytes",
                    ChecksumRequestPB::get_batch_size_bytes_for_reflect,
                    ChecksumRequestPB::mut_batch_size_bytes_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "close_scanner",
                    ChecksumRequestPB::get_close_scanner_for_reflect,
                    ChecksumRequestPB::mut_close_scanner_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChecksumRequestPB>(
                    "ChecksumRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ChecksumRequestPB {
    fn clear(&mut self) {
        self.clear_new_request();
        self.clear_continue_request();
        self.clear_call_seq_id();
        self.clear_batch_size_bytes();
        self.clear_close_scanner();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChecksumRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChecksumRequestPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContinueChecksumRequestPB {
    // message fields
    scanner_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    previous_checksum: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ContinueChecksumRequestPB {}

impl ContinueChecksumRequestPB {
    pub fn new() -> ContinueChecksumRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ContinueChecksumRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<ContinueChecksumRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContinueChecksumRequestPB,
        };
        unsafe {
            instance.get(ContinueChecksumRequestPB::new)
        }
    }

    // required bytes scanner_id = 1;

    pub fn clear_scanner_id(&mut self) {
        self.scanner_id.clear();
    }

    pub fn has_scanner_id(&self) -> bool {
        self.scanner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scanner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.scanner_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scanner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.scanner_id.is_none() {
            self.scanner_id.set_default();
        };
        self.scanner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_scanner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.scanner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_scanner_id(&self) -> &[u8] {
        match self.scanner_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_scanner_id_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.scanner_id
    }

    fn mut_scanner_id_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.scanner_id
    }

    // required uint64 previous_checksum = 2;

    pub fn clear_previous_checksum(&mut self) {
        self.previous_checksum = ::std::option::Option::None;
    }

    pub fn has_previous_checksum(&self) -> bool {
        self.previous_checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_checksum(&mut self, v: u64) {
        self.previous_checksum = ::std::option::Option::Some(v);
    }

    pub fn get_previous_checksum(&self) -> u64 {
        self.previous_checksum.unwrap_or(0)
    }

    fn get_previous_checksum_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.previous_checksum
    }

    fn mut_previous_checksum_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.previous_checksum
    }
}

impl ::protobuf::Message for ContinueChecksumRequestPB {
    fn is_initialized(&self) -> bool {
        if self.scanner_id.is_none() {
            return false;
        };
        if self.previous_checksum.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.scanner_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.previous_checksum = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.scanner_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        };
        if let Some(v) = self.previous_checksum {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.scanner_id.as_ref() {
            os.write_bytes(1, &v)?;
        };
        if let Some(v) = self.previous_checksum {
            os.write_uint64(2, v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ContinueChecksumRequestPB {
    fn new() -> ContinueChecksumRequestPB {
        ContinueChecksumRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ContinueChecksumRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "scanner_id",
                    ContinueChecksumRequestPB::get_scanner_id_for_reflect,
                    ContinueChecksumRequestPB::mut_scanner_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "previous_checksum",
                    ContinueChecksumRequestPB::get_previous_checksum_for_reflect,
                    ContinueChecksumRequestPB::mut_previous_checksum_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContinueChecksumRequestPB>(
                    "ContinueChecksumRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ContinueChecksumRequestPB {
    fn clear(&mut self) {
        self.clear_scanner_id();
        self.clear_previous_checksum();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContinueChecksumRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContinueChecksumRequestPB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChecksumResponsePB {
    // message fields
    error: ::protobuf::SingularPtrField<super::tserver::TabletServerErrorPB>,
    checksum: ::std::option::Option<u64>,
    scanner_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    has_more_results: ::std::option::Option<bool>,
    snap_timestamp: ::std::option::Option<u64>,
    rows_checksummed: ::std::option::Option<i64>,
    resource_metrics: ::protobuf::SingularPtrField<super::tserver::ResourceMetricsPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ChecksumResponsePB {}

impl ChecksumResponsePB {
    pub fn new() -> ChecksumResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ChecksumResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<ChecksumResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChecksumResponsePB,
        };
        unsafe {
            instance.get(ChecksumResponsePB::new)
        }
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::tserver::TabletServerErrorPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut super::tserver::TabletServerErrorPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> super::tserver::TabletServerErrorPB {
        self.error.take().unwrap_or_else(|| super::tserver::TabletServerErrorPB::new())
    }

    pub fn get_error(&self) -> &super::tserver::TabletServerErrorPB {
        self.error.as_ref().unwrap_or_else(|| super::tserver::TabletServerErrorPB::default_instance())
    }

    fn get_error_for_reflect(&self) -> &::protobuf::SingularPtrField<super::tserver::TabletServerErrorPB> {
        &self.error
    }

    fn mut_error_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::tserver::TabletServerErrorPB> {
        &mut self.error
    }

    // optional uint64 checksum = 2;

    pub fn clear_checksum(&mut self) {
        self.checksum = ::std::option::Option::None;
    }

    pub fn has_checksum(&self) -> bool {
        self.checksum.is_some()
    }

    // Param is passed by value, moved
    pub fn set_checksum(&mut self, v: u64) {
        self.checksum = ::std::option::Option::Some(v);
    }

    pub fn get_checksum(&self) -> u64 {
        self.checksum.unwrap_or(0)
    }

    fn get_checksum_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.checksum
    }

    fn mut_checksum_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.checksum
    }

    // optional bytes scanner_id = 3;

    pub fn clear_scanner_id(&mut self) {
        self.scanner_id.clear();
    }

    pub fn has_scanner_id(&self) -> bool {
        self.scanner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scanner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.scanner_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scanner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.scanner_id.is_none() {
            self.scanner_id.set_default();
        };
        self.scanner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_scanner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.scanner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_scanner_id(&self) -> &[u8] {
        match self.scanner_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    fn get_scanner_id_for_reflect(&self) -> &::protobuf::SingularField<::std::vec::Vec<u8>> {
        &self.scanner_id
    }

    fn mut_scanner_id_for_reflect(&mut self) -> &mut ::protobuf::SingularField<::std::vec::Vec<u8>> {
        &mut self.scanner_id
    }

    // optional bool has_more_results = 4;

    pub fn clear_has_more_results(&mut self) {
        self.has_more_results = ::std::option::Option::None;
    }

    pub fn has_has_more_results(&self) -> bool {
        self.has_more_results.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_more_results(&mut self, v: bool) {
        self.has_more_results = ::std::option::Option::Some(v);
    }

    pub fn get_has_more_results(&self) -> bool {
        self.has_more_results.unwrap_or(false)
    }

    fn get_has_more_results_for_reflect(&self) -> &::std::option::Option<bool> {
        &self.has_more_results
    }

    fn mut_has_more_results_for_reflect(&mut self) -> &mut ::std::option::Option<bool> {
        &mut self.has_more_results
    }

    // optional fixed64 snap_timestamp = 5;

    pub fn clear_snap_timestamp(&mut self) {
        self.snap_timestamp = ::std::option::Option::None;
    }

    pub fn has_snap_timestamp(&self) -> bool {
        self.snap_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_snap_timestamp(&mut self, v: u64) {
        self.snap_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_snap_timestamp(&self) -> u64 {
        self.snap_timestamp.unwrap_or(0)
    }

    fn get_snap_timestamp_for_reflect(&self) -> &::std::option::Option<u64> {
        &self.snap_timestamp
    }

    fn mut_snap_timestamp_for_reflect(&mut self) -> &mut ::std::option::Option<u64> {
        &mut self.snap_timestamp
    }

    // optional int64 rows_checksummed = 6;

    pub fn clear_rows_checksummed(&mut self) {
        self.rows_checksummed = ::std::option::Option::None;
    }

    pub fn has_rows_checksummed(&self) -> bool {
        self.rows_checksummed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rows_checksummed(&mut self, v: i64) {
        self.rows_checksummed = ::std::option::Option::Some(v);
    }

    pub fn get_rows_checksummed(&self) -> i64 {
        self.rows_checksummed.unwrap_or(0)
    }

    fn get_rows_checksummed_for_reflect(&self) -> &::std::option::Option<i64> {
        &self.rows_checksummed
    }

    fn mut_rows_checksummed_for_reflect(&mut self) -> &mut ::std::option::Option<i64> {
        &mut self.rows_checksummed
    }

    // optional .kudu.tserver.ResourceMetricsPB resource_metrics = 7;

    pub fn clear_resource_metrics(&mut self) {
        self.resource_metrics.clear();
    }

    pub fn has_resource_metrics(&self) -> bool {
        self.resource_metrics.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource_metrics(&mut self, v: super::tserver::ResourceMetricsPB) {
        self.resource_metrics = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_metrics(&mut self) -> &mut super::tserver::ResourceMetricsPB {
        if self.resource_metrics.is_none() {
            self.resource_metrics.set_default();
        };
        self.resource_metrics.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource_metrics(&mut self) -> super::tserver::ResourceMetricsPB {
        self.resource_metrics.take().unwrap_or_else(|| super::tserver::ResourceMetricsPB::new())
    }

    pub fn get_resource_metrics(&self) -> &super::tserver::ResourceMetricsPB {
        self.resource_metrics.as_ref().unwrap_or_else(|| super::tserver::ResourceMetricsPB::default_instance())
    }

    fn get_resource_metrics_for_reflect(&self) -> &::protobuf::SingularPtrField<super::tserver::ResourceMetricsPB> {
        &self.resource_metrics
    }

    fn mut_resource_metrics_for_reflect(&mut self) -> &mut ::protobuf::SingularPtrField<super::tserver::ResourceMetricsPB> {
        &mut self.resource_metrics
    }
}

impl ::protobuf::Message for ChecksumResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_uint64()?;
                    self.checksum = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.scanner_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_bool()?;
                    self.has_more_results = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_fixed64()?;
                    self.snap_timestamp = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = is.read_int64()?;
                    self.rows_checksummed = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource_metrics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.checksum {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.scanner_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        };
        if let Some(v) = self.has_more_results {
            my_size += 2;
        };
        if let Some(v) = self.snap_timestamp {
            my_size += 9;
        };
        if let Some(v) = self.rows_checksummed {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.resource_metrics.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, mut os: &mut Write) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.checksum {
            os.write_uint64(2, v)?;
        };
        if let Some(v) = self.scanner_id.as_ref() {
            os.write_bytes(3, &v)?;
        };
        if let Some(v) = self.has_more_results {
            os.write_bool(4, v)?;
        };
        if let Some(v) = self.snap_timestamp {
            os.write_fixed64(5, v)?;
        };
        if let Some(v) = self.rows_checksummed {
            os.write_int64(6, v)?;
        };
        if let Some(v) = self.resource_metrics.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ChecksumResponsePB {
    fn new() -> ChecksumResponsePB {
        ChecksumResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ChecksumResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tserver::TabletServerErrorPB>>(
                    "error",
                    ChecksumResponsePB::get_error_for_reflect,
                    ChecksumResponsePB::mut_error_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "checksum",
                    ChecksumResponsePB::get_checksum_for_reflect,
                    ChecksumResponsePB::mut_checksum_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "scanner_id",
                    ChecksumResponsePB::get_scanner_id_for_reflect,
                    ChecksumResponsePB::mut_scanner_id_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_more_results",
                    ChecksumResponsePB::get_has_more_results_for_reflect,
                    ChecksumResponsePB::mut_has_more_results_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                    "snap_timestamp",
                    ChecksumResponsePB::get_snap_timestamp_for_reflect,
                    ChecksumResponsePB::mut_snap_timestamp_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "rows_checksummed",
                    ChecksumResponsePB::get_rows_checksummed_for_reflect,
                    ChecksumResponsePB::mut_rows_checksummed_for_reflect,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tserver::ResourceMetricsPB>>(
                    "resource_metrics",
                    ChecksumResponsePB::get_resource_metrics_for_reflect,
                    ChecksumResponsePB::mut_resource_metrics_for_reflect,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChecksumResponsePB>(
                    "ChecksumResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ChecksumResponsePB {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_checksum();
        self.clear_scanner_id();
        self.clear_has_more_results();
        self.clear_snap_timestamp();
        self.clear_rows_checksummed();
        self.clear_resource_metrics();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChecksumResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChecksumResponsePB {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x22, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x1a, 0x19, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63,
    0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6b,
    0x75, 0x64, 0x75, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72,
    0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
    0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72,
    0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x50, 0x42, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65,
    0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
    0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
    0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
    0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10,
    0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
    0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
    0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x22, 0x4a, 0x0a,
    0x19, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
    0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x63,
    0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x19,
    0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
    0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x22, 0xf3, 0x01, 0x0a, 0x12, 0x43, 0x68,
    0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
    0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x21, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
    0x50, 0x42, 0x12, 0x10, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x04, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
    0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f,
    0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x08, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
    0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x12, 0x18, 0x0a, 0x10, 0x72, 0x6f,
    0x77, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x06,
    0x20, 0x01, 0x28, 0x03, 0x12, 0x39, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
    0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
    0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
    0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x32,
    0xf5, 0x03, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12,
    0x1b, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
    0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67,
    0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4a, 0x0a, 0x05, 0x57, 0x72,
    0x69, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
    0x42, 0x1a, 0x1d, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
    0x22, 0x04, 0xb0, 0xb5, 0x18, 0x01, 0x12, 0x41, 0x0a, 0x04, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1b,
    0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63,
    0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x10, 0x53, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x27, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x65,
    0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
    0x12, 0x56, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12,
    0x22, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
    0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4d, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63,
    0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1f, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72,
    0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
    0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x52, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x72, 0x67, 0x2e, 0x61,
    0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x4a, 0x89, 0x19, 0x0a, 0x06, 0x12, 0x04, 0x10, 0x00, 0x50, 0x01, 0x0a, 0x8c, 0x06,
    0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08, 0x14, 0x1a, 0x81, 0x06, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63,
    0x68, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e,
    0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x41, 0x53, 0x46, 0x29, 0x20, 0x75, 0x6e, 0x64,
    0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x0a, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20,
    0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x20,
    0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
    0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
    0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x72, 0x65, 0x67,
    0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65,
    0x20, 0x41, 0x53, 0x46, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20,
    0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65,
    0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x22, 0x4c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c,
    0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70,
    0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x20, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79,
    0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
    0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
    0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63,
    0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e,
    0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
    0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c,
    0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x0a, 0x20,
    0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
    0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x22, 0x41, 0x53,
    0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41, 0x53, 0x49, 0x53, 0x2c, 0x20, 0x57, 0x49, 0x54, 0x48,
    0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f,
    0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20,
    0x41, 0x4e, 0x59, 0x0a, 0x20, 0x4b, 0x49, 0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65,
    0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70,
    0x6c, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c,
    0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20,
    0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
    0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d,
    0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69,
    0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x0a, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01,
    0x08, 0x12, 0x03, 0x12, 0x00, 0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x12, 0x00, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x12, 0x07,
    0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x12, 0x07, 0x13,
    0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12, 0x07, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x07, 0x12, 0x03, 0x12, 0x16, 0x2f, 0x0a, 0x09,
    0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x14, 0x07, 0x22, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12,
    0x03, 0x15, 0x07, 0x23, 0x0a, 0x0a, 0x0a, 0x02, 0x06, 0x00, 0x12, 0x04, 0x17, 0x00, 0x27, 0x01,
    0x0a, 0x0a, 0x0a, 0x03, 0x06, 0x00, 0x01, 0x12, 0x03, 0x17, 0x08, 0x1b, 0x0a, 0x0b, 0x0a, 0x04,
    0x06, 0x00, 0x02, 0x00, 0x12, 0x03, 0x19, 0x02, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x19, 0x06, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02,
    0x12, 0x03, 0x19, 0x0b, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x19, 0x23, 0x31, 0x0a, 0x0c, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01, 0x12, 0x04, 0x1a, 0x02, 0x1c,
    0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1a, 0x06, 0x0b, 0x0a,
    0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x1a, 0x0c, 0x1a, 0x0a, 0x0c, 0x0a,
    0x05, 0x06, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x1a, 0x25, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x06,
    0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x1b, 0x04, 0x2e, 0x0a, 0x0f, 0x0a, 0x08, 0x06, 0x00, 0x02,
    0x01, 0x04, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x1b, 0x04, 0x2e, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00,
    0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x1b, 0x0b, 0x26, 0x0a, 0x11, 0x0a, 0x0a,
    0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1b, 0x0b, 0x26, 0x0a,
    0x12, 0x0a, 0x0b, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x1b, 0x0c, 0x25, 0x0a, 0x10, 0x0a, 0x09, 0x06, 0x00, 0x02, 0x01, 0x04, 0xe7, 0x07, 0x00, 0x03,
    0x12, 0x03, 0x1b, 0x29, 0x2d, 0x0a, 0x0b, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x02, 0x12, 0x03, 0x1d,
    0x02, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1d, 0x06, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x1d, 0x0b, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x1d, 0x23, 0x31, 0x0a, 0x0b, 0x0a, 0x04,
    0x06, 0x00, 0x02, 0x03, 0x12, 0x03, 0x1e, 0x02, 0x57, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x1e, 0x06, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x02,
    0x12, 0x03, 0x1e, 0x17, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x1e, 0x3b, 0x55, 0x0a, 0x0b, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x04, 0x12, 0x03, 0x1f, 0x02, 0x48,
    0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x1f, 0x06, 0x11, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x1f, 0x12, 0x26, 0x0a, 0x0c, 0x0a, 0x05,
    0x06, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x1f, 0x31, 0x46, 0x0a, 0xaa, 0x01, 0x0a, 0x04, 0x06,
    0x00, 0x02, 0x05, 0x12, 0x04, 0x25, 0x02, 0x26, 0x23, 0x1a, 0x9b, 0x01, 0x20, 0x52, 0x75, 0x6e,
    0x20, 0x66, 0x75, 0x6c, 0x6c, 0x2d, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x6e, 0x20, 0x61, 0x20, 0x74, 0x61,
    0x62, 0x6c, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x20, 0x64,
    0x61, 0x74, 0x61, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x0a, 0x0a,
    0x20, 0x54, 0x4f, 0x44, 0x4f, 0x3a, 0x20, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x20,
    0x72, 0x65, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x72, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20,
    0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x66, 0x75, 0x6e,
    0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x05, 0x01,
    0x12, 0x03, 0x25, 0x06, 0x0e, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03,
    0x25, 0x0f, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x26, 0x0f,
    0x21, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x29, 0x00, 0x32, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x29, 0x08, 0x19, 0x0a, 0x53, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x2b, 0x02, 0x2c, 0x1a, 0x46, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
    0x65, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x5f,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x27, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
    0x62, 0x65, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x2b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x2b, 0x0b, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x2b, 0x1c, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x2b, 0x2a, 0x2b, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x2c, 0x02, 0x3a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x2c, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x2c, 0x0b, 0x24, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2c, 0x25, 0x35, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x2c, 0x38, 0x39, 0x0a, 0x4f, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x02, 0x12, 0x03, 0x2f, 0x02, 0x22, 0x1a, 0x42, 0x20, 0x53, 0x65, 0x65, 0x20, 0x64,
    0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68,
    0x65, 0x73, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x2f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x02, 0x05, 0x12, 0x03, 0x2f, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x2f, 0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12,
    0x03, 0x2f, 0x20, 0x21, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x30, 0x02,
    0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x30, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x30, 0x0b, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x30, 0x12, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x30, 0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x04, 0x12, 0x03, 0x31, 0x02, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12,
    0x03, 0x31, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x31,
    0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x31, 0x10, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x31, 0x20, 0x21, 0x0a, 0x0a,
    0x0a, 0x02, 0x04, 0x01, 0x12, 0x04, 0x34, 0x00, 0x3a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01,
    0x01, 0x12, 0x03, 0x34, 0x08, 0x21, 0x0a, 0x3b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03,
    0x36, 0x02, 0x20, 0x1a, 0x2e, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x49, 0x44,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61,
    0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x04, 0x12, 0x03, 0x36, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x05, 0x12, 0x03, 0x36, 0x0b, 0x10, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x36, 0x11, 0x1b, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x36, 0x1e, 0x1f, 0x0a, 0x39, 0x0a, 0x04, 0x04,
    0x01, 0x02, 0x01, 0x12, 0x03, 0x39, 0x02, 0x28, 0x1a, 0x2c, 0x20, 0x43, 0x68, 0x65, 0x63, 0x6b,
    0x73, 0x75, 0x6d, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f,
    0x6d, 0x20, 0x61, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x04, 0x12,
    0x03, 0x39, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x05, 0x12, 0x03, 0x39,
    0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x39, 0x12, 0x23,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x39, 0x26, 0x27, 0x0a, 0x0a,
    0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x3c, 0x00, 0x50, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02,
    0x01, 0x12, 0x03, 0x3c, 0x08, 0x1a, 0x0a, 0x25, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03,
    0x3e, 0x02, 0x29, 0x1a, 0x18, 0x20, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x02, 0x02, 0x00, 0x04, 0x12, 0x03, 0x3e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x02, 0x02, 0x00, 0x06, 0x12, 0x03, 0x3e, 0x0b, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x3e, 0x1f, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x3e, 0x27, 0x28, 0x0a, 0x82, 0x01, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x42, 0x02, 0x1f, 0x1a, 0x75, 0x20, 0x54, 0x68, 0x65, 0x20, 0x28, 0x70, 0x6f, 0x73, 0x73, 0x69,
    0x62, 0x6c, 0x79, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x29, 0x20, 0x63, 0x68, 0x65,
    0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
    0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79,
    0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x69, 0x66, 0x20, 0x27, 0x68, 0x61,
    0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x27, 0x20,
    0x69, 0x73, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x01, 0x04, 0x12, 0x03, 0x42, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x42, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x42, 0x12, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x01, 0x03, 0x12, 0x03, 0x42,
    0x1d, 0x1e, 0x0a, 0x50, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x02, 0x12, 0x03, 0x45, 0x02, 0x20, 0x1a,
    0x43, 0x20, 0x53, 0x65, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20,
    0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x73, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c,
    0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x04, 0x12, 0x03, 0x45,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x05, 0x12, 0x03, 0x45, 0x0b, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x45, 0x11, 0x1b, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x02, 0x03, 0x12, 0x03, 0x45, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x02, 0x02, 0x03, 0x12, 0x03, 0x46, 0x02, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02,
    0x03, 0x04, 0x12, 0x03, 0x46, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x05,
    0x12, 0x03, 0x46, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03,
    0x46, 0x10, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x03, 0x03, 0x12, 0x03, 0x46, 0x23,
    0x24, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x03, 0x47, 0x02, 0x26, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x04, 0x04, 0x12, 0x03, 0x47, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x04, 0x05, 0x12, 0x03, 0x47, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x47, 0x13, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x04,
    0x03, 0x12, 0x03, 0x47, 0x24, 0x25, 0x0a, 0xa5, 0x01, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12,
    0x03, 0x4c, 0x02, 0x26, 0x1a, 0x97, 0x01, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f,
    0x66, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x6d,
    0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x52, 0x50, 0x43, 0x2e, 0x0a,
    0x20, 0x4e, 0x4f, 0x54, 0x45, 0x3a, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x20,
    0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
    0x72, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x75,
    0x74, 0x0a, 0x20, 0x72, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x61,
    0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x5f, 0x74, 0x68, 0x69, 0x73,
    0x5f, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x05, 0x04, 0x12, 0x03, 0x4c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x05, 0x05, 0x12, 0x03, 0x4c, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x05, 0x01, 0x12, 0x03, 0x4c, 0x11, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x05,
    0x03, 0x12, 0x03, 0x4c, 0x24, 0x25, 0x0a, 0x3e, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x06, 0x12, 0x03,
    0x4f, 0x02, 0x32, 0x1a, 0x31, 0x20, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x63,
    0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x04, 0x12,
    0x03, 0x4f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x06, 0x12, 0x03, 0x4f,
    0x0b, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x01, 0x12, 0x03, 0x4f, 0x1d, 0x2d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x06, 0x03, 0x12, 0x03, 0x4f, 0x30, 0x31,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
