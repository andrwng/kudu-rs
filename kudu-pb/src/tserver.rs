// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_imports)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct TabletServerErrorPB {
    // message fields
    code: ::std::option::Option<TabletServerErrorPB_Code>,
    status: ::protobuf::SingularPtrField<super::wire_protocol::AppStatusPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for TabletServerErrorPB {}

impl TabletServerErrorPB {
    pub fn new() -> TabletServerErrorPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static TabletServerErrorPB {
        static mut instance: ::protobuf::lazy::Lazy<TabletServerErrorPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TabletServerErrorPB,
        };
        unsafe {
            instance.get(|| {
                TabletServerErrorPB {
                    code: ::std::option::Option::None,
                    status: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.tserver.TabletServerErrorPB.Code code = 1;

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: TabletServerErrorPB_Code) {
        self.code = ::std::option::Option::Some(v);
    }

    pub fn get_code(&self) -> TabletServerErrorPB_Code {
        self.code.unwrap_or(TabletServerErrorPB_Code::UNKNOWN_ERROR)
    }

    // required .kudu.AppStatusPB status = 2;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: super::wire_protocol::AppStatusPB) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut super::wire_protocol::AppStatusPB {
        if self.status.is_none() {
            self.status.set_default();
        };
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> super::wire_protocol::AppStatusPB {
        self.status.take().unwrap_or_else(|| super::wire_protocol::AppStatusPB::new())
    }

    pub fn get_status(&self) -> &super::wire_protocol::AppStatusPB {
        self.status.as_ref().unwrap_or_else(|| super::wire_protocol::AppStatusPB::default_instance())
    }
}

impl ::protobuf::Message for TabletServerErrorPB {
    fn is_initialized(&self) -> bool {
        if self.code.is_none() {
            return false;
        };
        if self.status.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.code.iter() {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in self.status.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.code {
            try!(os.write_enum(1, v.value()));
        };
        if let Some(v) = self.status.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<TabletServerErrorPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for TabletServerErrorPB {
    fn new() -> TabletServerErrorPB {
        TabletServerErrorPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<TabletServerErrorPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "code",
                    TabletServerErrorPB::has_code,
                    TabletServerErrorPB::get_code,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "status",
                    TabletServerErrorPB::has_status,
                    TabletServerErrorPB::get_status,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TabletServerErrorPB>(
                    "TabletServerErrorPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for TabletServerErrorPB {
    fn clear(&mut self) {
        self.clear_code();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for TabletServerErrorPB {
    fn eq(&self, other: &TabletServerErrorPB) -> bool {
        self.code == other.code &&
        self.status == other.status &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for TabletServerErrorPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TabletServerErrorPB_Code {
    UNKNOWN_ERROR = 1,
    INVALID_SCHEMA = 2,
    INVALID_ROW_BLOCK = 3,
    INVALID_MUTATION = 4,
    MISMATCHED_SCHEMA = 5,
    TABLET_NOT_FOUND = 6,
    SCANNER_EXPIRED = 7,
    INVALID_SCAN_SPEC = 8,
    INVALID_CONFIG = 9,
    TABLET_ALREADY_EXISTS = 10,
    TABLET_HAS_A_NEWER_SCHEMA = 11,
    TABLET_NOT_RUNNING = 12,
    INVALID_SNAPSHOT = 13,
    INVALID_SCAN_CALL_SEQ_ID = 14,
    NOT_THE_LEADER = 15,
    WRONG_SERVER_UUID = 16,
    CAS_FAILED = 17,
    ALREADY_INPROGRESS = 18,
    THROTTLED = 19,
}

impl ::protobuf::ProtobufEnum for TabletServerErrorPB_Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TabletServerErrorPB_Code> {
        match value {
            1 => ::std::option::Option::Some(TabletServerErrorPB_Code::UNKNOWN_ERROR),
            2 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_SCHEMA),
            3 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_ROW_BLOCK),
            4 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_MUTATION),
            5 => ::std::option::Option::Some(TabletServerErrorPB_Code::MISMATCHED_SCHEMA),
            6 => ::std::option::Option::Some(TabletServerErrorPB_Code::TABLET_NOT_FOUND),
            7 => ::std::option::Option::Some(TabletServerErrorPB_Code::SCANNER_EXPIRED),
            8 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_SCAN_SPEC),
            9 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_CONFIG),
            10 => ::std::option::Option::Some(TabletServerErrorPB_Code::TABLET_ALREADY_EXISTS),
            11 => ::std::option::Option::Some(TabletServerErrorPB_Code::TABLET_HAS_A_NEWER_SCHEMA),
            12 => ::std::option::Option::Some(TabletServerErrorPB_Code::TABLET_NOT_RUNNING),
            13 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_SNAPSHOT),
            14 => ::std::option::Option::Some(TabletServerErrorPB_Code::INVALID_SCAN_CALL_SEQ_ID),
            15 => ::std::option::Option::Some(TabletServerErrorPB_Code::NOT_THE_LEADER),
            16 => ::std::option::Option::Some(TabletServerErrorPB_Code::WRONG_SERVER_UUID),
            17 => ::std::option::Option::Some(TabletServerErrorPB_Code::CAS_FAILED),
            18 => ::std::option::Option::Some(TabletServerErrorPB_Code::ALREADY_INPROGRESS),
            19 => ::std::option::Option::Some(TabletServerErrorPB_Code::THROTTLED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TabletServerErrorPB_Code] = &[
            TabletServerErrorPB_Code::UNKNOWN_ERROR,
            TabletServerErrorPB_Code::INVALID_SCHEMA,
            TabletServerErrorPB_Code::INVALID_ROW_BLOCK,
            TabletServerErrorPB_Code::INVALID_MUTATION,
            TabletServerErrorPB_Code::MISMATCHED_SCHEMA,
            TabletServerErrorPB_Code::TABLET_NOT_FOUND,
            TabletServerErrorPB_Code::SCANNER_EXPIRED,
            TabletServerErrorPB_Code::INVALID_SCAN_SPEC,
            TabletServerErrorPB_Code::INVALID_CONFIG,
            TabletServerErrorPB_Code::TABLET_ALREADY_EXISTS,
            TabletServerErrorPB_Code::TABLET_HAS_A_NEWER_SCHEMA,
            TabletServerErrorPB_Code::TABLET_NOT_RUNNING,
            TabletServerErrorPB_Code::INVALID_SNAPSHOT,
            TabletServerErrorPB_Code::INVALID_SCAN_CALL_SEQ_ID,
            TabletServerErrorPB_Code::NOT_THE_LEADER,
            TabletServerErrorPB_Code::WRONG_SERVER_UUID,
            TabletServerErrorPB_Code::CAS_FAILED,
            TabletServerErrorPB_Code::ALREADY_INPROGRESS,
            TabletServerErrorPB_Code::THROTTLED,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<TabletServerErrorPB_Code>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TabletServerErrorPB_Code", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TabletServerErrorPB_Code {
}

#[derive(Clone,Default)]
pub struct PingRequestPB {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PingRequestPB {}

impl PingRequestPB {
    pub fn new() -> PingRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PingRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<PingRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingRequestPB,
        };
        unsafe {
            instance.get(|| {
                PingRequestPB {
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }
}

impl ::protobuf::Message for PingRequestPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<PingRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PingRequestPB {
    fn new() -> PingRequestPB {
        PingRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<PingRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<PingRequestPB>(
                    "PingRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PingRequestPB {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for PingRequestPB {
    fn eq(&self, other: &PingRequestPB) -> bool {
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for PingRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct PingResponsePB {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for PingResponsePB {}

impl PingResponsePB {
    pub fn new() -> PingResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static PingResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<PingResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PingResponsePB,
        };
        unsafe {
            instance.get(|| {
                PingResponsePB {
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }
}

impl ::protobuf::Message for PingResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<PingResponsePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for PingResponsePB {
    fn new() -> PingResponsePB {
        PingResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<PingResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<PingResponsePB>(
                    "PingResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for PingResponsePB {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for PingResponsePB {
    fn eq(&self, other: &PingResponsePB) -> bool {
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for PingResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct WriteRequestPB {
    // message fields
    tablet_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    schema: ::protobuf::SingularPtrField<super::common::SchemaPB>,
    row_operations: ::protobuf::SingularPtrField<super::wire_protocol::RowOperationsPB>,
    external_consistency_mode: ::std::option::Option<super::common::ExternalConsistencyMode>,
    propagated_timestamp: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for WriteRequestPB {}

impl WriteRequestPB {
    pub fn new() -> WriteRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static WriteRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<WriteRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteRequestPB,
        };
        unsafe {
            instance.get(|| {
                WriteRequestPB {
                    tablet_id: ::protobuf::SingularField::none(),
                    schema: ::protobuf::SingularPtrField::none(),
                    row_operations: ::protobuf::SingularPtrField::none(),
                    external_consistency_mode: ::std::option::Option::None,
                    propagated_timestamp: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes tablet_id = 1;

    pub fn clear_tablet_id(&mut self) {
        self.tablet_id.clear();
    }

    pub fn has_tablet_id(&self) -> bool {
        self.tablet_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.tablet_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tablet_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tablet_id.is_none() {
            self.tablet_id.set_default();
        };
        self.tablet_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_tablet_id(&mut self) -> ::std::vec::Vec<u8> {
        self.tablet_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_tablet_id(&self) -> &[u8] {
        match self.tablet_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .kudu.SchemaPB schema = 2;

    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::common::SchemaPB) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::common::SchemaPB {
        if self.schema.is_none() {
            self.schema.set_default();
        };
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::common::SchemaPB {
        self.schema.take().unwrap_or_else(|| super::common::SchemaPB::new())
    }

    pub fn get_schema(&self) -> &super::common::SchemaPB {
        self.schema.as_ref().unwrap_or_else(|| super::common::SchemaPB::default_instance())
    }

    // optional .kudu.RowOperationsPB row_operations = 3;

    pub fn clear_row_operations(&mut self) {
        self.row_operations.clear();
    }

    pub fn has_row_operations(&self) -> bool {
        self.row_operations.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_operations(&mut self, v: super::wire_protocol::RowOperationsPB) {
        self.row_operations = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_operations(&mut self) -> &mut super::wire_protocol::RowOperationsPB {
        if self.row_operations.is_none() {
            self.row_operations.set_default();
        };
        self.row_operations.as_mut().unwrap()
    }

    // Take field
    pub fn take_row_operations(&mut self) -> super::wire_protocol::RowOperationsPB {
        self.row_operations.take().unwrap_or_else(|| super::wire_protocol::RowOperationsPB::new())
    }

    pub fn get_row_operations(&self) -> &super::wire_protocol::RowOperationsPB {
        self.row_operations.as_ref().unwrap_or_else(|| super::wire_protocol::RowOperationsPB::default_instance())
    }

    // optional .kudu.ExternalConsistencyMode external_consistency_mode = 4;

    pub fn clear_external_consistency_mode(&mut self) {
        self.external_consistency_mode = ::std::option::Option::None;
    }

    pub fn has_external_consistency_mode(&self) -> bool {
        self.external_consistency_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_external_consistency_mode(&mut self, v: super::common::ExternalConsistencyMode) {
        self.external_consistency_mode = ::std::option::Option::Some(v);
    }

    pub fn get_external_consistency_mode(&self) -> super::common::ExternalConsistencyMode {
        self.external_consistency_mode.unwrap_or(super::common::ExternalConsistencyMode::CLIENT_PROPAGATED)
    }

    // optional fixed64 propagated_timestamp = 5;

    pub fn clear_propagated_timestamp(&mut self) {
        self.propagated_timestamp = ::std::option::Option::None;
    }

    pub fn has_propagated_timestamp(&self) -> bool {
        self.propagated_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propagated_timestamp(&mut self, v: u64) {
        self.propagated_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_propagated_timestamp(&self) -> u64 {
        self.propagated_timestamp.unwrap_or(0)
    }
}

impl ::protobuf::Message for WriteRequestPB {
    fn is_initialized(&self) -> bool {
        if self.tablet_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tablet_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.row_operations));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.external_consistency_mode = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.propagated_timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.tablet_id.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.row_operations.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.external_consistency_mode.iter() {
            my_size += ::protobuf::rt::enum_size(4, *value);
        };
        if self.propagated_timestamp.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.tablet_id.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.schema.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.row_operations.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.external_consistency_mode {
            try!(os.write_enum(4, v.value()));
        };
        if let Some(v) = self.propagated_timestamp {
            try!(os.write_fixed64(5, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<WriteRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for WriteRequestPB {
    fn new() -> WriteRequestPB {
        WriteRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<WriteRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "tablet_id",
                    WriteRequestPB::has_tablet_id,
                    WriteRequestPB::get_tablet_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "schema",
                    WriteRequestPB::has_schema,
                    WriteRequestPB::get_schema,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "row_operations",
                    WriteRequestPB::has_row_operations,
                    WriteRequestPB::get_row_operations,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "external_consistency_mode",
                    WriteRequestPB::has_external_consistency_mode,
                    WriteRequestPB::get_external_consistency_mode,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "propagated_timestamp",
                    WriteRequestPB::has_propagated_timestamp,
                    WriteRequestPB::get_propagated_timestamp,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteRequestPB>(
                    "WriteRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for WriteRequestPB {
    fn clear(&mut self) {
        self.clear_tablet_id();
        self.clear_schema();
        self.clear_row_operations();
        self.clear_external_consistency_mode();
        self.clear_propagated_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for WriteRequestPB {
    fn eq(&self, other: &WriteRequestPB) -> bool {
        self.tablet_id == other.tablet_id &&
        self.schema == other.schema &&
        self.row_operations == other.row_operations &&
        self.external_consistency_mode == other.external_consistency_mode &&
        self.propagated_timestamp == other.propagated_timestamp &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for WriteRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct WriteResponsePB {
    // message fields
    error: ::protobuf::SingularPtrField<TabletServerErrorPB>,
    per_row_errors: ::protobuf::RepeatedField<WriteResponsePB_PerRowErrorPB>,
    timestamp: ::std::option::Option<u64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for WriteResponsePB {}

impl WriteResponsePB {
    pub fn new() -> WriteResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static WriteResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<WriteResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteResponsePB,
        };
        unsafe {
            instance.get(|| {
                WriteResponsePB {
                    error: ::protobuf::SingularPtrField::none(),
                    per_row_errors: ::protobuf::RepeatedField::new(),
                    timestamp: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: TabletServerErrorPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut TabletServerErrorPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> TabletServerErrorPB {
        self.error.take().unwrap_or_else(|| TabletServerErrorPB::new())
    }

    pub fn get_error(&self) -> &TabletServerErrorPB {
        self.error.as_ref().unwrap_or_else(|| TabletServerErrorPB::default_instance())
    }

    // repeated .kudu.tserver.WriteResponsePB.PerRowErrorPB per_row_errors = 2;

    pub fn clear_per_row_errors(&mut self) {
        self.per_row_errors.clear();
    }

    // Param is passed by value, moved
    pub fn set_per_row_errors(&mut self, v: ::protobuf::RepeatedField<WriteResponsePB_PerRowErrorPB>) {
        self.per_row_errors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_per_row_errors(&mut self) -> &mut ::protobuf::RepeatedField<WriteResponsePB_PerRowErrorPB> {
        &mut self.per_row_errors
    }

    // Take field
    pub fn take_per_row_errors(&mut self) -> ::protobuf::RepeatedField<WriteResponsePB_PerRowErrorPB> {
        ::std::mem::replace(&mut self.per_row_errors, ::protobuf::RepeatedField::new())
    }

    pub fn get_per_row_errors(&self) -> &[WriteResponsePB_PerRowErrorPB] {
        &self.per_row_errors
    }

    // optional fixed64 timestamp = 3;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp.unwrap_or(0)
    }
}

impl ::protobuf::Message for WriteResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.per_row_errors));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.per_row_errors.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.timestamp.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in self.per_row_errors.iter() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.timestamp {
            try!(os.write_fixed64(3, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<WriteResponsePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for WriteResponsePB {
    fn new() -> WriteResponsePB {
        WriteResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<WriteResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    WriteResponsePB::has_error,
                    WriteResponsePB::get_error,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "per_row_errors",
                    WriteResponsePB::get_per_row_errors,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "timestamp",
                    WriteResponsePB::has_timestamp,
                    WriteResponsePB::get_timestamp,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteResponsePB>(
                    "WriteResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for WriteResponsePB {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_per_row_errors();
        self.clear_timestamp();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for WriteResponsePB {
    fn eq(&self, other: &WriteResponsePB) -> bool {
        self.error == other.error &&
        self.per_row_errors == other.per_row_errors &&
        self.timestamp == other.timestamp &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for WriteResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct WriteResponsePB_PerRowErrorPB {
    // message fields
    row_index: ::std::option::Option<i32>,
    error: ::protobuf::SingularPtrField<super::wire_protocol::AppStatusPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for WriteResponsePB_PerRowErrorPB {}

impl WriteResponsePB_PerRowErrorPB {
    pub fn new() -> WriteResponsePB_PerRowErrorPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static WriteResponsePB_PerRowErrorPB {
        static mut instance: ::protobuf::lazy::Lazy<WriteResponsePB_PerRowErrorPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteResponsePB_PerRowErrorPB,
        };
        unsafe {
            instance.get(|| {
                WriteResponsePB_PerRowErrorPB {
                    row_index: ::std::option::Option::None,
                    error: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required int32 row_index = 1;

    pub fn clear_row_index(&mut self) {
        self.row_index = ::std::option::Option::None;
    }

    pub fn has_row_index(&self) -> bool {
        self.row_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_row_index(&mut self, v: i32) {
        self.row_index = ::std::option::Option::Some(v);
    }

    pub fn get_row_index(&self) -> i32 {
        self.row_index.unwrap_or(0)
    }

    // required .kudu.AppStatusPB error = 2;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: super::wire_protocol::AppStatusPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut super::wire_protocol::AppStatusPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> super::wire_protocol::AppStatusPB {
        self.error.take().unwrap_or_else(|| super::wire_protocol::AppStatusPB::new())
    }

    pub fn get_error(&self) -> &super::wire_protocol::AppStatusPB {
        self.error.as_ref().unwrap_or_else(|| super::wire_protocol::AppStatusPB::default_instance())
    }
}

impl ::protobuf::Message for WriteResponsePB_PerRowErrorPB {
    fn is_initialized(&self) -> bool {
        if self.row_index.is_none() {
            return false;
        };
        if self.error.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int32());
                    self.row_index = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.row_index.iter() {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.row_index {
            try!(os.write_int32(1, v));
        };
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<WriteResponsePB_PerRowErrorPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for WriteResponsePB_PerRowErrorPB {
    fn new() -> WriteResponsePB_PerRowErrorPB {
        WriteResponsePB_PerRowErrorPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<WriteResponsePB_PerRowErrorPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "row_index",
                    WriteResponsePB_PerRowErrorPB::has_row_index,
                    WriteResponsePB_PerRowErrorPB::get_row_index,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    WriteResponsePB_PerRowErrorPB::has_error,
                    WriteResponsePB_PerRowErrorPB::get_error,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteResponsePB_PerRowErrorPB>(
                    "WriteResponsePB_PerRowErrorPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for WriteResponsePB_PerRowErrorPB {
    fn clear(&mut self) {
        self.clear_row_index();
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for WriteResponsePB_PerRowErrorPB {
    fn eq(&self, other: &WriteResponsePB_PerRowErrorPB) -> bool {
        self.row_index == other.row_index &&
        self.error == other.error &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for WriteResponsePB_PerRowErrorPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ListTabletsRequestPB {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ListTabletsRequestPB {}

impl ListTabletsRequestPB {
    pub fn new() -> ListTabletsRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ListTabletsRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<ListTabletsRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListTabletsRequestPB,
        };
        unsafe {
            instance.get(|| {
                ListTabletsRequestPB {
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }
}

impl ::protobuf::Message for ListTabletsRequestPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ListTabletsRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ListTabletsRequestPB {
    fn new() -> ListTabletsRequestPB {
        ListTabletsRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ListTabletsRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ListTabletsRequestPB>(
                    "ListTabletsRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ListTabletsRequestPB {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ListTabletsRequestPB {
    fn eq(&self, other: &ListTabletsRequestPB) -> bool {
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ListTabletsRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ListTabletsResponsePB {
    // message fields
    error: ::protobuf::SingularPtrField<TabletServerErrorPB>,
    status_and_schema: ::protobuf::RepeatedField<ListTabletsResponsePB_StatusAndSchemaPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ListTabletsResponsePB {}

impl ListTabletsResponsePB {
    pub fn new() -> ListTabletsResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ListTabletsResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<ListTabletsResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListTabletsResponsePB,
        };
        unsafe {
            instance.get(|| {
                ListTabletsResponsePB {
                    error: ::protobuf::SingularPtrField::none(),
                    status_and_schema: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: TabletServerErrorPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut TabletServerErrorPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> TabletServerErrorPB {
        self.error.take().unwrap_or_else(|| TabletServerErrorPB::new())
    }

    pub fn get_error(&self) -> &TabletServerErrorPB {
        self.error.as_ref().unwrap_or_else(|| TabletServerErrorPB::default_instance())
    }

    // repeated .kudu.tserver.ListTabletsResponsePB.StatusAndSchemaPB status_and_schema = 2;

    pub fn clear_status_and_schema(&mut self) {
        self.status_and_schema.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_and_schema(&mut self, v: ::protobuf::RepeatedField<ListTabletsResponsePB_StatusAndSchemaPB>) {
        self.status_and_schema = v;
    }

    // Mutable pointer to the field.
    pub fn mut_status_and_schema(&mut self) -> &mut ::protobuf::RepeatedField<ListTabletsResponsePB_StatusAndSchemaPB> {
        &mut self.status_and_schema
    }

    // Take field
    pub fn take_status_and_schema(&mut self) -> ::protobuf::RepeatedField<ListTabletsResponsePB_StatusAndSchemaPB> {
        ::std::mem::replace(&mut self.status_and_schema, ::protobuf::RepeatedField::new())
    }

    pub fn get_status_and_schema(&self) -> &[ListTabletsResponsePB_StatusAndSchemaPB] {
        &self.status_and_schema
    }
}

impl ::protobuf::Message for ListTabletsResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                2 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.status_and_schema));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.status_and_schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in self.status_and_schema.iter() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ListTabletsResponsePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ListTabletsResponsePB {
    fn new() -> ListTabletsResponsePB {
        ListTabletsResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ListTabletsResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    ListTabletsResponsePB::has_error,
                    ListTabletsResponsePB::get_error,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "status_and_schema",
                    ListTabletsResponsePB::get_status_and_schema,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListTabletsResponsePB>(
                    "ListTabletsResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ListTabletsResponsePB {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_status_and_schema();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ListTabletsResponsePB {
    fn eq(&self, other: &ListTabletsResponsePB) -> bool {
        self.error == other.error &&
        self.status_and_schema == other.status_and_schema &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ListTabletsResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ListTabletsResponsePB_StatusAndSchemaPB {
    // message fields
    tablet_status: ::protobuf::SingularPtrField<super::tablet::TabletStatusPB>,
    schema: ::protobuf::SingularPtrField<super::common::SchemaPB>,
    partition_schema: ::protobuf::SingularPtrField<super::common::PartitionSchemaPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ListTabletsResponsePB_StatusAndSchemaPB {}

impl ListTabletsResponsePB_StatusAndSchemaPB {
    pub fn new() -> ListTabletsResponsePB_StatusAndSchemaPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ListTabletsResponsePB_StatusAndSchemaPB {
        static mut instance: ::protobuf::lazy::Lazy<ListTabletsResponsePB_StatusAndSchemaPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListTabletsResponsePB_StatusAndSchemaPB,
        };
        unsafe {
            instance.get(|| {
                ListTabletsResponsePB_StatusAndSchemaPB {
                    tablet_status: ::protobuf::SingularPtrField::none(),
                    schema: ::protobuf::SingularPtrField::none(),
                    partition_schema: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.tablet.TabletStatusPB tablet_status = 1;

    pub fn clear_tablet_status(&mut self) {
        self.tablet_status.clear();
    }

    pub fn has_tablet_status(&self) -> bool {
        self.tablet_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_status(&mut self, v: super::tablet::TabletStatusPB) {
        self.tablet_status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tablet_status(&mut self) -> &mut super::tablet::TabletStatusPB {
        if self.tablet_status.is_none() {
            self.tablet_status.set_default();
        };
        self.tablet_status.as_mut().unwrap()
    }

    // Take field
    pub fn take_tablet_status(&mut self) -> super::tablet::TabletStatusPB {
        self.tablet_status.take().unwrap_or_else(|| super::tablet::TabletStatusPB::new())
    }

    pub fn get_tablet_status(&self) -> &super::tablet::TabletStatusPB {
        self.tablet_status.as_ref().unwrap_or_else(|| super::tablet::TabletStatusPB::default_instance())
    }

    // required .kudu.SchemaPB schema = 2;

    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::common::SchemaPB) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::common::SchemaPB {
        if self.schema.is_none() {
            self.schema.set_default();
        };
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::common::SchemaPB {
        self.schema.take().unwrap_or_else(|| super::common::SchemaPB::new())
    }

    pub fn get_schema(&self) -> &super::common::SchemaPB {
        self.schema.as_ref().unwrap_or_else(|| super::common::SchemaPB::default_instance())
    }

    // optional .kudu.PartitionSchemaPB partition_schema = 3;

    pub fn clear_partition_schema(&mut self) {
        self.partition_schema.clear();
    }

    pub fn has_partition_schema(&self) -> bool {
        self.partition_schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_partition_schema(&mut self, v: super::common::PartitionSchemaPB) {
        self.partition_schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_partition_schema(&mut self) -> &mut super::common::PartitionSchemaPB {
        if self.partition_schema.is_none() {
            self.partition_schema.set_default();
        };
        self.partition_schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_partition_schema(&mut self) -> super::common::PartitionSchemaPB {
        self.partition_schema.take().unwrap_or_else(|| super::common::PartitionSchemaPB::new())
    }

    pub fn get_partition_schema(&self) -> &super::common::PartitionSchemaPB {
        self.partition_schema.as_ref().unwrap_or_else(|| super::common::PartitionSchemaPB::default_instance())
    }
}

impl ::protobuf::Message for ListTabletsResponsePB_StatusAndSchemaPB {
    fn is_initialized(&self) -> bool {
        if self.tablet_status.is_none() {
            return false;
        };
        if self.schema.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tablet_status));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.partition_schema));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.tablet_status.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.partition_schema.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.tablet_status.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.schema.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.partition_schema.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ListTabletsResponsePB_StatusAndSchemaPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ListTabletsResponsePB_StatusAndSchemaPB {
    fn new() -> ListTabletsResponsePB_StatusAndSchemaPB {
        ListTabletsResponsePB_StatusAndSchemaPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ListTabletsResponsePB_StatusAndSchemaPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "tablet_status",
                    ListTabletsResponsePB_StatusAndSchemaPB::has_tablet_status,
                    ListTabletsResponsePB_StatusAndSchemaPB::get_tablet_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "schema",
                    ListTabletsResponsePB_StatusAndSchemaPB::has_schema,
                    ListTabletsResponsePB_StatusAndSchemaPB::get_schema,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "partition_schema",
                    ListTabletsResponsePB_StatusAndSchemaPB::has_partition_schema,
                    ListTabletsResponsePB_StatusAndSchemaPB::get_partition_schema,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListTabletsResponsePB_StatusAndSchemaPB>(
                    "ListTabletsResponsePB_StatusAndSchemaPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ListTabletsResponsePB_StatusAndSchemaPB {
    fn clear(&mut self) {
        self.clear_tablet_status();
        self.clear_schema();
        self.clear_partition_schema();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ListTabletsResponsePB_StatusAndSchemaPB {
    fn eq(&self, other: &ListTabletsResponsePB_StatusAndSchemaPB) -> bool {
        self.tablet_status == other.tablet_status &&
        self.schema == other.schema &&
        self.partition_schema == other.partition_schema &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ListTabletsResponsePB_StatusAndSchemaPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ColumnRangePredicatePB {
    // message fields
    column: ::protobuf::SingularPtrField<super::common::ColumnSchemaPB>,
    lower_bound: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    inclusive_upper_bound: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ColumnRangePredicatePB {}

impl ColumnRangePredicatePB {
    pub fn new() -> ColumnRangePredicatePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ColumnRangePredicatePB {
        static mut instance: ::protobuf::lazy::Lazy<ColumnRangePredicatePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ColumnRangePredicatePB,
        };
        unsafe {
            instance.get(|| {
                ColumnRangePredicatePB {
                    column: ::protobuf::SingularPtrField::none(),
                    lower_bound: ::protobuf::SingularField::none(),
                    inclusive_upper_bound: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required .kudu.ColumnSchemaPB column = 1;

    pub fn clear_column(&mut self) {
        self.column.clear();
    }

    pub fn has_column(&self) -> bool {
        self.column.is_some()
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: super::common::ColumnSchemaPB) {
        self.column = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_column(&mut self) -> &mut super::common::ColumnSchemaPB {
        if self.column.is_none() {
            self.column.set_default();
        };
        self.column.as_mut().unwrap()
    }

    // Take field
    pub fn take_column(&mut self) -> super::common::ColumnSchemaPB {
        self.column.take().unwrap_or_else(|| super::common::ColumnSchemaPB::new())
    }

    pub fn get_column(&self) -> &super::common::ColumnSchemaPB {
        self.column.as_ref().unwrap_or_else(|| super::common::ColumnSchemaPB::default_instance())
    }

    // optional bytes lower_bound = 2;

    pub fn clear_lower_bound(&mut self) {
        self.lower_bound.clear();
    }

    pub fn has_lower_bound(&self) -> bool {
        self.lower_bound.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lower_bound(&mut self, v: ::std::vec::Vec<u8>) {
        self.lower_bound = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lower_bound(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.lower_bound.is_none() {
            self.lower_bound.set_default();
        };
        self.lower_bound.as_mut().unwrap()
    }

    // Take field
    pub fn take_lower_bound(&mut self) -> ::std::vec::Vec<u8> {
        self.lower_bound.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_lower_bound(&self) -> &[u8] {
        match self.lower_bound.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes inclusive_upper_bound = 3;

    pub fn clear_inclusive_upper_bound(&mut self) {
        self.inclusive_upper_bound.clear();
    }

    pub fn has_inclusive_upper_bound(&self) -> bool {
        self.inclusive_upper_bound.is_some()
    }

    // Param is passed by value, moved
    pub fn set_inclusive_upper_bound(&mut self, v: ::std::vec::Vec<u8>) {
        self.inclusive_upper_bound = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inclusive_upper_bound(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.inclusive_upper_bound.is_none() {
            self.inclusive_upper_bound.set_default();
        };
        self.inclusive_upper_bound.as_mut().unwrap()
    }

    // Take field
    pub fn take_inclusive_upper_bound(&mut self) -> ::std::vec::Vec<u8> {
        self.inclusive_upper_bound.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_inclusive_upper_bound(&self) -> &[u8] {
        match self.inclusive_upper_bound.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ColumnRangePredicatePB {
    fn is_initialized(&self) -> bool {
        if self.column.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.column));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.lower_bound));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.inclusive_upper_bound));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.column.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.lower_bound.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in self.inclusive_upper_bound.iter() {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.column.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.lower_bound.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        if let Some(v) = self.inclusive_upper_bound.as_ref() {
            try!(os.write_bytes(3, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ColumnRangePredicatePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ColumnRangePredicatePB {
    fn new() -> ColumnRangePredicatePB {
        ColumnRangePredicatePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ColumnRangePredicatePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "column",
                    ColumnRangePredicatePB::has_column,
                    ColumnRangePredicatePB::get_column,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "lower_bound",
                    ColumnRangePredicatePB::has_lower_bound,
                    ColumnRangePredicatePB::get_lower_bound,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "inclusive_upper_bound",
                    ColumnRangePredicatePB::has_inclusive_upper_bound,
                    ColumnRangePredicatePB::get_inclusive_upper_bound,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ColumnRangePredicatePB>(
                    "ColumnRangePredicatePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ColumnRangePredicatePB {
    fn clear(&mut self) {
        self.clear_column();
        self.clear_lower_bound();
        self.clear_inclusive_upper_bound();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ColumnRangePredicatePB {
    fn eq(&self, other: &ColumnRangePredicatePB) -> bool {
        self.column == other.column &&
        self.lower_bound == other.lower_bound &&
        self.inclusive_upper_bound == other.inclusive_upper_bound &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ColumnRangePredicatePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ColumnRangePredicateListPB {
    // message fields
    range_predicates: ::protobuf::RepeatedField<ColumnRangePredicatePB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ColumnRangePredicateListPB {}

impl ColumnRangePredicateListPB {
    pub fn new() -> ColumnRangePredicateListPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ColumnRangePredicateListPB {
        static mut instance: ::protobuf::lazy::Lazy<ColumnRangePredicateListPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ColumnRangePredicateListPB,
        };
        unsafe {
            instance.get(|| {
                ColumnRangePredicateListPB {
                    range_predicates: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // repeated .kudu.tserver.ColumnRangePredicatePB range_predicates = 1;

    pub fn clear_range_predicates(&mut self) {
        self.range_predicates.clear();
    }

    // Param is passed by value, moved
    pub fn set_range_predicates(&mut self, v: ::protobuf::RepeatedField<ColumnRangePredicatePB>) {
        self.range_predicates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_range_predicates(&mut self) -> &mut ::protobuf::RepeatedField<ColumnRangePredicatePB> {
        &mut self.range_predicates
    }

    // Take field
    pub fn take_range_predicates(&mut self) -> ::protobuf::RepeatedField<ColumnRangePredicatePB> {
        ::std::mem::replace(&mut self.range_predicates, ::protobuf::RepeatedField::new())
    }

    pub fn get_range_predicates(&self) -> &[ColumnRangePredicatePB] {
        &self.range_predicates
    }
}

impl ::protobuf::Message for ColumnRangePredicateListPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.range_predicates));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.range_predicates.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in self.range_predicates.iter() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ColumnRangePredicateListPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ColumnRangePredicateListPB {
    fn new() -> ColumnRangePredicateListPB {
        ColumnRangePredicateListPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ColumnRangePredicateListPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "range_predicates",
                    ColumnRangePredicateListPB::get_range_predicates,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ColumnRangePredicateListPB>(
                    "ColumnRangePredicateListPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ColumnRangePredicateListPB {
    fn clear(&mut self) {
        self.clear_range_predicates();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ColumnRangePredicateListPB {
    fn eq(&self, other: &ColumnRangePredicateListPB) -> bool {
        self.range_predicates == other.range_predicates &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ColumnRangePredicateListPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct NewScanRequestPB {
    // message fields
    tablet_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    limit: ::std::option::Option<u64>,
    DEPRECATED_range_predicates: ::protobuf::RepeatedField<ColumnRangePredicatePB>,
    column_predicates: ::protobuf::RepeatedField<super::common::ColumnPredicatePB>,
    start_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    stop_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    projected_columns: ::protobuf::RepeatedField<super::common::ColumnSchemaPB>,
    read_mode: ::std::option::Option<super::common::ReadMode>,
    snap_timestamp: ::std::option::Option<u64>,
    propagated_timestamp: ::std::option::Option<u64>,
    cache_blocks: ::std::option::Option<bool>,
    order_mode: ::std::option::Option<super::common::OrderMode>,
    last_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for NewScanRequestPB {}

impl NewScanRequestPB {
    pub fn new() -> NewScanRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static NewScanRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<NewScanRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NewScanRequestPB,
        };
        unsafe {
            instance.get(|| {
                NewScanRequestPB {
                    tablet_id: ::protobuf::SingularField::none(),
                    limit: ::std::option::Option::None,
                    DEPRECATED_range_predicates: ::protobuf::RepeatedField::new(),
                    column_predicates: ::protobuf::RepeatedField::new(),
                    start_primary_key: ::protobuf::SingularField::none(),
                    stop_primary_key: ::protobuf::SingularField::none(),
                    projected_columns: ::protobuf::RepeatedField::new(),
                    read_mode: ::std::option::Option::None,
                    snap_timestamp: ::std::option::Option::None,
                    propagated_timestamp: ::std::option::Option::None,
                    cache_blocks: ::std::option::Option::None,
                    order_mode: ::std::option::Option::None,
                    last_primary_key: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes tablet_id = 1;

    pub fn clear_tablet_id(&mut self) {
        self.tablet_id.clear();
    }

    pub fn has_tablet_id(&self) -> bool {
        self.tablet_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tablet_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.tablet_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tablet_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.tablet_id.is_none() {
            self.tablet_id.set_default();
        };
        self.tablet_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_tablet_id(&mut self) -> ::std::vec::Vec<u8> {
        self.tablet_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_tablet_id(&self) -> &[u8] {
        match self.tablet_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional uint64 limit = 2;

    pub fn clear_limit(&mut self) {
        self.limit = ::std::option::Option::None;
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = ::std::option::Option::Some(v);
    }

    pub fn get_limit(&self) -> u64 {
        self.limit.unwrap_or(0)
    }

    // repeated .kudu.tserver.ColumnRangePredicatePB DEPRECATED_range_predicates = 3;

    pub fn clear_DEPRECATED_range_predicates(&mut self) {
        self.DEPRECATED_range_predicates.clear();
    }

    // Param is passed by value, moved
    pub fn set_DEPRECATED_range_predicates(&mut self, v: ::protobuf::RepeatedField<ColumnRangePredicatePB>) {
        self.DEPRECATED_range_predicates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_DEPRECATED_range_predicates(&mut self) -> &mut ::protobuf::RepeatedField<ColumnRangePredicatePB> {
        &mut self.DEPRECATED_range_predicates
    }

    // Take field
    pub fn take_DEPRECATED_range_predicates(&mut self) -> ::protobuf::RepeatedField<ColumnRangePredicatePB> {
        ::std::mem::replace(&mut self.DEPRECATED_range_predicates, ::protobuf::RepeatedField::new())
    }

    pub fn get_DEPRECATED_range_predicates(&self) -> &[ColumnRangePredicatePB] {
        &self.DEPRECATED_range_predicates
    }

    // repeated .kudu.ColumnPredicatePB column_predicates = 13;

    pub fn clear_column_predicates(&mut self) {
        self.column_predicates.clear();
    }

    // Param is passed by value, moved
    pub fn set_column_predicates(&mut self, v: ::protobuf::RepeatedField<super::common::ColumnPredicatePB>) {
        self.column_predicates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_column_predicates(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        &mut self.column_predicates
    }

    // Take field
    pub fn take_column_predicates(&mut self) -> ::protobuf::RepeatedField<super::common::ColumnPredicatePB> {
        ::std::mem::replace(&mut self.column_predicates, ::protobuf::RepeatedField::new())
    }

    pub fn get_column_predicates(&self) -> &[super::common::ColumnPredicatePB] {
        &self.column_predicates
    }

    // optional bytes start_primary_key = 8;

    pub fn clear_start_primary_key(&mut self) {
        self.start_primary_key.clear();
    }

    pub fn has_start_primary_key(&self) -> bool {
        self.start_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.start_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.start_primary_key.is_none() {
            self.start_primary_key.set_default();
        };
        self.start_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.start_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_start_primary_key(&self) -> &[u8] {
        match self.start_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes stop_primary_key = 9;

    pub fn clear_stop_primary_key(&mut self) {
        self.stop_primary_key.clear();
    }

    pub fn has_stop_primary_key(&self) -> bool {
        self.stop_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.stop_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.stop_primary_key.is_none() {
            self.stop_primary_key.set_default();
        };
        self.stop_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.stop_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_stop_primary_key(&self) -> &[u8] {
        match self.stop_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated .kudu.ColumnSchemaPB projected_columns = 4;

    pub fn clear_projected_columns(&mut self) {
        self.projected_columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_projected_columns(&mut self, v: ::protobuf::RepeatedField<super::common::ColumnSchemaPB>) {
        self.projected_columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_projected_columns(&mut self) -> &mut ::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        &mut self.projected_columns
    }

    // Take field
    pub fn take_projected_columns(&mut self) -> ::protobuf::RepeatedField<super::common::ColumnSchemaPB> {
        ::std::mem::replace(&mut self.projected_columns, ::protobuf::RepeatedField::new())
    }

    pub fn get_projected_columns(&self) -> &[super::common::ColumnSchemaPB] {
        &self.projected_columns
    }

    // optional .kudu.ReadMode read_mode = 5;

    pub fn clear_read_mode(&mut self) {
        self.read_mode = ::std::option::Option::None;
    }

    pub fn has_read_mode(&self) -> bool {
        self.read_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_mode(&mut self, v: super::common::ReadMode) {
        self.read_mode = ::std::option::Option::Some(v);
    }

    pub fn get_read_mode(&self) -> super::common::ReadMode {
        self.read_mode.unwrap_or(super::common::ReadMode::READ_LATEST)
    }

    // optional fixed64 snap_timestamp = 6;

    pub fn clear_snap_timestamp(&mut self) {
        self.snap_timestamp = ::std::option::Option::None;
    }

    pub fn has_snap_timestamp(&self) -> bool {
        self.snap_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_snap_timestamp(&mut self, v: u64) {
        self.snap_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_snap_timestamp(&self) -> u64 {
        self.snap_timestamp.unwrap_or(0)
    }

    // optional fixed64 propagated_timestamp = 7;

    pub fn clear_propagated_timestamp(&mut self) {
        self.propagated_timestamp = ::std::option::Option::None;
    }

    pub fn has_propagated_timestamp(&self) -> bool {
        self.propagated_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propagated_timestamp(&mut self, v: u64) {
        self.propagated_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_propagated_timestamp(&self) -> u64 {
        self.propagated_timestamp.unwrap_or(0)
    }

    // optional bool cache_blocks = 10;

    pub fn clear_cache_blocks(&mut self) {
        self.cache_blocks = ::std::option::Option::None;
    }

    pub fn has_cache_blocks(&self) -> bool {
        self.cache_blocks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_blocks(&mut self, v: bool) {
        self.cache_blocks = ::std::option::Option::Some(v);
    }

    pub fn get_cache_blocks(&self) -> bool {
        self.cache_blocks.unwrap_or(true)
    }

    // optional .kudu.OrderMode order_mode = 11;

    pub fn clear_order_mode(&mut self) {
        self.order_mode = ::std::option::Option::None;
    }

    pub fn has_order_mode(&self) -> bool {
        self.order_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_order_mode(&mut self, v: super::common::OrderMode) {
        self.order_mode = ::std::option::Option::Some(v);
    }

    pub fn get_order_mode(&self) -> super::common::OrderMode {
        self.order_mode.unwrap_or(super::common::OrderMode::UNORDERED)
    }

    // optional bytes last_primary_key = 12;

    pub fn clear_last_primary_key(&mut self) {
        self.last_primary_key.clear();
    }

    pub fn has_last_primary_key(&self) -> bool {
        self.last_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.last_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.last_primary_key.is_none() {
            self.last_primary_key.set_default();
        };
        self.last_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.last_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_last_primary_key(&self) -> &[u8] {
        match self.last_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for NewScanRequestPB {
    fn is_initialized(&self) -> bool {
        if self.tablet_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.tablet_id));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint64());
                    self.limit = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.DEPRECATED_range_predicates));
                },
                13 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.column_predicates));
                },
                8 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.start_primary_key));
                },
                9 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.stop_primary_key));
                },
                4 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.projected_columns));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.read_mode = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.snap_timestamp = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.propagated_timestamp = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.cache_blocks = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.order_mode = ::std::option::Option::Some(tmp);
                },
                12 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.last_primary_key));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.tablet_id.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.limit.iter() {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.DEPRECATED_range_predicates.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.column_predicates.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.start_primary_key.iter() {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        for value in self.stop_primary_key.iter() {
            my_size += ::protobuf::rt::bytes_size(9, &value);
        };
        for value in self.projected_columns.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.read_mode.iter() {
            my_size += ::protobuf::rt::enum_size(5, *value);
        };
        if self.snap_timestamp.is_some() {
            my_size += 9;
        };
        if self.propagated_timestamp.is_some() {
            my_size += 9;
        };
        if self.cache_blocks.is_some() {
            my_size += 2;
        };
        for value in self.order_mode.iter() {
            my_size += ::protobuf::rt::enum_size(11, *value);
        };
        for value in self.last_primary_key.iter() {
            my_size += ::protobuf::rt::bytes_size(12, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.tablet_id.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.limit {
            try!(os.write_uint64(2, v));
        };
        for v in self.DEPRECATED_range_predicates.iter() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in self.column_predicates.iter() {
            try!(os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.start_primary_key.as_ref() {
            try!(os.write_bytes(8, &v));
        };
        if let Some(v) = self.stop_primary_key.as_ref() {
            try!(os.write_bytes(9, &v));
        };
        for v in self.projected_columns.iter() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.read_mode {
            try!(os.write_enum(5, v.value()));
        };
        if let Some(v) = self.snap_timestamp {
            try!(os.write_fixed64(6, v));
        };
        if let Some(v) = self.propagated_timestamp {
            try!(os.write_fixed64(7, v));
        };
        if let Some(v) = self.cache_blocks {
            try!(os.write_bool(10, v));
        };
        if let Some(v) = self.order_mode {
            try!(os.write_enum(11, v.value()));
        };
        if let Some(v) = self.last_primary_key.as_ref() {
            try!(os.write_bytes(12, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<NewScanRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for NewScanRequestPB {
    fn new() -> NewScanRequestPB {
        NewScanRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<NewScanRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "tablet_id",
                    NewScanRequestPB::has_tablet_id,
                    NewScanRequestPB::get_tablet_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "limit",
                    NewScanRequestPB::has_limit,
                    NewScanRequestPB::get_limit,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "DEPRECATED_range_predicates",
                    NewScanRequestPB::get_DEPRECATED_range_predicates,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "column_predicates",
                    NewScanRequestPB::get_column_predicates,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "start_primary_key",
                    NewScanRequestPB::has_start_primary_key,
                    NewScanRequestPB::get_start_primary_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "stop_primary_key",
                    NewScanRequestPB::has_stop_primary_key,
                    NewScanRequestPB::get_stop_primary_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "projected_columns",
                    NewScanRequestPB::get_projected_columns,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "read_mode",
                    NewScanRequestPB::has_read_mode,
                    NewScanRequestPB::get_read_mode,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "snap_timestamp",
                    NewScanRequestPB::has_snap_timestamp,
                    NewScanRequestPB::get_snap_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "propagated_timestamp",
                    NewScanRequestPB::has_propagated_timestamp,
                    NewScanRequestPB::get_propagated_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "cache_blocks",
                    NewScanRequestPB::has_cache_blocks,
                    NewScanRequestPB::get_cache_blocks,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "order_mode",
                    NewScanRequestPB::has_order_mode,
                    NewScanRequestPB::get_order_mode,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "last_primary_key",
                    NewScanRequestPB::has_last_primary_key,
                    NewScanRequestPB::get_last_primary_key,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NewScanRequestPB>(
                    "NewScanRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for NewScanRequestPB {
    fn clear(&mut self) {
        self.clear_tablet_id();
        self.clear_limit();
        self.clear_DEPRECATED_range_predicates();
        self.clear_column_predicates();
        self.clear_start_primary_key();
        self.clear_stop_primary_key();
        self.clear_projected_columns();
        self.clear_read_mode();
        self.clear_snap_timestamp();
        self.clear_propagated_timestamp();
        self.clear_cache_blocks();
        self.clear_order_mode();
        self.clear_last_primary_key();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for NewScanRequestPB {
    fn eq(&self, other: &NewScanRequestPB) -> bool {
        self.tablet_id == other.tablet_id &&
        self.limit == other.limit &&
        self.DEPRECATED_range_predicates == other.DEPRECATED_range_predicates &&
        self.column_predicates == other.column_predicates &&
        self.start_primary_key == other.start_primary_key &&
        self.stop_primary_key == other.stop_primary_key &&
        self.projected_columns == other.projected_columns &&
        self.read_mode == other.read_mode &&
        self.snap_timestamp == other.snap_timestamp &&
        self.propagated_timestamp == other.propagated_timestamp &&
        self.cache_blocks == other.cache_blocks &&
        self.order_mode == other.order_mode &&
        self.last_primary_key == other.last_primary_key &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for NewScanRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ScanRequestPB {
    // message fields
    scanner_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    new_scan_request: ::protobuf::SingularPtrField<NewScanRequestPB>,
    call_seq_id: ::std::option::Option<u32>,
    batch_size_bytes: ::std::option::Option<u32>,
    close_scanner: ::std::option::Option<bool>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ScanRequestPB {}

impl ScanRequestPB {
    pub fn new() -> ScanRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ScanRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<ScanRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScanRequestPB,
        };
        unsafe {
            instance.get(|| {
                ScanRequestPB {
                    scanner_id: ::protobuf::SingularField::none(),
                    new_scan_request: ::protobuf::SingularPtrField::none(),
                    call_seq_id: ::std::option::Option::None,
                    batch_size_bytes: ::std::option::Option::None,
                    close_scanner: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional bytes scanner_id = 1;

    pub fn clear_scanner_id(&mut self) {
        self.scanner_id.clear();
    }

    pub fn has_scanner_id(&self) -> bool {
        self.scanner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scanner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.scanner_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scanner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.scanner_id.is_none() {
            self.scanner_id.set_default();
        };
        self.scanner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_scanner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.scanner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_scanner_id(&self) -> &[u8] {
        match self.scanner_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional .kudu.tserver.NewScanRequestPB new_scan_request = 2;

    pub fn clear_new_scan_request(&mut self) {
        self.new_scan_request.clear();
    }

    pub fn has_new_scan_request(&self) -> bool {
        self.new_scan_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_new_scan_request(&mut self, v: NewScanRequestPB) {
        self.new_scan_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_scan_request(&mut self) -> &mut NewScanRequestPB {
        if self.new_scan_request.is_none() {
            self.new_scan_request.set_default();
        };
        self.new_scan_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_new_scan_request(&mut self) -> NewScanRequestPB {
        self.new_scan_request.take().unwrap_or_else(|| NewScanRequestPB::new())
    }

    pub fn get_new_scan_request(&self) -> &NewScanRequestPB {
        self.new_scan_request.as_ref().unwrap_or_else(|| NewScanRequestPB::default_instance())
    }

    // optional uint32 call_seq_id = 3;

    pub fn clear_call_seq_id(&mut self) {
        self.call_seq_id = ::std::option::Option::None;
    }

    pub fn has_call_seq_id(&self) -> bool {
        self.call_seq_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_call_seq_id(&mut self, v: u32) {
        self.call_seq_id = ::std::option::Option::Some(v);
    }

    pub fn get_call_seq_id(&self) -> u32 {
        self.call_seq_id.unwrap_or(0)
    }

    // optional uint32 batch_size_bytes = 4;

    pub fn clear_batch_size_bytes(&mut self) {
        self.batch_size_bytes = ::std::option::Option::None;
    }

    pub fn has_batch_size_bytes(&self) -> bool {
        self.batch_size_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_batch_size_bytes(&mut self, v: u32) {
        self.batch_size_bytes = ::std::option::Option::Some(v);
    }

    pub fn get_batch_size_bytes(&self) -> u32 {
        self.batch_size_bytes.unwrap_or(0)
    }

    // optional bool close_scanner = 5;

    pub fn clear_close_scanner(&mut self) {
        self.close_scanner = ::std::option::Option::None;
    }

    pub fn has_close_scanner(&self) -> bool {
        self.close_scanner.is_some()
    }

    // Param is passed by value, moved
    pub fn set_close_scanner(&mut self, v: bool) {
        self.close_scanner = ::std::option::Option::Some(v);
    }

    pub fn get_close_scanner(&self) -> bool {
        self.close_scanner.unwrap_or(false)
    }
}

impl ::protobuf::Message for ScanRequestPB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.scanner_id));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.new_scan_request));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.call_seq_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.batch_size_bytes = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.close_scanner = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.scanner_id.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in self.new_scan_request.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.call_seq_id.iter() {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in self.batch_size_bytes.iter() {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.close_scanner.is_some() {
            my_size += 2;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.scanner_id.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        if let Some(v) = self.new_scan_request.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.call_seq_id {
            try!(os.write_uint32(3, v));
        };
        if let Some(v) = self.batch_size_bytes {
            try!(os.write_uint32(4, v));
        };
        if let Some(v) = self.close_scanner {
            try!(os.write_bool(5, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ScanRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ScanRequestPB {
    fn new() -> ScanRequestPB {
        ScanRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ScanRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "scanner_id",
                    ScanRequestPB::has_scanner_id,
                    ScanRequestPB::get_scanner_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "new_scan_request",
                    ScanRequestPB::has_new_scan_request,
                    ScanRequestPB::get_new_scan_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "call_seq_id",
                    ScanRequestPB::has_call_seq_id,
                    ScanRequestPB::get_call_seq_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "batch_size_bytes",
                    ScanRequestPB::has_batch_size_bytes,
                    ScanRequestPB::get_batch_size_bytes,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "close_scanner",
                    ScanRequestPB::has_close_scanner,
                    ScanRequestPB::get_close_scanner,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScanRequestPB>(
                    "ScanRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ScanRequestPB {
    fn clear(&mut self) {
        self.clear_scanner_id();
        self.clear_new_scan_request();
        self.clear_call_seq_id();
        self.clear_batch_size_bytes();
        self.clear_close_scanner();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ScanRequestPB {
    fn eq(&self, other: &ScanRequestPB) -> bool {
        self.scanner_id == other.scanner_id &&
        self.new_scan_request == other.new_scan_request &&
        self.call_seq_id == other.call_seq_id &&
        self.batch_size_bytes == other.batch_size_bytes &&
        self.close_scanner == other.close_scanner &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ScanRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ScanResponsePB {
    // message fields
    error: ::protobuf::SingularPtrField<TabletServerErrorPB>,
    scanner_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    has_more_results: ::std::option::Option<bool>,
    data: ::protobuf::SingularPtrField<super::wire_protocol::RowwiseRowBlockPB>,
    snap_timestamp: ::std::option::Option<u64>,
    last_primary_key: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ScanResponsePB {}

impl ScanResponsePB {
    pub fn new() -> ScanResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ScanResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<ScanResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScanResponsePB,
        };
        unsafe {
            instance.get(|| {
                ScanResponsePB {
                    error: ::protobuf::SingularPtrField::none(),
                    scanner_id: ::protobuf::SingularField::none(),
                    has_more_results: ::std::option::Option::None,
                    data: ::protobuf::SingularPtrField::none(),
                    snap_timestamp: ::std::option::Option::None,
                    last_primary_key: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: TabletServerErrorPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut TabletServerErrorPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> TabletServerErrorPB {
        self.error.take().unwrap_or_else(|| TabletServerErrorPB::new())
    }

    pub fn get_error(&self) -> &TabletServerErrorPB {
        self.error.as_ref().unwrap_or_else(|| TabletServerErrorPB::default_instance())
    }

    // optional bytes scanner_id = 2;

    pub fn clear_scanner_id(&mut self) {
        self.scanner_id.clear();
    }

    pub fn has_scanner_id(&self) -> bool {
        self.scanner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scanner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.scanner_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scanner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.scanner_id.is_none() {
            self.scanner_id.set_default();
        };
        self.scanner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_scanner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.scanner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_scanner_id(&self) -> &[u8] {
        match self.scanner_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bool has_more_results = 3;

    pub fn clear_has_more_results(&mut self) {
        self.has_more_results = ::std::option::Option::None;
    }

    pub fn has_has_more_results(&self) -> bool {
        self.has_more_results.is_some()
    }

    // Param is passed by value, moved
    pub fn set_has_more_results(&mut self, v: bool) {
        self.has_more_results = ::std::option::Option::Some(v);
    }

    pub fn get_has_more_results(&self) -> bool {
        self.has_more_results.unwrap_or(false)
    }

    // optional .kudu.RowwiseRowBlockPB data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: super::wire_protocol::RowwiseRowBlockPB) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut super::wire_protocol::RowwiseRowBlockPB {
        if self.data.is_none() {
            self.data.set_default();
        };
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> super::wire_protocol::RowwiseRowBlockPB {
        self.data.take().unwrap_or_else(|| super::wire_protocol::RowwiseRowBlockPB::new())
    }

    pub fn get_data(&self) -> &super::wire_protocol::RowwiseRowBlockPB {
        self.data.as_ref().unwrap_or_else(|| super::wire_protocol::RowwiseRowBlockPB::default_instance())
    }

    // optional fixed64 snap_timestamp = 6;

    pub fn clear_snap_timestamp(&mut self) {
        self.snap_timestamp = ::std::option::Option::None;
    }

    pub fn has_snap_timestamp(&self) -> bool {
        self.snap_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_snap_timestamp(&mut self, v: u64) {
        self.snap_timestamp = ::std::option::Option::Some(v);
    }

    pub fn get_snap_timestamp(&self) -> u64 {
        self.snap_timestamp.unwrap_or(0)
    }

    // optional bytes last_primary_key = 7;

    pub fn clear_last_primary_key(&mut self) {
        self.last_primary_key.clear();
    }

    pub fn has_last_primary_key(&self) -> bool {
        self.last_primary_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_primary_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.last_primary_key = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_primary_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.last_primary_key.is_none() {
            self.last_primary_key.set_default();
        };
        self.last_primary_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_primary_key(&mut self) -> ::std::vec::Vec<u8> {
        self.last_primary_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_last_primary_key(&self) -> &[u8] {
        match self.last_primary_key.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ScanResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                2 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.scanner_id));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.has_more_results = ::std::option::Option::Some(tmp);
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_fixed64());
                    self.snap_timestamp = ::std::option::Option::Some(tmp);
                },
                7 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.last_primary_key));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in self.scanner_id.iter() {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        if self.has_more_results.is_some() {
            my_size += 2;
        };
        for value in self.data.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.snap_timestamp.is_some() {
            my_size += 9;
        };
        for value in self.last_primary_key.iter() {
            my_size += ::protobuf::rt::bytes_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.scanner_id.as_ref() {
            try!(os.write_bytes(2, &v));
        };
        if let Some(v) = self.has_more_results {
            try!(os.write_bool(3, v));
        };
        if let Some(v) = self.data.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.snap_timestamp {
            try!(os.write_fixed64(6, v));
        };
        if let Some(v) = self.last_primary_key.as_ref() {
            try!(os.write_bytes(7, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ScanResponsePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ScanResponsePB {
    fn new() -> ScanResponsePB {
        ScanResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ScanResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    ScanResponsePB::has_error,
                    ScanResponsePB::get_error,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "scanner_id",
                    ScanResponsePB::has_scanner_id,
                    ScanResponsePB::get_scanner_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "has_more_results",
                    ScanResponsePB::has_has_more_results,
                    ScanResponsePB::get_has_more_results,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "data",
                    ScanResponsePB::has_data,
                    ScanResponsePB::get_data,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor(
                    "snap_timestamp",
                    ScanResponsePB::has_snap_timestamp,
                    ScanResponsePB::get_snap_timestamp,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "last_primary_key",
                    ScanResponsePB::has_last_primary_key,
                    ScanResponsePB::get_last_primary_key,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScanResponsePB>(
                    "ScanResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ScanResponsePB {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_scanner_id();
        self.clear_has_more_results();
        self.clear_data();
        self.clear_snap_timestamp();
        self.clear_last_primary_key();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ScanResponsePB {
    fn eq(&self, other: &ScanResponsePB) -> bool {
        self.error == other.error &&
        self.scanner_id == other.scanner_id &&
        self.has_more_results == other.has_more_results &&
        self.data == other.data &&
        self.snap_timestamp == other.snap_timestamp &&
        self.last_primary_key == other.last_primary_key &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ScanResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ScannerKeepAliveRequestPB {
    // message fields
    scanner_id: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ScannerKeepAliveRequestPB {}

impl ScannerKeepAliveRequestPB {
    pub fn new() -> ScannerKeepAliveRequestPB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ScannerKeepAliveRequestPB {
        static mut instance: ::protobuf::lazy::Lazy<ScannerKeepAliveRequestPB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScannerKeepAliveRequestPB,
        };
        unsafe {
            instance.get(|| {
                ScannerKeepAliveRequestPB {
                    scanner_id: ::protobuf::SingularField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required bytes scanner_id = 1;

    pub fn clear_scanner_id(&mut self) {
        self.scanner_id.clear();
    }

    pub fn has_scanner_id(&self) -> bool {
        self.scanner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scanner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.scanner_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scanner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.scanner_id.is_none() {
            self.scanner_id.set_default();
        };
        self.scanner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_scanner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.scanner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_scanner_id(&self) -> &[u8] {
        match self.scanner_id.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ScannerKeepAliveRequestPB {
    fn is_initialized(&self) -> bool {
        if self.scanner_id.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.scanner_id));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.scanner_id.iter() {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.scanner_id.as_ref() {
            try!(os.write_bytes(1, &v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ScannerKeepAliveRequestPB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ScannerKeepAliveRequestPB {
    fn new() -> ScannerKeepAliveRequestPB {
        ScannerKeepAliveRequestPB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ScannerKeepAliveRequestPB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor(
                    "scanner_id",
                    ScannerKeepAliveRequestPB::has_scanner_id,
                    ScannerKeepAliveRequestPB::get_scanner_id,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScannerKeepAliveRequestPB>(
                    "ScannerKeepAliveRequestPB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ScannerKeepAliveRequestPB {
    fn clear(&mut self) {
        self.clear_scanner_id();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ScannerKeepAliveRequestPB {
    fn eq(&self, other: &ScannerKeepAliveRequestPB) -> bool {
        self.scanner_id == other.scanner_id &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ScannerKeepAliveRequestPB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct ScannerKeepAliveResponsePB {
    // message fields
    error: ::protobuf::SingularPtrField<TabletServerErrorPB>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for ScannerKeepAliveResponsePB {}

impl ScannerKeepAliveResponsePB {
    pub fn new() -> ScannerKeepAliveResponsePB {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static ScannerKeepAliveResponsePB {
        static mut instance: ::protobuf::lazy::Lazy<ScannerKeepAliveResponsePB> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ScannerKeepAliveResponsePB,
        };
        unsafe {
            instance.get(|| {
                ScannerKeepAliveResponsePB {
                    error: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .kudu.tserver.TabletServerErrorPB error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: TabletServerErrorPB) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut TabletServerErrorPB {
        if self.error.is_none() {
            self.error.set_default();
        };
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> TabletServerErrorPB {
        self.error.take().unwrap_or_else(|| TabletServerErrorPB::new())
    }

    pub fn get_error(&self) -> &TabletServerErrorPB {
        self.error.as_ref().unwrap_or_else(|| TabletServerErrorPB::default_instance())
    }
}

impl ::protobuf::Message for ScannerKeepAliveResponsePB {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in self.error.iter() {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.error.as_ref() {
            try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<ScannerKeepAliveResponsePB>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for ScannerKeepAliveResponsePB {
    fn new() -> ScannerKeepAliveResponsePB {
        ScannerKeepAliveResponsePB::new()
    }

    fn descriptor_static(_: ::std::option::Option<ScannerKeepAliveResponsePB>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "error",
                    ScannerKeepAliveResponsePB::has_error,
                    ScannerKeepAliveResponsePB::get_error,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ScannerKeepAliveResponsePB>(
                    "ScannerKeepAliveResponsePB",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for ScannerKeepAliveResponsePB {
    fn clear(&mut self) {
        self.clear_error();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for ScannerKeepAliveResponsePB {
    fn eq(&self, other: &ScannerKeepAliveResponsePB) -> bool {
        self.error == other.error &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for ScannerKeepAliveResponsePB {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TabletServerFeatures {
    UNKNOWN_FEATURE = 0,
    COLUMN_PREDICATES = 1,
}

impl ::protobuf::ProtobufEnum for TabletServerFeatures {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TabletServerFeatures> {
        match value {
            0 => ::std::option::Option::Some(TabletServerFeatures::UNKNOWN_FEATURE),
            1 => ::std::option::Option::Some(TabletServerFeatures::COLUMN_PREDICATES),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TabletServerFeatures] = &[
            TabletServerFeatures::UNKNOWN_FEATURE,
            TabletServerFeatures::COLUMN_PREDICATES,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<TabletServerFeatures>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TabletServerFeatures", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TabletServerFeatures {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x1a, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x18, 0x6b, 0x75, 0x64, 0x75,
    0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
    0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6b, 0x75, 0x64, 0x75, 0x2f, 0x74, 0x61, 0x62, 0x6c,
    0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
    0xaf, 0x04, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x43, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
    0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
    0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0d, 0x55,
    0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x12, 0x21, 0x0a, 0x06,
    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x22,
    0xaf, 0x03, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e,
    0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
    0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x12,
    0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x42,
    0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
    0x44, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
    0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
    0x41, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
    0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x41,
    0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15,
    0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41, 0x4e, 0x5f, 0x53,
    0x50, 0x45, 0x43, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
    0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x42,
    0x4c, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53,
    0x54, 0x53, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x48,
    0x41, 0x53, 0x5f, 0x41, 0x5f, 0x4e, 0x45, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
    0x41, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f,
    0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x49,
    0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
    0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x41,
    0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x51, 0x5f, 0x49, 0x44, 0x10, 0x0e, 0x12,
    0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45,
    0x52, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x52,
    0x56, 0x45, 0x52, 0x5f, 0x55, 0x55, 0x49, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41,
    0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4c,
    0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
    0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10,
    0x13, 0x22, 0x0f, 0x0a, 0x0d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x50, 0x42, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x50, 0x42, 0x22, 0xe5, 0x01, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x0e, 0x72, 0x6f,
    0x77, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65,
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x53, 0x0a, 0x19, 0x65, 0x78, 0x74,
    0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
    0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6b,
    0x75, 0x64, 0x75, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73,
    0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x11, 0x43, 0x4c, 0x49,
    0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1c,
    0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x22, 0xe1, 0x01, 0x0a,
    0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
    0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x21, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
    0x50, 0x42, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x72,
    0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
    0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77,
    0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
    0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x1a, 0x44, 0x0a, 0x0d, 0x50, 0x65,
    0x72, 0x52, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x09, 0x72,
    0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x12, 0x20,
    0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42,
    0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xb8, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73,
    0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
    0x50, 0x42, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72,
    0x6f, 0x72, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61,
    0x6e, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x35, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
    0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
    0x73, 0x65, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x1a, 0x9a, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75,
    0x73, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x0d,
    0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
    0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
    0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42,
    0x12, 0x1e, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
    0x32, 0x0e, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42,
    0x12, 0x31, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x64,
    0x75, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
    0x61, 0x50, 0x42, 0x22, 0x72, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e,
    0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x24, 0x0a,
    0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
    0x61, 0x50, 0x42, 0x12, 0x13, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75,
    0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x1d, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c,
    0x75, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
    0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x22, 0x5c, 0x0a, 0x1a, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
    0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c,
    0x69, 0x73, 0x74, 0x50, 0x42, 0x12, 0x3e, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70,
    0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x24, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
    0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
    0x61, 0x74, 0x65, 0x50, 0x42, 0x22, 0xe5, 0x03, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x53, 0x63, 0x61,
    0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x11, 0x0a, 0x09, 0x74, 0x61,
    0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x12, 0x0d, 0x0a,
    0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x12, 0x49, 0x0a, 0x1b,
    0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
    0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
    0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x64,
    0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
    0x6e, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03,
    0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
    0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x11, 0x73,
    0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79,
    0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70,
    0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
    0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
    0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x75,
    0x64, 0x75, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
    0x42, 0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05,
    0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x52, 0x65, 0x61, 0x64,
    0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x0b, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53,
    0x54, 0x12, 0x16, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
    0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x12, 0x1c, 0x0a, 0x14, 0x70, 0x72, 0x6f,
    0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
    0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x12, 0x1a, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65,
    0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
    0x72, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64,
    0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x4f,
    0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x09, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45,
    0x52, 0x45, 0x44, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d,
    0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x22, 0xa3, 0x01,
    0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
    0x12, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x0c, 0x12, 0x38, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77,
    0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x13, 0x0a,
    0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0d, 0x12, 0x18, 0x0a, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
    0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x15, 0x0a, 0x0d,
    0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x08, 0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
    0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e,
    0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x12, 0x18, 0x0a, 0x10,
    0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
    0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x75, 0x64, 0x75, 0x2e, 0x52, 0x6f, 0x77, 0x77,
    0x69, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12, 0x16, 0x0a,
    0x0e, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
    0x06, 0x20, 0x01, 0x28, 0x06, 0x12, 0x18, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72,
    0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x22,
    0x2f, 0x0a, 0x19, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
    0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x0a,
    0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c,
    0x22, 0x4e, 0x0a, 0x1a, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41,
    0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x30,
    0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
    0x6b, 0x75, 0x64, 0x75, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
    0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
    0x2a, 0x42, 0x0a, 0x14, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
    0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
    0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a,
    0x11, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
    0x45, 0x53, 0x10, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x6b, 0x75, 0x64, 0x75,
    0x64, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4a, 0xc9, 0x6e, 0x0a, 0x07, 0x12,
    0x05, 0x10, 0x00, 0xdc, 0x02, 0x01, 0x0a, 0x8c, 0x06, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x10, 0x08,
    0x14, 0x1a, 0x81, 0x06, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74,
    0x77, 0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x28, 0x41, 0x53, 0x46, 0x29, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x0a,
    0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x6f, 0x72, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x67, 0x72,
    0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x20, 0x20, 0x53, 0x65, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x0a, 0x20, 0x64,
    0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x64,
    0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x20, 0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x20,
    0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
    0x68, 0x69, 0x70, 0x2e, 0x20, 0x20, 0x54, 0x68, 0x65, 0x20, 0x41, 0x53, 0x46, 0x20, 0x6c, 0x69,
    0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65,
    0x0a, 0x20, 0x74, 0x6f, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x2c, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x28,
    0x74, 0x68, 0x65, 0x0a, 0x20, 0x22, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x3b,
    0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73, 0x65,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x65, 0x78, 0x63, 0x65, 0x70,
    0x74, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x0a,
    0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
    0x65, 0x2e, 0x20, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6f, 0x62, 0x74, 0x61,
    0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x70, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x74, 0x0a, 0x0a, 0x20, 0x20, 0x20,
    0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68,
    0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c,
    0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30, 0x0a, 0x0a, 0x20, 0x55, 0x6e, 0x6c,
    0x65, 0x73, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20,
    0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x61, 0x77, 0x20, 0x6f,
    0x72, 0x20, 0x61, 0x67, 0x72, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x20, 0x77,
    0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2c, 0x0a, 0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
    0x65, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x6e,
    0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
    0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x6f,
    0x6e, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x22, 0x41, 0x53, 0x20, 0x49, 0x53, 0x22, 0x20, 0x42, 0x41,
    0x53, 0x49, 0x53, 0x2c, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20, 0x57, 0x41, 0x52,
    0x52, 0x41, 0x4e, 0x54, 0x49, 0x45, 0x53, 0x20, 0x4f, 0x52, 0x20, 0x43, 0x4f, 0x4e, 0x44, 0x49,
    0x54, 0x49, 0x4f, 0x4e, 0x53, 0x20, 0x4f, 0x46, 0x20, 0x41, 0x4e, 0x59, 0x0a, 0x20, 0x4b, 0x49,
    0x4e, 0x44, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x65, 0x78, 0x70, 0x72, 0x65,
    0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x20,
    0x53, 0x65, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20,
    0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
    0x63, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72,
    0x6e, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
    0x20, 0x61, 0x6e, 0x64, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
    0x0a, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65,
    0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x12, 0x00, 0x2b, 0x0a,
    0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x12, 0x00, 0x2b, 0x0a, 0x0c, 0x0a, 0x05,
    0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7,
    0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12, 0x07, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07,
    0x00, 0x07, 0x12, 0x03, 0x12, 0x16, 0x2a, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x14,
    0x07, 0x21, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x15, 0x07, 0x28, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x16, 0x07, 0x21, 0x0a, 0x3e, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04,
    0x19, 0x00, 0x66, 0x01, 0x1a, 0x32, 0x20, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2d, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x65, 0x72,
    0x72, 0x6f, 0x72, 0x73, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x19, 0x08, 0x1b, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x1a, 0x02,
    0x5d, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1a, 0x07, 0x0b,
    0x0a, 0xdb, 0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x20, 0x04, 0x16,
    0x1a, 0xcb, 0x01, 0x20, 0x41, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x73,
    0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f,
    0x64, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x6e,
    0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x27, 0x73, 0x74,
    0x61, 0x74, 0x75, 0x73, 0x27, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c,
    0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x0a, 0x0a,
    0x20, 0x52, 0x50, 0x43, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x73,
    0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x0a, 0x20, 0x61, 0x62,
    0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x61, 0x73, 0x69, 0x6c, 0x79, 0x20, 0x70, 0x61, 0x72,
    0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x20, 0x04, 0x11, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x20, 0x14, 0x15, 0x0a, 0x47,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x23, 0x04, 0x17, 0x1a, 0x38, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
    0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x66,
    0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x01, 0x01, 0x12, 0x03, 0x23, 0x04, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x01, 0x02, 0x12, 0x03, 0x23, 0x15, 0x16, 0x0a, 0x49, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x02, 0x12, 0x03, 0x26, 0x04, 0x1a, 0x1a, 0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x77,
    0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x66,
    0x6f, 0x72, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
    0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x26,
    0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x26,
    0x18, 0x19, 0x0a, 0x5d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x2a, 0x04,
    0x19, 0x1a, 0x4e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x73, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6b, 0x65,
    0x79, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x0a, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x2a, 0x04,
    0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x2a, 0x17,
    0x18, 0x0a, 0x61, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x2e, 0x04, 0x1a,
    0x1a, 0x52, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x70, 0x72,
    0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x20, 0x64, 0x69, 0x64, 0x6e, 0x27, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63,
    0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x0a, 0x20, 0x73, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c,
    0x65, 0x74, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12,
    0x03, 0x2e, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12,
    0x03, 0x2e, 0x18, 0x19, 0x0a, 0x50, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03,
    0x31, 0x04, 0x19, 0x1a, 0x41, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x65, 0x64, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x20, 0x69, 0x73,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x68,
    0x6f, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65,
    0x72, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05,
    0x01, 0x12, 0x03, 0x31, 0x04, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05,
    0x02, 0x12, 0x03, 0x31, 0x17, 0x18, 0x0a, 0x67, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06,
    0x12, 0x03, 0x35, 0x04, 0x18, 0x1a, 0x58, 0x20, 0x41, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x64, 0x65, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e,
    0x73, 0x74, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x49, 0x44, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20,
    0x6e, 0x65, 0x76, 0x65, 0x72, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x6f,
    0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x35, 0x04, 0x13, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x35, 0x16, 0x17, 0x0a,
    0x6d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x39, 0x04, 0x1a, 0x1a, 0x5e,
    0x20, 0x41, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x63, 0x61, 0x6e,
    0x20, 0x77, 0x61, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x2d,
    0x2d, 0x20, 0x65, 0x2e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
    0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x70, 0x72, 0x65,
    0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x63,
    0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x39, 0x04, 0x15, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x02, 0x12, 0x03, 0x39, 0x18, 0x19, 0x0a, 0x80,
    0x01, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x08, 0x12, 0x03, 0x3d, 0x04, 0x17, 0x1a, 0x71,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x20, 0x63, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20,
    0x6e, 0x6f, 0x74, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x20,
    0x61, 0x6e, 0x64, 0x2f, 0x6f, 0x72, 0x0a, 0x20, 0x68, 0x61, 0x64, 0x20, 0x61, 0x20, 0x73, 0x65,
    0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x68,
    0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
    0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x3d, 0x04,
    0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x08, 0x02, 0x12, 0x03, 0x3d, 0x15,
    0x16, 0x0a, 0x54, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x09, 0x12, 0x03, 0x40, 0x04, 0x1f,
    0x1a, 0x45, 0x20, 0x4f, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x74,
    0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x73,
    0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x65,
    0x78, 0x69, 0x73, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x09, 0x01, 0x12, 0x03, 0x40, 0x04, 0x19, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x09, 0x02, 0x12, 0x03, 0x40, 0x1c, 0x1e, 0x0a, 0x7f, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x0a, 0x12, 0x03, 0x44, 0x04, 0x23, 0x1a, 0x70, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
    0x65, 0x72, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x65,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x22, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x0a, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65,
    0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x0a, 0x01, 0x12, 0x03, 0x44, 0x04, 0x1d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x0a, 0x02, 0x12, 0x03, 0x44, 0x20, 0x22, 0x0a, 0x4f, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x0b, 0x12, 0x03, 0x47, 0x04, 0x1c, 0x1a, 0x40, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x61,
    0x62, 0x6c, 0x65, 0x74, 0x20, 0x69, 0x73, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x20, 0x6f,
    0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x62,
    0x75, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
    0x47, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x47, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x47, 0x19, 0x1b, 0x0a, 0x4f, 0x0a, 0x06, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x0c, 0x12, 0x03, 0x4a, 0x04, 0x1a, 0x1a, 0x40, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e,
    0x74, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x61, 0x20, 0x73, 0x6e,
    0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x62, 0x75, 0x74, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x77, 0x61, 0x73,
    0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x4a, 0x04, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x4a, 0x17, 0x19, 0x0a, 0x40, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x4d, 0x04, 0x22, 0x1a, 0x31, 0x20, 0x41, 0x6e, 0x20, 0x69,
    0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c,
    0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x49, 0x44, 0x20, 0x77, 0x61, 0x73,
    0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x4d, 0x04, 0x1c, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x4d, 0x1f, 0x21, 0x0a, 0x4f, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x0e, 0x12, 0x03, 0x50, 0x04, 0x18, 0x1a, 0x40, 0x20, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
    0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x20, 0x63, 0x6f,
    0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x50, 0x04, 0x12, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0e, 0x02, 0x12, 0x03, 0x50, 0x15, 0x17, 0x0a, 0x50, 0x0a,
    0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0f, 0x12, 0x03, 0x53, 0x04, 0x1b, 0x1a, 0x41, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55,
    0x55, 0x49, 0x44, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63,
    0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0f, 0x01, 0x12, 0x03, 0x53, 0x04, 0x15, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0f, 0x02, 0x12, 0x03, 0x53, 0x18, 0x1a, 0x0a,
    0x52, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x10, 0x12, 0x03, 0x56, 0x04, 0x14, 0x1a, 0x43,
    0x20, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x2d, 0x61, 0x6e, 0x64,
    0x2d, 0x73, 0x77, 0x61, 0x70, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20,
    0x62, 0x79, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x52, 0x50, 0x43,
    0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x10, 0x01, 0x12, 0x03,
    0x56, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x10, 0x02, 0x12, 0x03,
    0x56, 0x11, 0x13, 0x0a, 0x55, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x11, 0x12, 0x03, 0x59,
    0x04, 0x1c, 0x1a, 0x46, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x65, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
    0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
    0x73, 0x73, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
    0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x11, 0x01, 0x12, 0x03, 0x59, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x11, 0x02, 0x12, 0x03, 0x59, 0x19, 0x1b, 0x0a, 0x2a, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x12, 0x12, 0x03, 0x5c, 0x04, 0x13, 0x1a, 0x1b, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x72, 0x6f, 0x74,
    0x74, 0x6c, 0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x12,
    0x01, 0x12, 0x03, 0x5c, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x12,
    0x02, 0x12, 0x03, 0x5c, 0x10, 0x12, 0x0a, 0x1e, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x60, 0x02, 0x35, 0x1a, 0x11, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
    0x63, 0x6f, 0x64, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12,
    0x03, 0x60, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x60,
    0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x60, 0x10, 0x14,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x60, 0x17, 0x18, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x08, 0x12, 0x03, 0x60, 0x19, 0x34, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x07, 0x12, 0x03, 0x60, 0x25, 0x32, 0x0a, 0xb7, 0x01, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x01, 0x12, 0x03, 0x65, 0x02, 0x22, 0x1a, 0xa9, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x69,
    0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61,
    0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x6f,
    0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x65,
    0x73, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x6c, 0x6f, 0x67, 0x20, 0x6d, 0x65, 0x73, 0x73,
    0x61, 0x67, 0x65, 0x73, 0x2c, 0x20, 0x65, 0x74, 0x63, 0x2c, 0x0a, 0x20, 0x74, 0x68, 0x6f, 0x75,
    0x67, 0x68, 0x20, 0x69, 0x74, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64,
    0x65, 0x20, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
    0x69, 0x63, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x65,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x65, 0x0b, 0x16,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x65, 0x17, 0x1d, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x65, 0x20, 0x21, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x01, 0x12, 0x04, 0x69, 0x00, 0x6a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12,
    0x03, 0x69, 0x08, 0x15, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x04, 0x6c, 0x00, 0x6d, 0x01,
    0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x6c, 0x08, 0x16, 0x0a, 0x37, 0x0a, 0x02,
    0x04, 0x03, 0x12, 0x05, 0x70, 0x00, 0x82, 0x01, 0x01, 0x1a, 0x2a, 0x20, 0x41, 0x20, 0x62, 0x61,
    0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x73, 0x65, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x73,
    0x65, 0x72, 0x74, 0x2f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x70, 0x08,
    0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x71, 0x02, 0x1f, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x04, 0x12, 0x03, 0x71, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x05, 0x12, 0x03, 0x71, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x71, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x71, 0x1d, 0x1e, 0x0a, 0xb9, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x01, 0x12,
    0x03, 0x76, 0x02, 0x1f, 0x1a, 0xab, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,
    0x6d, 0x61, 0x20, 0x61, 0x73, 0x20, 0x73, 0x65, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6d,
    0x61, 0x79, 0x20, 0x62, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x2d, 0x6f, 0x66, 0x2d, 0x64, 0x61, 0x74,
    0x65, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x61, 0x73, 0x65,
    0x0a, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x6f,
    0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
    0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x61, 0x75, 0x74,
    0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68,
    0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x4e, 0x55, 0x4c, 0x4c, 0x73, 0x0a,
    0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x04, 0x12, 0x03, 0x76, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x06, 0x12, 0x03, 0x76, 0x0b, 0x13, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x76, 0x14, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x01, 0x03, 0x12, 0x03, 0x76, 0x1d, 0x1e, 0x0a, 0x3b, 0x0a, 0x04, 0x04, 0x03,
    0x02, 0x02, 0x12, 0x03, 0x79, 0x02, 0x2e, 0x1a, 0x2e, 0x20, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
    0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x20,
    0x28, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x64,
    0x65, 0x6c, 0x65, 0x74, 0x65, 0x29, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x79, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x06, 0x12, 0x03,
    0x79, 0x0b, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x01, 0x12, 0x03, 0x79, 0x1b,
    0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x02, 0x03, 0x12, 0x03, 0x79, 0x2c, 0x2d, 0x0a,
    0x3c, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x03, 0x12, 0x03, 0x7c, 0x02, 0x5f, 0x1a, 0x2f, 0x20, 0x54,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73,
    0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x03, 0x04, 0x12, 0x03, 0x7c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x03, 0x06, 0x12, 0x03, 0x7c, 0x0b, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x7c, 0x23, 0x3c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x03,
    0x12, 0x03, 0x7c, 0x3f, 0x40, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x08, 0x12, 0x03,
    0x7c, 0x41, 0x5e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x03, 0x07, 0x12, 0x03, 0x7c, 0x4c,
    0x5d, 0x0a, 0x9a, 0x01, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x04, 0x12, 0x04, 0x81, 0x01, 0x02, 0x2c,
    0x1a, 0x8b, 0x01, 0x20, 0x41, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x20,
    0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x70, 0x72,
    0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a,
    0x20, 0x54, 0x4f, 0x44, 0x4f, 0x20, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x20, 0x73, 0x69, 0x67,
    0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x61,
    0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
    0x72, 0x65, 0x20, 0x61, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x0a, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x03, 0x02, 0x04, 0x04, 0x12, 0x04, 0x81, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x03, 0x02, 0x04, 0x05, 0x12, 0x04, 0x81, 0x01, 0x0b, 0x12, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x04, 0x01, 0x12, 0x04, 0x81, 0x01, 0x13, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x03, 0x02, 0x04, 0x03, 0x12, 0x04, 0x81, 0x01, 0x2a, 0x2b, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x04,
    0x12, 0x06, 0x84, 0x01, 0x00, 0x9a, 0x01, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x04, 0x01, 0x12,
    0x04, 0x84, 0x01, 0x08, 0x17, 0x0a, 0xdb, 0x02, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x00, 0x12, 0x04,
    0x8b, 0x01, 0x02, 0x29, 0x1a, 0xcc, 0x02, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x6e, 0x74, 0x69, 0x72, 0x65, 0x20, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
    0x6e, 0x73, 0x65, 0x50, 0x42, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x61,
    0x69, 0x6c, 0x65, 0x64, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20,
    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x0a, 0x20, 0x63, 0x61, 0x75,
    0x73, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x72,
    0x72, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
    0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x63, 0x61, 0x73, 0x65, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68,
    0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73,
    0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x0a,
    0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63,
    0x68, 0x69, 0x6e, 0x67, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x65, 0x72, 0x72,
    0x6f, 0x72, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x74, 0x6f, 0x20, 0x61,
    0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x72, 0x6f, 0x77, 0x0a, 0x20, 0x6f, 0x63, 0x63, 0x75,
    0x72, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
    0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x2c, 0x0a, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x69,
    0x66, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x04, 0x12, 0x04, 0x8b, 0x01,
    0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x06, 0x12, 0x04, 0x8b, 0x01, 0x0b,
    0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x01, 0x12, 0x04, 0x8b, 0x01, 0x1f, 0x24,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x00, 0x03, 0x12, 0x04, 0x8b, 0x01, 0x27, 0x28, 0x0a,
    0x94, 0x01, 0x0a, 0x04, 0x04, 0x04, 0x03, 0x00, 0x12, 0x06, 0x8f, 0x01, 0x02, 0x94, 0x01, 0x03,
    0x1a, 0x83, 0x01, 0x20, 0x49, 0x66, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x63,
    0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x74,
    0x69, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x6f, 0x73,
    0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x6c,
    0x6c, 0x20, 0x62, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x20, 0x62, 0x61, 0x63, 0x6b,
    0x20, 0x69, 0x6e, 0x20, 0x27, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72,
    0x6f, 0x72, 0x73, 0x27, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x03, 0x00, 0x01, 0x12,
    0x04, 0x8f, 0x01, 0x0a, 0x17, 0x0a, 0x3d, 0x0a, 0x06, 0x04, 0x04, 0x03, 0x00, 0x02, 0x00, 0x12,
    0x04, 0x91, 0x01, 0x04, 0x21, 0x1a, 0x2d, 0x20, 0x54, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65,
    0x78, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61, 0x74,
    0x63, 0x68, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12,
    0x04, 0x91, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x00, 0x05,
    0x12, 0x04, 0x91, 0x01, 0x0d, 0x12, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x04, 0x91, 0x01, 0x13, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02,
    0x00, 0x03, 0x12, 0x04, 0x91, 0x01, 0x1f, 0x20, 0x0a, 0x2a, 0x0a, 0x06, 0x04, 0x04, 0x03, 0x00,
    0x02, 0x01, 0x12, 0x04, 0x93, 0x01, 0x04, 0x23, 0x1a, 0x1a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65,
    0x72, 0x72, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
    0x65, 0x64, 0x2e, 0x0a, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x01, 0x04, 0x12,
    0x04, 0x93, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x01, 0x06,
    0x12, 0x04, 0x93, 0x01, 0x0d, 0x18, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x04, 0x93, 0x01, 0x19, 0x1e, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x04, 0x03, 0x00, 0x02,
    0x01, 0x03, 0x12, 0x04, 0x93, 0x01, 0x21, 0x22, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x01,
    0x12, 0x04, 0x95, 0x01, 0x02, 0x2c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x04, 0x12,
    0x04, 0x95, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x06, 0x12, 0x04,
    0x95, 0x01, 0x0b, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x01, 0x12, 0x04, 0x95,
    0x01, 0x19, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x01, 0x03, 0x12, 0x04, 0x95, 0x01,
    0x2a, 0x2b, 0x0a, 0x7d, 0x0a, 0x04, 0x04, 0x04, 0x02, 0x02, 0x12, 0x04, 0x99, 0x01, 0x02, 0x21,
    0x1a, 0x6f, 0x20, 0x54, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x20, 0x63, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77,
    0x72, 0x69, 0x74, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x4f, 0x44, 0x4f, 0x20, 0x4b, 0x55, 0x44, 0x55,
    0x2d, 0x36, 0x31, 0x31, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x20, 0x74,
    0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x04, 0x12, 0x04, 0x99, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x05, 0x12, 0x04, 0x99, 0x01, 0x0b, 0x12, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x01, 0x12, 0x04, 0x99, 0x01, 0x13, 0x1c, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x04, 0x02, 0x02, 0x03, 0x12, 0x04, 0x99, 0x01, 0x1f, 0x20, 0x0a, 0x26, 0x0a,
    0x02, 0x04, 0x05, 0x12, 0x06, 0x9d, 0x01, 0x00, 0x9e, 0x01, 0x01, 0x1a, 0x18, 0x20, 0x41, 0x20,
    0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x05, 0x01, 0x12, 0x04, 0x9d, 0x01,
    0x08, 0x1c, 0x0a, 0x27, 0x0a, 0x02, 0x04, 0x06, 0x12, 0x06, 0xa1, 0x01, 0x00, 0xab, 0x01, 0x01,
    0x1a, 0x19, 0x20, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
    0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04,
    0x06, 0x01, 0x12, 0x04, 0xa1, 0x01, 0x08, 0x1d, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x06, 0x02, 0x00,
    0x12, 0x04, 0xa2, 0x01, 0x02, 0x29, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x04, 0x12,
    0x04, 0xa2, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x06, 0x12, 0x04,
    0xa2, 0x01, 0x0b, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x01, 0x12, 0x04, 0xa2,
    0x01, 0x1f, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x00, 0x03, 0x12, 0x04, 0xa2, 0x01,
    0x27, 0x28, 0x0a, 0x0e, 0x0a, 0x04, 0x04, 0x06, 0x03, 0x00, 0x12, 0x06, 0xa4, 0x01, 0x02, 0xa8,
    0x01, 0x03, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x03, 0x00, 0x01, 0x12, 0x04, 0xa4, 0x01, 0x0a,
    0x1b, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x06, 0x03, 0x00, 0x02, 0x00, 0x12, 0x04, 0xa5, 0x01, 0x04,
    0x35, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x04, 0xa5, 0x01,
    0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x00, 0x06, 0x12, 0x04, 0xa5,
    0x01, 0x0d, 0x22, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04,
    0xa5, 0x01, 0x23, 0x30, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12,
    0x04, 0xa5, 0x01, 0x33, 0x34, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x06, 0x03, 0x00, 0x02, 0x01, 0x12,
    0x04, 0xa6, 0x01, 0x04, 0x21, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x01, 0x04,
    0x12, 0x04, 0xa6, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02, 0x01,
    0x06, 0x12, 0x04, 0xa6, 0x01, 0x0d, 0x15, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00, 0x02,
    0x01, 0x01, 0x12, 0x04, 0xa6, 0x01, 0x16, 0x1c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x04, 0xa6, 0x01, 0x1f, 0x20, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x06, 0x03,
    0x00, 0x02, 0x02, 0x12, 0x04, 0xa7, 0x01, 0x04, 0x34, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06, 0x03,
    0x00, 0x02, 0x02, 0x04, 0x12, 0x04, 0xa7, 0x01, 0x04, 0x0c, 0x0a, 0x0f, 0x0a, 0x07, 0x04, 0x06,
    0x03, 0x00, 0x02, 0x02, 0x06, 0x12, 0x04, 0xa7, 0x01, 0x0d, 0x1e, 0x0a, 0x0f, 0x0a, 0x07, 0x04,
    0x06, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x04, 0xa7, 0x01, 0x1f, 0x2f, 0x0a, 0x0f, 0x0a, 0x07,
    0x04, 0x06, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x04, 0xa7, 0x01, 0x32, 0x33, 0x0a, 0x0c, 0x0a,
    0x04, 0x04, 0x06, 0x02, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x33, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x06, 0x02, 0x01, 0x04, 0x12, 0x04, 0xaa, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06,
    0x02, 0x01, 0x06, 0x12, 0x04, 0xaa, 0x01, 0x0b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02,
    0x01, 0x01, 0x12, 0x04, 0xaa, 0x01, 0x1d, 0x2e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x06, 0x02, 0x01,
    0x03, 0x12, 0x04, 0xaa, 0x01, 0x31, 0x32, 0x0a, 0x74, 0x0a, 0x02, 0x04, 0x07, 0x12, 0x06, 0xb1,
    0x01, 0x00, 0xc1, 0x01, 0x01, 0x1a, 0x66, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
    0x45, 0x44, 0x3a, 0x20, 0x55, 0x73, 0x65, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72,
    0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x0a, 0x0a, 0x20, 0x41, 0x20, 0x72, 0x61,
    0x6e, 0x67, 0x65, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x6f, 0x6e,
    0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x75,
    0x6d, 0x6e, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x6e, 0x64, 0x65, 0x72,
    0x6c, 0x79, 0x69, 0x6e, 0x67, 0x0a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a,
    0x03, 0x04, 0x07, 0x01, 0x12, 0x04, 0xb1, 0x01, 0x08, 0x1e, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07,
    0x02, 0x00, 0x12, 0x04, 0xb2, 0x01, 0x02, 0x25, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00,
    0x04, 0x12, 0x04, 0xb2, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x06,
    0x12, 0x04, 0xb2, 0x01, 0x0b, 0x19, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x01, 0x12,
    0x04, 0xb2, 0x01, 0x1a, 0x20, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x00, 0x03, 0x12, 0x04,
    0xb2, 0x01, 0x23, 0x24, 0x0a, 0xe6, 0x03, 0x0a, 0x04, 0x04, 0x07, 0x02, 0x01, 0x12, 0x04, 0xbf,
    0x01, 0x02, 0x21, 0x1a, 0xd7, 0x03, 0x20, 0x54, 0x68, 0x65, 0x73, 0x65, 0x20, 0x62, 0x6f, 0x75,
    0x6e, 0x64, 0x73, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6e,
    0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
    0x3a, 0x0a, 0x20, 0x2d, 0x20, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x73, 0x3a, 0x20, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
    0x78, 0x61, 0x63, 0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x61, 0x6c, 0x75,
    0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
    0x0a, 0x20, 0x2d, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x78, 0x38,
    0x36, 0x20, 0x69, 0x6e, 0x2d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20, 0x72, 0x65, 0x70, 0x72,
    0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x2d, 0x20, 0x65, 0x67,
    0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x2c,
    0x20, 0x61, 0x20, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x2d, 0x65, 0x6e, 0x64, 0x69, 0x61, 0x6e,
    0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74,
    0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
    0x74, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
    0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x4e,
    0x55, 0x4c, 0x4c, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x2d, 0x2d, 0x0a, 0x20, 0x4e, 0x55, 0x4c,
    0x4c, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x6e, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74,
    0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20,
    0x74, 0x68, 0x61, 0x6e, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
    0x73, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
    0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x20,
    0x57, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c,
    0x6c, 0x79, 0x20, 0x61, 0x64, 0x64, 0x20, 0x61, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
    0x0a, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65,
    0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2d, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x0a,
    0x0a, 0x20, 0x42, 0x6f, 0x74, 0x68, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x20, 0x61, 0x72,
    0x65, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x07, 0x02, 0x01, 0x04, 0x12, 0x04, 0xbf, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x07, 0x02, 0x01, 0x05, 0x12, 0x04, 0xbf, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x07, 0x02, 0x01, 0x01, 0x12, 0x04, 0xbf, 0x01, 0x11, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07,
    0x02, 0x01, 0x03, 0x12, 0x04, 0xbf, 0x01, 0x1f, 0x20, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x07, 0x02,
    0x02, 0x12, 0x04, 0xc0, 0x01, 0x02, 0x2b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x04,
    0x12, 0x04, 0xc0, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x05, 0x12,
    0x04, 0xc0, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x01, 0x12, 0x04,
    0xc0, 0x01, 0x11, 0x26, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x07, 0x02, 0x02, 0x03, 0x12, 0x04, 0xc0,
    0x01, 0x29, 0x2a, 0x0a, 0x97, 0x01, 0x0a, 0x02, 0x04, 0x08, 0x12, 0x06, 0xc5, 0x01, 0x00, 0xc7,
    0x01, 0x01, 0x1a, 0x88, 0x01, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x72,
    0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79,
    0x20, 0x74, 0x68, 0x65, 0x20, 0x4a, 0x61, 0x76, 0x61, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
    0x2e, 0x20, 0x57, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x61, 0x70, 0x69, 0x64, 0x6c, 0x79, 0x20, 0x65,
    0x76, 0x6f, 0x6c, 0x76, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74,
    0x68, 0x69, 0x6e, 0x67, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x72, 0x65, 0x75, 0x73, 0x61, 0x62,
    0x6c, 0x65, 0x0a, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x77, 0x61, 0x79, 0x20, 0x74, 0x6f, 0x20,
    0x70, 0x61, 0x73, 0x73, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6e,
    0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a,
    0x03, 0x04, 0x08, 0x01, 0x12, 0x04, 0xc5, 0x01, 0x08, 0x22, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x08,
    0x02, 0x00, 0x12, 0x04, 0xc6, 0x01, 0x02, 0x37, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00,
    0x04, 0x12, 0x04, 0xc6, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00, 0x06,
    0x12, 0x04, 0xc6, 0x01, 0x0b, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00, 0x01, 0x12,
    0x04, 0xc6, 0x01, 0x22, 0x32, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x08, 0x02, 0x00, 0x03, 0x12, 0x04,
    0xc6, 0x01, 0x35, 0x36, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x09, 0x12, 0x06, 0xc9, 0x01, 0x00, 0xff,
    0x01, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x09, 0x01, 0x12, 0x04, 0xc9, 0x01, 0x08, 0x18, 0x0a,
    0x23, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x00, 0x12, 0x04, 0xcb, 0x01, 0x02, 0x1f, 0x1a, 0x15, 0x20,
    0x54, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x63,
    0x61, 0x6e, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x04, 0x12, 0x04, 0xcb,
    0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x05, 0x12, 0x04, 0xcb, 0x01,
    0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x01, 0x12, 0x04, 0xcb, 0x01, 0x11,
    0x1a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x00, 0x03, 0x12, 0x04, 0xcb, 0x01, 0x1d, 0x1e,
    0x0a, 0xa7, 0x01, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x01, 0x12, 0x04, 0xd0, 0x01, 0x02, 0x1c, 0x1a,
    0x98, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e,
    0x6e, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
    0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x73, 0x74, 0x6f, 0x70, 0x20, 0x79, 0x69, 0x65, 0x6c,
    0x64, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0a, 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x20, 0x61,
    0x66, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68,
    0x69, 0x73, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x01, 0x04, 0x12, 0x04, 0xd0, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02,
    0x01, 0x05, 0x12, 0x04, 0xd0, 0x01, 0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01,
    0x01, 0x12, 0x04, 0xd0, 0x01, 0x12, 0x17, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x01, 0x03,
    0x12, 0x04, 0xd0, 0x01, 0x1a, 0x1b, 0x0a, 0x62, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x02, 0x12, 0x04,
    0xd5, 0x01, 0x02, 0x42, 0x1a, 0x54, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
    0x44, 0x3a, 0x20, 0x75, 0x73, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x72,
    0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x0a,
    0x0a, 0x20, 0x41, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x72, 0x61, 0x6e,
    0x67, 0x65, 0x20, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x6f,
    0x20, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x02, 0x04, 0x12, 0x04, 0xd5, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02,
    0x02, 0x06, 0x12, 0x04, 0xd5, 0x01, 0x0b, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02,
    0x01, 0x12, 0x04, 0xd5, 0x01, 0x22, 0x3d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x02, 0x03,
    0x12, 0x04, 0xd5, 0x01, 0x40, 0x41, 0x0a, 0x2d, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x03, 0x12, 0x04,
    0xd8, 0x01, 0x02, 0x34, 0x1a, 0x1f, 0x20, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x70, 0x72,
    0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x6e, 0x66, 0x6f,
    0x72, 0x63, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x04, 0x12, 0x04,
    0xd8, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x06, 0x12, 0x04, 0xd8,
    0x01, 0x0b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x01, 0x12, 0x04, 0xd8, 0x01,
    0x1d, 0x2e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x03, 0x03, 0x12, 0x04, 0xd8, 0x01, 0x31,
    0x33, 0x0a, 0x45, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x04, 0x12, 0x04, 0xdb, 0x01, 0x02, 0x27, 0x1a,
    0x37, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
    0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x20, 0x73,
    0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x28, 0x69, 0x6e, 0x63, 0x6c,
    0x75, 0x73, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x04,
    0x04, 0x12, 0x04, 0xdb, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x04, 0x05,
    0x12, 0x04, 0xdb, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x04, 0x01, 0x12,
    0x04, 0xdb, 0x01, 0x11, 0x22, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x04, 0x03, 0x12, 0x04,
    0xdb, 0x01, 0x25, 0x26, 0x0a, 0x44, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x05, 0x12, 0x04, 0xdd, 0x01,
    0x02, 0x26, 0x1a, 0x36, 0x20, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x69,
    0x6d, 0x61, 0x72, 0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x74, 0x6f, 0x70,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x28, 0x65, 0x78,
    0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x29, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x05, 0x04, 0x12, 0x04, 0xdd, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02,
    0x05, 0x05, 0x12, 0x04, 0xdd, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x05,
    0x01, 0x12, 0x04, 0xdd, 0x01, 0x11, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x05, 0x03,
    0x12, 0x04, 0xdd, 0x01, 0x24, 0x25, 0x0a, 0xb8, 0x02, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x06, 0x12,
    0x04, 0xe4, 0x01, 0x02, 0x30, 0x1a, 0xa9, 0x02, 0x20, 0x57, 0x68, 0x69, 0x63, 0x68, 0x20, 0x63,
    0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
    0x2e, 0x0a, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e,
    0x20, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x2c, 0x20, 0x6e, 0x6f, 0x20,
    0x64, 0x61, 0x74, 0x61, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x74,
    0x75, 0x72, 0x6e, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
    0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x6f,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x52,
    0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x64,
    0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6d, 0x61, 0x6e, 0x79, 0x20, 0x72,
    0x6f, 0x77, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x61,
    0x73, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x6d, 0x61,
    0x79, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x0a,
    0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2d,
    0x74, 0x72, 0x69, 0x70, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
    0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65,
    0x67, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x06, 0x04, 0x12, 0x04, 0xe4, 0x01, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x06, 0x06, 0x12, 0x04, 0xe4, 0x01, 0x0b, 0x19, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x06, 0x01, 0x12, 0x04, 0xe4, 0x01, 0x1a, 0x2b, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x06, 0x03, 0x12, 0x04, 0xe4, 0x01, 0x2e, 0x2f, 0x0a, 0x70, 0x0a,
    0x04, 0x04, 0x09, 0x02, 0x07, 0x12, 0x04, 0xe8, 0x01, 0x02, 0x3a, 0x1a, 0x62, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x2e, 0x0a, 0x20, 0x53, 0x65, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x62, 0x6f,
    0x75, 0x74, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x07, 0x04, 0x12, 0x04, 0xe8, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x07, 0x06, 0x12, 0x04, 0xe8, 0x01, 0x0b, 0x13, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x09, 0x02, 0x07, 0x01, 0x12, 0x04, 0xe8, 0x01, 0x14, 0x1d, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x09, 0x02, 0x07, 0x03, 0x12, 0x04, 0xe8, 0x01, 0x20, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x07, 0x08, 0x12, 0x04, 0xe8, 0x01, 0x22, 0x39, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x07, 0x07, 0x12, 0x04, 0xe8, 0x01, 0x2d, 0x38, 0x0a, 0x73, 0x0a, 0x04, 0x04, 0x09, 0x02,
    0x08, 0x12, 0x04, 0xec, 0x01, 0x02, 0x26, 0x1a, 0x65, 0x20, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
    0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73,
    0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x73, 0x65, 0x64, 0x0a, 0x20, 0x77,
    0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x6d, 0x6f, 0x64,
    0x65, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x52, 0x45, 0x41, 0x44,
    0x5f, 0x41, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x2e, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x08, 0x04, 0x12, 0x04, 0xec, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x09, 0x02, 0x08, 0x05, 0x12, 0x04, 0xec, 0x01, 0x0b, 0x12, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x09, 0x02, 0x08, 0x01, 0x12, 0x04, 0xec, 0x01, 0x13, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x08, 0x03, 0x12, 0x04, 0xec, 0x01, 0x24, 0x25, 0x0a, 0xdb, 0x01, 0x0a, 0x04, 0x04,
    0x09, 0x02, 0x09, 0x12, 0x04, 0xf1, 0x01, 0x02, 0x2c, 0x1a, 0xcc, 0x01, 0x20, 0x53, 0x65, 0x6e,
    0x74, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x65, 0x78,
    0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x20, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52,
    0x4f, 0x50, 0x41, 0x47, 0x41, 0x54, 0x45, 0x44, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x2e,
    0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x27, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x20, 0x73, 0x6f, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e,
    0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20,
    0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x0a, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65,
    0x73, 0x74, 0x61, 0x6d, 0x70, 0x20, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e,
    0x20, 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x27, 0x70, 0x72,
    0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
    0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x27, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x09,
    0x04, 0x12, 0x04, 0xf1, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x09, 0x05,
    0x12, 0x04, 0xf1, 0x01, 0x0b, 0x12, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x09, 0x01, 0x12,
    0x04, 0xf1, 0x01, 0x13, 0x27, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x09, 0x03, 0x12, 0x04,
    0xf1, 0x01, 0x2a, 0x2b, 0x0a, 0x9f, 0x01, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x0a, 0x12, 0x04, 0xf5,
    0x01, 0x02, 0x33, 0x1a, 0x90, 0x01, 0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x64,
    0x61, 0x74, 0x61, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
    0x62, 0x65, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x72,
    0x65, 0x61, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
    0x65, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x20,
    0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x75, 0x73, 0x65, 0x2e, 0x0a, 0x20, 0x44, 0x69, 0x73, 0x61,
    0x62, 0x6c, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x77, 0x65,
    0x72, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x63, 0x68, 0x75, 0x72, 0x6e, 0x20, 0x77, 0x68,
    0x65, 0x6e, 0x20, 0x64, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x20, 0x73,
    0x63, 0x61, 0x6e, 0x73, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x04, 0x12,
    0x04, 0xf5, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x05, 0x12, 0x04,
    0xf5, 0x01, 0x0b, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x01, 0x12, 0x04, 0xf5,
    0x01, 0x10, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x03, 0x12, 0x04, 0xf5, 0x01,
    0x1f, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x08, 0x12, 0x04, 0xf5, 0x01, 0x22,
    0x32, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0a, 0x07, 0x12, 0x04, 0xf5, 0x01, 0x2d, 0x31,
    0x0a, 0x6d, 0x0a, 0x04, 0x04, 0x09, 0x02, 0x0b, 0x12, 0x04, 0xf9, 0x01, 0x02, 0x3b, 0x1a, 0x5f,
    0x20, 0x57, 0x68, 0x65, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x72, 0x64, 0x65,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x72,
    0x6f, 0x77, 0x73, 0x20, 0x62, 0x79, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x20, 0x6b,
    0x65, 0x79, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
    0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x66, 0x61,
    0x75, 0x6c, 0x74, 0x2d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0b, 0x04, 0x12, 0x04, 0xf9, 0x01, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x09, 0x02, 0x0b, 0x06, 0x12, 0x04, 0xf9, 0x01, 0x0b, 0x14, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x09, 0x02, 0x0b, 0x01, 0x12, 0x04, 0xf9, 0x01, 0x15, 0x1f, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x09, 0x02, 0x0b, 0x03, 0x12, 0x04, 0xf9, 0x01, 0x22, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x09, 0x02, 0x0b, 0x08, 0x12, 0x04, 0xf9, 0x01, 0x25, 0x3a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09,
    0x02, 0x0b, 0x07, 0x12, 0x04, 0xf9, 0x01, 0x30, 0x39, 0x0a, 0xdb, 0x01, 0x0a, 0x04, 0x04, 0x09,
    0x02, 0x0c, 0x12, 0x04, 0xfe, 0x01, 0x02, 0x27, 0x1a, 0xcc, 0x01, 0x20, 0x49, 0x66, 0x20, 0x72,
    0x65, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x2c, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
    0x79, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20,
    0x73, 0x63, 0x61, 0x6e, 0x0a, 0x20, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x20, 0x49,
    0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x74, 0x61, 0x6b, 0x65, 0x20, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
    0x20, 0x6f, 0x76, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x73, 0x74, 0x61, 0x72, 0x74,
    0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x60, 0x0a, 0x20, 0x66,
    0x69, 0x65, 0x6c, 0x64, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x73, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
    0x69, 0x76, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
    0x79, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0c, 0x04,
    0x12, 0x04, 0xfe, 0x01, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0c, 0x05, 0x12,
    0x04, 0xfe, 0x01, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0c, 0x01, 0x12, 0x04,
    0xfe, 0x01, 0x11, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x09, 0x02, 0x0c, 0x03, 0x12, 0x04, 0xfe,
    0x01, 0x24, 0x26, 0x0a, 0x8d, 0x06, 0x0a, 0x02, 0x04, 0x0a, 0x12, 0x06, 0x92, 0x02, 0x00, 0xaa,
    0x02, 0x01, 0x1a, 0xfe, 0x05, 0x20, 0x41, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x2c,
    0x20, 0x69, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x70, 0x65, 0x63, 0x69,
    0x66, 0x79, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x2e, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x72,
    0x20, 0x6f, 0x6e, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x0a, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73,
    0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x69, 0x64,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x65, 0x74,
    0x63, 0x68, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
    0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
    0x6e, 0x74, 0x0a, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x2e, 0x0a, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20,
    0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x6e,
    0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6d, 0x6f,
    0x72, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x69, 0x74, 0x27, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x0a, 0x20, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x20,
    0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x65, 0x78, 0x70,
    0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x2e, 0x20, 0x53, 0x6f, 0x6d, 0x65, 0x20, 0x65, 0x72,
    0x72, 0x6f, 0x72, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x54, 0x61, 0x62, 0x6c,
    0x65, 0x74, 0x20, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x79, 0x0a, 0x20, 0x63,
    0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
    0x20, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69,
    0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x73, 0x74,
    0x61, 0x74, 0x65, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x0a, 0x20, 0x69, 0x6e, 0x63,
    0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x20, 0x43, 0x6c, 0x69,
    0x65, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x20,
    0x74, 0x6f, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66, 0x61, 0x69, 0x6c,
    0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x28, 0x64, 0x75,
    0x65, 0x20, 0x74, 0x6f, 0x2c, 0x20, 0x66, 0x6f, 0x72, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
    0x6c, 0x65, 0x2c, 0x20, 0x61, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x72,
    0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x29, 0x2e,
    0x20, 0x49, 0x66, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
    0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74,
    0x68, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20,
    0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
    0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x0a,
    0x0a, 0x20, 0x59, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x61, 0x73, 0x6b, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20,
    0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x73, 0x61, 0x76, 0x65, 0x0a, 0x20, 0x61, 0x20, 0x74, 0x72, 0x69, 0x70, 0x20, 0x69, 0x66, 0x20,
    0x79, 0x6f, 0x75, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6e, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
    0x69, 0x6e, 0x67, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x0a, 0x0a, 0x20, 0x54,
    0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x65, 0x64, 0x20, 0x73,
    0x6f, 0x6d, 0x65, 0x77, 0x68, 0x61, 0x74, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x48, 0x42,
    0x61, 0x73, 0x65, 0x27, 0x73, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x41, 0x50,
    0x49, 0x2e, 0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0a, 0x01, 0x12, 0x04, 0x92, 0x02, 0x08, 0x15,
    0x0a, 0x7a, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x00, 0x12, 0x04, 0x95, 0x02, 0x02, 0x20, 0x1a, 0x6c,
    0x20, 0x49, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x6e, 0x67, 0x20, 0x61,
    0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x2c,
    0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73,
    0x65, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2e, 0x0a, 0x20,
    0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x2c, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6d,
    0x75, 0x73, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x27, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x61,
    0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x27, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0a, 0x02, 0x00, 0x04, 0x12, 0x04, 0x95, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0a, 0x02, 0x00, 0x05, 0x12, 0x04, 0x95, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a,
    0x02, 0x00, 0x01, 0x12, 0x04, 0x95, 0x02, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02,
    0x00, 0x03, 0x12, 0x04, 0x95, 0x02, 0x1e, 0x1f, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x01,
    0x12, 0x04, 0x96, 0x02, 0x02, 0x31, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x04, 0x12,
    0x04, 0x96, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x06, 0x12, 0x04,
    0x96, 0x02, 0x0b, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x01, 0x12, 0x04, 0x96,
    0x02, 0x1c, 0x2c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x01, 0x03, 0x12, 0x04, 0x96, 0x02,
    0x2f, 0x30, 0x0a, 0xff, 0x02, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x02, 0x12, 0x04, 0x9e, 0x02, 0x02,
    0x22, 0x1a, 0xf0, 0x02, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
    0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c,
    0x6c, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20,
    0x49, 0x44, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20,
    0x61, 0x74, 0x20, 0x30, 0x0a, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
    0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x66,
    0x74, 0x65, 0x72, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
    0x66, 0x75, 0x6c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x0a, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
    0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x74, 0x20, 0x62, 0x79, 0x20,
    0x31, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x72, 0x79, 0x69, 0x6e, 0x67,
    0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x0a, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x5f,
    0x6e, 0x6f, 0x74, 0x5f, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x73,
    0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
    0x0a, 0x20, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x64, 0x20, 0x61, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b,
    0x20, 0x6f, 0x66, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x63,
    0x61, 0x6e, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x6e, 0x0a, 0x20, 0x65, 0x72, 0x72,
    0x6f, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x02, 0x04, 0x12, 0x04, 0x9e,
    0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x02, 0x05, 0x12, 0x04, 0x9e, 0x02,
    0x0b, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x02, 0x01, 0x12, 0x04, 0x9e, 0x02, 0x12,
    0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x12, 0x04, 0x9e, 0x02, 0x20, 0x21,
    0x0a, 0xae, 0x01, 0x0a, 0x04, 0x04, 0x0a, 0x02, 0x03, 0x12, 0x04, 0xa3, 0x02, 0x02, 0x27, 0x1a,
    0x9f, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73,
    0x20, 0x61, 0x20, 0x68, 0x69, 0x6e, 0x74, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x20, 0x72,
    0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x0a,
    0x20, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x69, 0x6c, 0x79, 0x20, 0x66, 0x65, 0x77,
    0x65, 0x72, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x62, 0x79, 0x74, 0x65, 0x73,
    0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x04, 0xa3, 0x02, 0x02, 0x0a,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x03, 0x05, 0x12, 0x04, 0xa3, 0x02, 0x0b, 0x11, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x04, 0xa3, 0x02, 0x12, 0x22, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x04, 0xa3, 0x02, 0x25, 0x26, 0x0a, 0x9b, 0x02,
    0x0a, 0x04, 0x04, 0x0a, 0x02, 0x04, 0x12, 0x04, 0xa9, 0x02, 0x02, 0x22, 0x1a, 0x8c, 0x02, 0x20,
    0x49, 0x66, 0x20, 0x73, 0x65, 0x74, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20,
    0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x0a, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2c, 0x20, 0x72, 0x65, 0x67,
    0x61, 0x72, 0x64, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x68, 0x65, 0x74, 0x68,
    0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x68, 0x61, 0x76, 0x65,
    0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x2e,
    0x0a, 0x20, 0x49, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x69,
    0x6d, 0x70, 0x6c, 0x79, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x73, 0x65, 0x6c,
    0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x2c,
    0x20, 0x79, 0x6f, 0x75, 0x0a, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x73, 0x65, 0x74, 0x20, 0x62, 0x61,
    0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x20, 0x74,
    0x6f, 0x20, 0x30, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20,
    0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0a, 0x02, 0x04, 0x04, 0x12, 0x04, 0xa9, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a,
    0x02, 0x04, 0x05, 0x12, 0x04, 0xa9, 0x02, 0x0b, 0x0f, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02,
    0x04, 0x01, 0x12, 0x04, 0xa9, 0x02, 0x10, 0x1d, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0a, 0x02, 0x04,
    0x03, 0x12, 0x04, 0xa9, 0x02, 0x20, 0x21, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x0b, 0x12, 0x06, 0xac,
    0x02, 0x00, 0xcc, 0x02, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0b, 0x01, 0x12, 0x04, 0xac, 0x02,
    0x08, 0x16, 0x0a, 0x42, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x00, 0x12, 0x04, 0xae, 0x02, 0x02, 0x29,
    0x1a, 0x34, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x69, 0x66,
    0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72,
    0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x04, 0x12,
    0x04, 0xae, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x06, 0x12, 0x04,
    0xae, 0x02, 0x0b, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x01, 0x12, 0x04, 0xae,
    0x02, 0x1f, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x00, 0x03, 0x12, 0x04, 0xae, 0x02,
    0x27, 0x28, 0x0a, 0x77, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x01, 0x12, 0x04, 0xb2, 0x02, 0x02, 0x20,
    0x1a, 0x69, 0x20, 0x57, 0x68, 0x65, 0x6e, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
    0x72, 0x20, 0x69, 0x73, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
    0x72, 0x20, 0x49, 0x44, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62,
    0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x75, 0x6c, 0x6c, 0x20,
    0x6e, 0x65, 0x77, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x01, 0x04, 0x12, 0x04, 0xb2, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x01, 0x05, 0x12, 0x04, 0xb2, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x01, 0x01, 0x12, 0x04, 0xb2, 0x02, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x01,
    0x03, 0x12, 0x04, 0xb2, 0x02, 0x1e, 0x1f, 0x0a, 0x85, 0x03, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x02,
    0x12, 0x04, 0xbb, 0x02, 0x02, 0x25, 0x1a, 0xf6, 0x02, 0x20, 0x53, 0x65, 0x74, 0x20, 0x74, 0x6f,
    0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
    0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x61, 0x79,
    0x20, 0x62, 0x65, 0x20, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x73, 0x75,
    0x6c, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65,
    0x64, 0x0a, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x61,
    0x6e, 0x6e, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x6f, 0x72, 0x65,
    0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x0a, 0x20, 0x49, 0x44, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
    0x69, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f,
    0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
    0x64, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69,
    0x66, 0x20, 0x61, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73,
    0x20, 0x6e, 0x6f, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x72, 0x65,
    0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x0a, 0x20, 0x74, 0x68, 0x65,
    0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x52, 0x50, 0x43, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x72,
    0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
    0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x2c, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69,
    0x63, 0x68, 0x20, 0x63, 0x61, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x77, 0x69,
    0x6c, 0x6c, 0x0a, 0x20, 0x62, 0x65, 0x20, 0x6e, 0x6f, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
    0x72, 0x20, 0x49, 0x44, 0x20, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x2e, 0x0a, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x04, 0x12, 0x04, 0xbb, 0x02, 0x02, 0x0a, 0x0a, 0x0d,
    0x0a, 0x05, 0x04, 0x0b, 0x02, 0x02, 0x05, 0x12, 0x04, 0xbb, 0x02, 0x0b, 0x0f, 0x0a, 0x0d, 0x0a,
    0x05, 0x04, 0x0b, 0x02, 0x02, 0x01, 0x12, 0x04, 0xbb, 0x02, 0x10, 0x20, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0b, 0x02, 0x02, 0x03, 0x12, 0x04, 0xbb, 0x02, 0x23, 0x24, 0x0a, 0xcd, 0x01, 0x0a, 0x04,
    0x04, 0x0b, 0x02, 0x03, 0x12, 0x04, 0xc2, 0x02, 0x02, 0x26, 0x1a, 0xbe, 0x01, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
    0x6e, 0x65, 0x64, 0x20, 0x72, 0x6f, 0x77, 0x73, 0x2e, 0x0a, 0x0a, 0x20, 0x4e, 0x4f, 0x54, 0x45,
    0x3a, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2d, 0x72, 0x65, 0x6c,
    0x61, 0x74, 0x65, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x62, 0x6c, 0x6f, 0x63,
    0x6b, 0x2e, 0x0a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x77,
    0x69, 0x6c, 0x6c, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
    0x68, 0x65, 0x6d, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x62,
    0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x65,
    0x6e, 0x20, 0x69, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x0a, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0b, 0x02, 0x03, 0x04, 0x12, 0x04, 0xc2, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b,
    0x02, 0x03, 0x06, 0x12, 0x04, 0xc2, 0x02, 0x0b, 0x1c, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02,
    0x03, 0x01, 0x12, 0x04, 0xc2, 0x02, 0x1d, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x03,
    0x03, 0x12, 0x04, 0xc2, 0x02, 0x24, 0x25, 0x0a, 0xd8, 0x01, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x04,
    0x12, 0x04, 0xc7, 0x02, 0x02, 0x26, 0x1a, 0xc9, 0x01, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x6e,
    0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x20, 0x61, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63,
    0x61, 0x6e, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x2e,
    0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x73, 0x65,
    0x74, 0x0a, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20,
    0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
    0x68, 0x61, 0x64, 0x0a, 0x20, 0x27, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x72,
    0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x27, 0x20, 0x73, 0x65, 0x74, 0x29, 0x20, 0x61, 0x6e, 0x64,
    0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41,
    0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x73,
    0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x04, 0x04, 0x12, 0x04, 0xc7, 0x02, 0x02,
    0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x04, 0x05, 0x12, 0x04, 0xc7, 0x02, 0x0b, 0x12,
    0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x04, 0x01, 0x12, 0x04, 0xc7, 0x02, 0x13, 0x21, 0x0a,
    0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x04, 0x03, 0x12, 0x04, 0xc7, 0x02, 0x24, 0x25, 0x0a, 0x86,
    0x01, 0x0a, 0x04, 0x04, 0x0b, 0x02, 0x05, 0x12, 0x04, 0xcb, 0x02, 0x02, 0x26, 0x1a, 0x78, 0x20,
    0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x66, 0x61, 0x75,
    0x6c, 0x74, 0x2d, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6e,
    0x6e, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74,
    0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x20,
    0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x0a, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x72, 0x65, 0x74,
    0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
    0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x04,
    0x12, 0x04, 0xcb, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x05, 0x12,
    0x04, 0xcb, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x01, 0x12, 0x04,
    0xcb, 0x02, 0x11, 0x21, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0b, 0x02, 0x05, 0x03, 0x12, 0x04, 0xcb,
    0x02, 0x24, 0x25, 0x0a, 0x6c, 0x0a, 0x02, 0x04, 0x0c, 0x12, 0x06, 0xd0, 0x02, 0x00, 0xd2, 0x02,
    0x01, 0x1a, 0x5e, 0x20, 0x41, 0x20, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x6b, 0x65,
    0x65, 0x70, 0x2d, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x2e, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
    0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x69,
    0x6d, 0x65, 0x2c, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x69,
    0x74, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x6c, 0x69, 0x76, 0x65, 0x2e,
    0x0a, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0c, 0x01, 0x12, 0x04, 0xd0, 0x02, 0x08, 0x21, 0x0a, 0x0c,
    0x0a, 0x04, 0x04, 0x0c, 0x02, 0x00, 0x12, 0x04, 0xd1, 0x02, 0x02, 0x20, 0x0a, 0x0d, 0x0a, 0x05,
    0x04, 0x0c, 0x02, 0x00, 0x04, 0x12, 0x04, 0xd1, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04,
    0x0c, 0x02, 0x00, 0x05, 0x12, 0x04, 0xd1, 0x02, 0x0b, 0x10, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c,
    0x02, 0x00, 0x01, 0x12, 0x04, 0xd1, 0x02, 0x11, 0x1b, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0c, 0x02,
    0x00, 0x03, 0x12, 0x04, 0xd1, 0x02, 0x1e, 0x1f, 0x0a, 0x0c, 0x0a, 0x02, 0x04, 0x0d, 0x12, 0x06,
    0xd4, 0x02, 0x00, 0xd7, 0x02, 0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x04, 0x0d, 0x01, 0x12, 0x04, 0xd4,
    0x02, 0x08, 0x22, 0x0a, 0x42, 0x0a, 0x04, 0x04, 0x0d, 0x02, 0x00, 0x12, 0x04, 0xd6, 0x02, 0x02,
    0x29, 0x1a, 0x34, 0x20, 0x54, 0x68, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2c, 0x20, 0x69,
    0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x6f, 0x63, 0x63, 0x75, 0x72,
    0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65,
    0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x04,
    0x12, 0x04, 0xd6, 0x02, 0x02, 0x0a, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x06, 0x12,
    0x04, 0xd6, 0x02, 0x0b, 0x1e, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x01, 0x12, 0x04,
    0xd6, 0x02, 0x1f, 0x24, 0x0a, 0x0d, 0x0a, 0x05, 0x04, 0x0d, 0x02, 0x00, 0x03, 0x12, 0x04, 0xd6,
    0x02, 0x27, 0x28, 0x0a, 0x0c, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x06, 0xd9, 0x02, 0x00, 0xdc, 0x02,
    0x01, 0x0a, 0x0b, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x04, 0xd9, 0x02, 0x05, 0x19, 0x0a, 0x0c,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x04, 0xda, 0x02, 0x02, 0x16, 0x0a, 0x0d, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x04, 0xda, 0x02, 0x02, 0x11, 0x0a, 0x0d, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x00, 0x02, 0x12, 0x04, 0xda, 0x02, 0x14, 0x15, 0x0a, 0x0c, 0x0a, 0x04, 0x05, 0x00,
    0x02, 0x01, 0x12, 0x04, 0xdb, 0x02, 0x02, 0x18, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x04, 0xdb, 0x02, 0x02, 0x13, 0x0a, 0x0d, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02,
    0x12, 0x04, 0xdb, 0x02, 0x16, 0x17,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
